{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/vuetify/lib/components/transitions/dialog-transition.mjs","transforms":[{"name":"vite:load-fallback","result":"import { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\";\nimport { Transition } from 'vue';\nimport { acceleratedEasing, animate, deceleratedEasing, defineComponent, nullifyTransforms, standardEasing } from \"../../util/index.mjs\";\nexport const VDialogTransition = defineComponent({\n  name: 'VDialogTransition',\n  props: {\n    target: Object\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const functions = {\n      onBeforeEnter(el) {\n        el.style.pointerEvents = 'none';\n        el.style.visibility = 'hidden';\n      },\n\n      async onEnter(el, done) {\n        var _getChildren;\n\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        el.style.visibility = '';\n        const {\n          x,\n          y,\n          sx,\n          sy,\n          speed\n        } = getDimensions(props.target, el);\n        const animation = animate(el, [{\n          transform: `translate(${x}px, ${y}px) scale(${sx}, ${sy})`,\n          opacity: 0\n        }, {\n          transform: ''\n        }], {\n          duration: 225 * speed,\n          easing: deceleratedEasing\n        });\n        (_getChildren = getChildren(el)) == null ? void 0 : _getChildren.forEach(el => {\n          animate(el, [{\n            opacity: 0\n          }, {\n            opacity: 0,\n            offset: 0.33\n          }, {\n            opacity: 1\n          }], {\n            duration: 225 * 2 * speed,\n            easing: standardEasing\n          });\n        });\n        animation.finished.then(() => done());\n      },\n\n      onAfterEnter(el) {\n        el.style.removeProperty('pointer-events');\n      },\n\n      onBeforeLeave(el) {\n        el.style.pointerEvents = 'none';\n      },\n\n      async onLeave(el, done) {\n        var _getChildren2;\n\n        await new Promise(resolve => requestAnimationFrame(resolve));\n        const {\n          x,\n          y,\n          sx,\n          sy,\n          speed\n        } = getDimensions(props.target, el);\n        const animation = animate(el, [{\n          transform: ''\n        }, {\n          transform: `translate(${x}px, ${y}px) scale(${sx}, ${sy})`,\n          opacity: 0\n        }], {\n          duration: 125 * speed,\n          easing: acceleratedEasing\n        });\n        animation.finished.then(() => done());\n        (_getChildren2 = getChildren(el)) == null ? void 0 : _getChildren2.forEach(el => {\n          animate(el, [{}, {\n            opacity: 0,\n            offset: 0.2\n          }, {\n            opacity: 0\n          }], {\n            duration: 125 * 2 * speed,\n            easing: standardEasing\n          });\n        });\n      },\n\n      onAfterLeave(el) {\n        el.style.removeProperty('pointer-events');\n      }\n\n    };\n    return () => {\n      return props.target ? _createVNode(Transition, _mergeProps({\n        \"name\": \"dialog-transition\"\n      }, functions, {\n        \"css\": false\n      }), slots) : _createVNode(Transition, {\n        \"name\": \"dialog-transition\"\n      }, slots);\n    };\n  }\n\n});\n/** Animatable children (card, sheet, list) */\n\nfunction getChildren(el) {\n  var _el$querySelector;\n\n  const els = (_el$querySelector = el.querySelector(':scope > .v-card, :scope > .v-sheet, :scope > .v-list')) == null ? void 0 : _el$querySelector.children;\n  return els && [...els];\n}\n\nfunction getDimensions(target, el) {\n  const targetBox = target.getBoundingClientRect();\n  const elBox = nullifyTransforms(el);\n  const [originX, originY] = getComputedStyle(el).transformOrigin.split(' ').map(v => parseFloat(v));\n  const [anchorSide, anchorOffset] = getComputedStyle(el).getPropertyValue('--v-overlay-anchor-origin').split(' ');\n  let offsetX = targetBox.left + targetBox.width / 2;\n\n  if (anchorSide === 'left' || anchorOffset === 'left') {\n    offsetX -= targetBox.width / 2;\n  } else if (anchorSide === 'right' || anchorOffset === 'right') {\n    offsetX += targetBox.width / 2;\n  }\n\n  let offsetY = targetBox.top + targetBox.height / 2;\n\n  if (anchorSide === 'top' || anchorOffset === 'top') {\n    offsetY -= targetBox.height / 2;\n  } else if (anchorSide === 'bottom' || anchorOffset === 'bottom') {\n    offsetY += targetBox.height / 2;\n  }\n\n  const tsx = targetBox.width / elBox.width;\n  const tsy = targetBox.height / elBox.height;\n  const maxs = Math.max(1, tsx, tsy);\n  const sx = tsx / maxs;\n  const sy = tsy / maxs; // Animate elements larger than 12% of the screen area up to 1.5x slower\n\n  const asa = elBox.width * elBox.height / (window.innerWidth * window.innerHeight);\n  const speed = asa > 0.12 ? Math.min(1.5, (asa - 0.12) * 10 + 1) : 1;\n  return {\n    x: offsetX - (originX + elBox.left),\n    y: offsetY - (originY + elBox.top),\n    sx,\n    sy,\n    speed\n  };\n}\n//# sourceMappingURL=dialog-transition.mjs.map","start":1667202982066,"end":1667202982305}]}
