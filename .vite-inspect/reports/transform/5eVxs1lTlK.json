{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/is-generator-function/index.js","transforms":[{"name":"vite:load-fallback","result":"'use strict';\n\nvar toStr = Object.prototype.toString;\nvar fnToStr = Function.prototype.toString;\nvar isFnRegex = /^\\s*(?:function)?\\*/;\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar getProto = Object.getPrototypeOf;\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\nvar GeneratorFunction;\n\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr.call(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\tif (!getProto) {\n\t\treturn false;\n\t}\n\tif (typeof GeneratorFunction === 'undefined') {\n\t\tvar generatorFunc = getGeneratorFunc();\n\t\tGeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n\t}\n\treturn getProto(fn) === GeneratorFunction;\n};\n","start":1667202705590,"end":1667202706122},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/has-tostringtag/shams.js?commonjs-wrapped\";\n\nvar isGeneratorFunction;\nvar hasRequiredIsGeneratorFunction;\n\nfunction requireIsGeneratorFunction () {\n\tif (hasRequiredIsGeneratorFunction) return isGeneratorFunction;\n\thasRequiredIsGeneratorFunction = 1;\n\t'use strict';\n\n\tvar toStr = Object.prototype.toString;\n\tvar fnToStr = Function.prototype.toString;\n\tvar isFnRegex = /^\\s*(?:function)?\\*/;\n\tvar hasToStringTag = require$$0()();\n\tvar getProto = Object.getPrototypeOf;\n\tvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\t\tif (!hasToStringTag) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn Function('return function*() {}')();\n\t\t} catch (e) {\n\t\t}\n\t};\n\tvar GeneratorFunction;\n\n\tisGeneratorFunction = function isGeneratorFunction(fn) {\n\t\tif (typeof fn !== 'function') {\n\t\t\treturn false;\n\t\t}\n\t\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!hasToStringTag) {\n\t\t\tvar str = toStr.call(fn);\n\t\t\treturn str === '[object GeneratorFunction]';\n\t\t}\n\t\tif (!getProto) {\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof GeneratorFunction === 'undefined') {\n\t\t\tvar generatorFunc = getGeneratorFunc();\n\t\t\tGeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n\t\t}\n\t\treturn getProto(fn) === GeneratorFunction;\n\t};\n\treturn isGeneratorFunction;\n}\n\nexport { requireIsGeneratorFunction as __require };","start":1667202706123,"end":1667202707188,"order":"normal"}]}
