{"resolvedId":"C:/chohbin/Fhir-Test-Web/src/assets/js/sdk/oauth.js","transforms":[{"name":"vite:load-fallback","result":"/*eslint-disable*/\r\n// 인증토큰 발급 요청(Authorization Code Grant)\r\nexport function authorizationCode(config) {\r\n\r\n    var authorizationCodeData = {\r\n        client_id: config.client_id,\r\n        redirect_uri: config.redirect_uri,\r\n        response_type: \"code\",\r\n        scope: config.scope,\r\n        state: config.state\r\n    };\r\n\r\n    var queryStringData = queryString(authorizationCodeData);\r\n    location.href = config.authorize + \"?\" + queryStringData;\r\n};\r\n// Code를 이용한 인증 토큰 발급 요청(Authorization Code Grant)\r\nexport function getToken(config, code) {\r\n\r\n    var getTokenData = {\r\n        code: code,\r\n        redirect_uri: config.redirect_uri,\r\n        grant_type: \"authorization_code\"\r\n    };\r\n\r\n    var queryStringData = queryString(getTokenData);\r\n\r\n    return authXMLHttpRequest(config, queryStringData);\r\n};\r\n// 인증토큰 발급 요청(Implicit Grant)\r\nexport function implicit(config) {\r\n\r\n    var implicitData = {\r\n        client_id: config.client_id,\r\n        redirect_uri: config.redirect_uri,\r\n        response_type: \"token\",\r\n        scope: config.scope,\r\n        state: config.state\r\n    };\r\n\r\n    var queryStringData = queryString(implicitData);\r\n\r\n\r\n    location.href = config.authorize + \"?\" + queryStringData;\r\n};\r\n// 인증토큰 발급 요청(Client Credentials Grant)\r\nexport function clientCredentials(config) {\r\n\r\n    var clientCredentialsData = {\r\n        grant_type: \"client_credentials\",\r\n        scope: config.scope,\r\n        state: '1234'\r\n    };\r\n\r\n    var queryStringData = queryString(clientCredentialsData);\r\n    return authXMLHttpRequest(config, queryStringData);\r\n};\r\n\r\n// 인증토큰 발급 요청(Resource Owner Password Credentials Grant)\r\nexport function passwordCredentials(config, userInfo) {\r\n\r\n    var passwordCredentialsData = {\r\n        grant_type: \"password\",\r\n        username: userInfo.userId,\r\n        password: userInfo.userPw,\r\n        scope: config.scope,\r\n        state: '1234'\r\n    };\r\n\r\n    var queryStringData = queryString(passwordCredentialsData);\r\n\r\n    return authXMLHttpRequest(config, queryStringData);\r\n};\r\n\r\n// 인증토큰 재발급 요청(Refresh)\r\nexport function refresh(config, refresh_token) {\r\n\r\n    var refreshData = {\r\n        grant_type: \"refresh_token\",\r\n        refresh_token: refresh_token,\r\n        scope: config.scope\r\n    };\r\n\r\n    var queryStringData = queryString(refreshData);\r\n\r\n    return authXMLHttpRequest(config, queryStringData);\r\n};\r\n\r\n// queryString 만들기\r\nfunction queryString(data) {\r\nvar queryStringData = Object.keys(data).map(function(key) {\r\n    return key + '=' + data[key]\r\n}).join('&');\r\n\r\nreturn queryStringData;\r\n}\r\n\r\n// 인증 토큰 요청\r\nfunction authXMLHttpRequest(config, queryStringData) {\r\n    return new Promise(function(resolve, reject) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", config.token, true);\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n        xhr.setRequestHeader(\"Authorization\", \"Basic \" + btoa(config.client_id + \":\" + config.client_secret));\r\n        xhr.send(queryStringData);\r\n\r\n        xhr.onreadystatechange = function() {\r\n            if(xhr.readyState == xhr.DONE) {\r\n                if(xhr.status >= 200 && xhr.status < 300) {\r\n                    var data = JSON.parse(xhr.responseText);\r\n                    resolve(data);\r\n                } else {\r\n                    reject(xhr);\r\n                }\r\n            }\r\n        };\r\n    })\r\n}","start":1667202980155,"end":1667202980491}]}
