{"resolvedId":"C:/chohbin/Fhir-Test-Web/src/views/sdkSample/OauthView.vue","transforms":[{"name":"vite:load-fallback","result":"<template>\r\n\t<TheViewLayout>\r\n\t\t<template #mainPanel>\r\n\t\t\t<v-container>\r\n\t\t\t\t<h1>Oauth Sample</h1>\r\n\t\t\t</v-container>\r\n\t\t\t<v-container>\r\n\t\t\t\t<h3>Redwood OAuth Library (4가지 로그인)</h3>\r\n\t\t\t</v-container>\r\n\r\n\t\t\t<v-container>\r\n\t\t\t\t<v-row>\r\n\t\t\t\t\t<v-col\r\n\t\t\t\t\t\tv-for=\"item in getTokenBtnList\"\r\n\t\t\t\t\t\t:key=\"item\"\r\n\t\t\t\t\t\tcols=\"12\"\r\n\t\t\t\t\t\tmd=\"6\"\r\n\t\t\t\t\t\tmax-width=\"250\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<v-btn width=\"100%\" @click=\"fetchMethods(item.methods)\">\r\n\t\t\t\t\t\t\t{{ item.title }}\r\n\t\t\t\t\t\t</v-btn>\r\n\t\t\t\t\t</v-col>\r\n\t\t\t\t</v-row>\r\n\t\t\t</v-container>\r\n\r\n\t\t\t<v-container v-if=\"isInputBoxShow\">\r\n\t\t\t\t<h4>FetchTokenPassword 정보 입력</h4>\r\n\t\t\t\t<v-card class=\"ma-2 pa-4\">\r\n\t\t\t\t\t<v-form class=\"justify-center mb-6\" ref=\"form\">\r\n\t\t\t\t\t\t<!-- :style=\"`width:50%;`\" -->\r\n\t\t\t\t\t\t<!-- :rules=\"nameRules\" -->\r\n\t\t\t\t\t\t<v-text-field\r\n\t\t\t\t\t\t\tv-model=\"userId\"\r\n\t\t\t\t\t\t\t:counter=\"10\"\r\n\t\t\t\t\t\t\tlabel=\"UserId\"\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t></v-text-field>\r\n\t\t\t\t\t\t<!-- :rules=\"emailRules\" -->\r\n\t\t\t\t\t\t<v-text-field\r\n\t\t\t\t\t\t\tv-model=\"userPw\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t></v-text-field>\r\n\r\n\t\t\t\t\t\t<v-btn color=\"warning\" @click=\"FetchTokenPassword()\"> 제출 </v-btn>\r\n\t\t\t\t\t</v-form>\r\n\t\t\t\t</v-card>\r\n\t\t\t</v-container>\r\n\r\n\t\t\t<!-- <button @click=\"btnTokenRefresh()\">Refresh Token</button> -->\r\n\t\t\t<v-container>\r\n\t\t\t\t<h3>Token Result</h3>\r\n\t\t\t</v-container>\r\n\t\t\t<v-container>\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-if=\"\r\n\t\t\t\t\t\toauthType === getTokenBtnList[0].title ||\r\n\t\t\t\t\t\toauthType === getTokenBtnList[3].title\r\n\t\t\t\t\t\"\r\n\t\t\t\t\tclass=\"d-flex justify-center mb-6\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<v-card-subtitle class=\"d-flex align-center\"\r\n\t\t\t\t\t\t>토큰 재발급\r\n\t\t\t\t\t\t<v-tooltip activator=\"parent\" location=\"bottom\"\r\n\t\t\t\t\t\t\t>Authorization Code인증, Password Credentails 인증 방식에만\r\n\t\t\t\t\t\t\tRefresh Token 발급됨</v-tooltip\r\n\t\t\t\t\t\t></v-card-subtitle\r\n\t\t\t\t\t>\r\n\t\t\t\t\t<v-btn\r\n\t\t\t\t\t\tclass=\"d-flex align-center\"\r\n\t\t\t\t\t\tstyle=\"width: 250px\"\r\n\t\t\t\t\t\t@click=\"fetchRefreshToken()\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{{ refreshTokenBtn.title }}\r\n\t\t\t\t\t</v-btn>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<v-card>\r\n\t\t\t\t\t<v-card-item>\r\n\t\t\t\t\t\t<v-card-subtitle>인증타입 : {{ oauthType }}</v-card-subtitle>\r\n\t\t\t\t\t</v-card-item>\r\n\r\n\t\t\t\t\t<v-card-text :style=\"`min-height:200px;`\">\r\n\t\t\t\t\t\t<v-progress-circular\r\n\t\t\t\t\t\t\tv-if=\"isOauthResult\"\r\n\t\t\t\t\t\t\tindeterminate\r\n\t\t\t\t\t\t\tcolor=\"red\"\r\n\t\t\t\t\t\t\tstyle=\"margin-left: 50%; margin-top: 50px\"\r\n\t\t\t\t\t\t></v-progress-circular>\r\n\t\t\t\t\t\t<!-- class=\"justify-center\" -->\r\n\t\t\t\t\t\t<template v-else>\r\n\t\t\t\t\t\t\t{{ oauthResult }}\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t</v-card-text>\r\n\t\t\t\t</v-card>\r\n\t\t\t</v-container>\r\n\t\t\t<!-- <textarea id=\"token_display\" cols=\"100\" rows=\"20\"></textarea> -->\r\n\t\t</template>\r\n\t</TheViewLayout>\r\n</template>\r\n\r\n<script setup>\r\nimport { onMounted, ref, watch, onUpdated } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport TheViewLayout from '@/layouts/TheViewLayout.vue';\r\nimport {\r\n\tgetTokenAuthCode,\r\n\tgetTokenAuthCodeResult,\r\n\tgetTokenImplicit,\r\n\tgetTokenClient,\r\n\tgetTokenPassword,\r\n\tgetTokenRefresh,\r\n} from '@/api/oauthApi';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport * as OpenAPI from '@/assets/js/sdk/openApi';\r\n\r\nimport sha256 from 'sha256';\r\n\r\nconst store = useAuthStore();\r\nconst { SET_LOGIN, SET_OAUTH } = store;\r\n\r\nconst isInputBoxShow = ref(false);\r\nconst getTokenBtnList = ref([\r\n\t{\r\n\t\ttitle: '1.Authorization Code 인증',\r\n\t\tmethods: 'FetchTokenAuthCode',\r\n\t},\r\n\t{\r\n\t\ttitle: '2.Implicit 인증',\r\n\t\tmethods: 'FetchTokenImplicit',\r\n\t},\r\n\t{\r\n\t\ttitle: '3.Client Credentials 인증',\r\n\t\tmethods: 'FetchTokenClient',\r\n\t},\r\n\t{\r\n\t\ttitle: '4.Password Credentials 인증',\r\n\t\tmethods: 'FetchTokenPassword',\r\n\t},\r\n]);\r\nconst refreshTokenBtn = ref({\r\n\ttitle: 'Refresh Token',\r\n\tmethods: 'FetchTokenAuthCode',\r\n});\r\nconst oauthResult = ref(null);\r\nconst isOauthResult = ref(false);\r\nconst oauthType = ref(null);\r\nconst refreshToken = ref(null);\r\nconst clickedMethods = ref(null);\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst fetchMethods = methodsName => {\r\n\trouter.push({ path: '/sdkSample/oauth', replace: true });\r\n\toauthResult.value = null;\r\n\toauthType.value = null;\r\n\tif (methodsName !== getTokenBtnList.value[3].methods) {\r\n\t\tisOauthResult.value = true;\r\n\t}\r\n\tclickedMethods.value = methodsName;\r\n\tswitch (methodsName) {\r\n\t\tcase getTokenBtnList.value[0].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenAuthCode();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[1].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenImplicit();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[2].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenClient();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[3].methods:\r\n\t\t\tisInputBoxShow.value = !isInputBoxShow.value;\r\n\t\t\tif (isInputBoxShow.value) {\r\n\t\t\t\tuserId.value = null;\r\n\t\t\t\tuserPw.value = null;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\n/**\r\n * Authorization Code 인증\r\n */\r\nconst FetchTokenAuthCode = async () => {\r\n\ttry {\r\n\t\tawait getTokenAuthCode();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\n/**\r\n * Implicit 인증\r\n */\r\nconst FetchTokenImplicit = async () => {\r\n\ttry {\r\n\t\tawait getTokenImplicit();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\n/**\r\n * Client Credentials 인증\r\n */\r\nconst FetchTokenClient = async () => {\r\n\ttry {\r\n\t\tconst response = await getTokenClient();\r\n\t\tSET_OAUTH(response);\r\n\t\toauthResult.value = response;\r\n\t\toauthType.value = getTokenBtnList.value[2].title;\r\n\t\t// btnFetchUserInfo();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t} finally {\r\n\t\tisOauthResult.value = false;\r\n\t}\r\n};\r\n\r\n/**\r\n * Password Credentials 인증\r\n */\r\nconst userId = ref(null);\r\nconst userPw = ref(null);\r\nconst FetchTokenPassword = async () => {\r\n\toauthResult.value = null;\r\n\tisOauthResult.value = true;\r\n\tif (!userId.value || !userPw.value) {\r\n\t\talert('정보를 입력하세요');\r\n\t\treturn false;\r\n\t}\r\n\tlet userInfo = {\r\n\t\tuserId: userId.value,\r\n\t\tuserPw: sha256(userPw.value),\r\n\t\t// userPw: '2fa1ecf9826474fe8e18a96441c94a500cd968454eeb05ed056d0918e19cd118',\r\n\t};\r\n\ttry {\r\n\t\tconst response = await getTokenPassword(userInfo);\r\n\t\toauthResult.value = response;\r\n\t\tSET_OAUTH(response);\r\n\t\toauthType.value = getTokenBtnList.value[3].title;\r\n\t\trefreshToken.value = response.refresh_token;\r\n\t\t// btnFetchUserInfo();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t} finally {\r\n\t\tisOauthResult.value = false;\r\n\t}\r\n};\r\n\r\n/**\r\n * refreshToken 발급\r\n */\r\nconst fetchRefreshToken = async () => {\r\n\tconst response = await getTokenRefresh(refreshToken.value);\r\n\tconsole.log('response', response);\r\n\tSET_OAUTH(response);\r\n\toauthResult.value = response;\r\n\trefreshToken.value = null;\r\n\t// btnFetchUserInfo();\r\n};\r\n\r\nlet lhash = ref(location.hash);\r\nlet lsearch = ref(location.search);\r\nconst isCode = ref(route.query.code);\r\nconst tokenResultSet = async () => {\r\n\tif (lhash.value != undefined && lhash.value != '') {\r\n\t\tlet accToken = lhash.value.split('&')[0].split('=')[1];\r\n\t\toauthType.value = getTokenBtnList.value[1].title;\r\n\t\toauthResult.value = accToken;\r\n\t} else if (lsearch.value != undefined && isCode.value) {\r\n\t\tlet lsearchSplit = lsearch.value.split('&');\r\n\t\tlet code = lsearchSplit[0].split('=')[1];\r\n\t\tconst response = await getTokenAuthCodeResult(code);\r\n\t\toauthResult.value = response;\r\n\t\tSET_OAUTH(response);\r\n\t\toauthType.value = getTokenBtnList.value[0].title;\r\n\t\trefreshToken.value = response.refresh_token;\r\n\t\t// btnFetchUserInfo();\r\n\t} else {\r\n\t\treturn;\r\n\t}\r\n};\r\n// const oauth = useAuthStore().oauth;\r\n\r\n// 회원 정보 조회\r\nconst btnFetchUserInfo = async token => {\r\n\tconst configToken = {\r\n\t\tbaseUrl: 'https://api.redwoodhealth.kr',\r\n\t\taccessToken: token,\r\n\t};\r\n\tawait OpenAPI.fetchUserInfo(configToken)\r\n\t\t.then(response => {\r\n\t\t\tconsole.log('response', response);\r\n\t\t\tSET_LOGIN(response);\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.log('error', error);\r\n\t\t});\r\n};\r\n\r\nonMounted(() => {\r\n\ttokenResultSet();\r\n});\r\n\r\nwatch(\r\n\t() => oauthResult.value,\r\n\t() => {\r\n\t\tconsole.log('oauthResult', oauthResult.value);\r\n\t\tif (oauthResult.value) {\r\n\t\t\tbtnFetchUserInfo(oauthResult.value.access_token);\r\n\t\t}\r\n\t},\r\n\t{ deep: true },\r\n);\r\n\r\nonUpdated(() => {\r\n\t// console.log('oauth', oauth);\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","start":1667202977538,"end":1667202977793},{"name":"vite:vue","result":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Oauth Sample\", -1)\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Redwood OAuth Library (4가지 로그인)\", -1)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h4\", null, \"FetchTokenPassword 정보 입력\", -1)\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Token Result\", -1)\nconst _hoisted_5 = {\n  key: 0,\n  class: \"d-flex justify-center mb-6\"\n}\n\nimport { onMounted, ref, watch, onUpdated } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport TheViewLayout from '@/layouts/TheViewLayout.vue';\r\nimport {\r\n\tgetTokenAuthCode,\r\n\tgetTokenAuthCodeResult,\r\n\tgetTokenImplicit,\r\n\tgetTokenClient,\r\n\tgetTokenPassword,\r\n\tgetTokenRefresh,\r\n} from '@/api/oauthApi';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport * as OpenAPI from '@/assets/js/sdk/openApi';\r\n\r\nimport sha256 from 'sha256';\r\n\r\n\nconst _sfc_main = {\n  __name: 'OauthView',\n  setup(__props) {\n\r\nconst store = useAuthStore();\r\nconst { SET_LOGIN, SET_OAUTH } = store;\r\n\r\nconst isInputBoxShow = ref(false);\r\nconst getTokenBtnList = ref([\r\n\t{\r\n\t\ttitle: '1.Authorization Code 인증',\r\n\t\tmethods: 'FetchTokenAuthCode',\r\n\t},\r\n\t{\r\n\t\ttitle: '2.Implicit 인증',\r\n\t\tmethods: 'FetchTokenImplicit',\r\n\t},\r\n\t{\r\n\t\ttitle: '3.Client Credentials 인증',\r\n\t\tmethods: 'FetchTokenClient',\r\n\t},\r\n\t{\r\n\t\ttitle: '4.Password Credentials 인증',\r\n\t\tmethods: 'FetchTokenPassword',\r\n\t},\r\n]);\r\nconst refreshTokenBtn = ref({\r\n\ttitle: 'Refresh Token',\r\n\tmethods: 'FetchTokenAuthCode',\r\n});\r\nconst oauthResult = ref(null);\r\nconst isOauthResult = ref(false);\r\nconst oauthType = ref(null);\r\nconst refreshToken = ref(null);\r\nconst clickedMethods = ref(null);\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst fetchMethods = methodsName => {\r\n\trouter.push({ path: '/sdkSample/oauth', replace: true });\r\n\toauthResult.value = null;\r\n\toauthType.value = null;\r\n\tif (methodsName !== getTokenBtnList.value[3].methods) {\r\n\t\tisOauthResult.value = true;\r\n\t}\r\n\tclickedMethods.value = methodsName;\r\n\tswitch (methodsName) {\r\n\t\tcase getTokenBtnList.value[0].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenAuthCode();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[1].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenImplicit();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[2].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenClient();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[3].methods:\r\n\t\t\tisInputBoxShow.value = !isInputBoxShow.value;\r\n\t\t\tif (isInputBoxShow.value) {\r\n\t\t\t\tuserId.value = null;\r\n\t\t\t\tuserPw.value = null;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\n/**\r\n * Authorization Code 인증\r\n */\r\nconst FetchTokenAuthCode = async () => {\r\n\ttry {\r\n\t\tawait getTokenAuthCode();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\n/**\r\n * Implicit 인증\r\n */\r\nconst FetchTokenImplicit = async () => {\r\n\ttry {\r\n\t\tawait getTokenImplicit();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\n/**\r\n * Client Credentials 인증\r\n */\r\nconst FetchTokenClient = async () => {\r\n\ttry {\r\n\t\tconst response = await getTokenClient();\r\n\t\tSET_OAUTH(response);\r\n\t\toauthResult.value = response;\r\n\t\toauthType.value = getTokenBtnList.value[2].title;\r\n\t\t// btnFetchUserInfo();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t} finally {\r\n\t\tisOauthResult.value = false;\r\n\t}\r\n};\r\n\r\n/**\r\n * Password Credentials 인증\r\n */\r\nconst userId = ref(null);\r\nconst userPw = ref(null);\r\nconst FetchTokenPassword = async () => {\r\n\toauthResult.value = null;\r\n\tisOauthResult.value = true;\r\n\tif (!userId.value || !userPw.value) {\r\n\t\talert('정보를 입력하세요');\r\n\t\treturn false;\r\n\t}\r\n\tlet userInfo = {\r\n\t\tuserId: userId.value,\r\n\t\tuserPw: sha256(userPw.value),\r\n\t\t// userPw: '2fa1ecf9826474fe8e18a96441c94a500cd968454eeb05ed056d0918e19cd118',\r\n\t};\r\n\ttry {\r\n\t\tconst response = await getTokenPassword(userInfo);\r\n\t\toauthResult.value = response;\r\n\t\tSET_OAUTH(response);\r\n\t\toauthType.value = getTokenBtnList.value[3].title;\r\n\t\trefreshToken.value = response.refresh_token;\r\n\t\t// btnFetchUserInfo();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t} finally {\r\n\t\tisOauthResult.value = false;\r\n\t}\r\n};\r\n\r\n/**\r\n * refreshToken 발급\r\n */\r\nconst fetchRefreshToken = async () => {\r\n\tconst response = await getTokenRefresh(refreshToken.value);\r\n\tconsole.log('response', response);\r\n\tSET_OAUTH(response);\r\n\toauthResult.value = response;\r\n\trefreshToken.value = null;\r\n\t// btnFetchUserInfo();\r\n};\r\n\r\nlet lhash = ref(location.hash);\r\nlet lsearch = ref(location.search);\r\nconst isCode = ref(route.query.code);\r\nconst tokenResultSet = async () => {\r\n\tif (lhash.value != undefined && lhash.value != '') {\r\n\t\tlet accToken = lhash.value.split('&')[0].split('=')[1];\r\n\t\toauthType.value = getTokenBtnList.value[1].title;\r\n\t\toauthResult.value = accToken;\r\n\t} else if (lsearch.value != undefined && isCode.value) {\r\n\t\tlet lsearchSplit = lsearch.value.split('&');\r\n\t\tlet code = lsearchSplit[0].split('=')[1];\r\n\t\tconst response = await getTokenAuthCodeResult(code);\r\n\t\toauthResult.value = response;\r\n\t\tSET_OAUTH(response);\r\n\t\toauthType.value = getTokenBtnList.value[0].title;\r\n\t\trefreshToken.value = response.refresh_token;\r\n\t\t// btnFetchUserInfo();\r\n\t} else {\r\n\t\treturn;\r\n\t}\r\n};\r\n// const oauth = useAuthStore().oauth;\r\n\r\n// 회원 정보 조회\r\nconst btnFetchUserInfo = async token => {\r\n\tconst configToken = {\r\n\t\tbaseUrl: 'https://api.redwoodhealth.kr',\r\n\t\taccessToken: token,\r\n\t};\r\n\tawait OpenAPI.fetchUserInfo(configToken)\r\n\t\t.then(response => {\r\n\t\t\tconsole.log('response', response);\r\n\t\t\tSET_LOGIN(response);\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.log('error', error);\r\n\t\t});\r\n};\r\n\r\nonMounted(() => {\r\n\ttokenResultSet();\r\n});\r\n\r\nwatch(\r\n\t() => oauthResult.value,\r\n\t() => {\r\n\t\tconsole.log('oauthResult', oauthResult.value);\r\n\t\tif (oauthResult.value) {\r\n\t\t\tbtnFetchUserInfo(oauthResult.value.access_token);\r\n\t\t}\r\n\t},\r\n\t{ deep: true },\r\n);\r\n\r\nonUpdated(() => {\r\n\t// console.log('oauth', oauth);\r\n});\r\n\nreturn (_ctx, _cache) => {\n  const _component_v_container = _resolveComponent(\"v-container\")\n  const _component_v_btn = _resolveComponent(\"v-btn\")\n  const _component_v_col = _resolveComponent(\"v-col\")\n  const _component_v_row = _resolveComponent(\"v-row\")\n  const _component_v_text_field = _resolveComponent(\"v-text-field\")\n  const _component_v_form = _resolveComponent(\"v-form\")\n  const _component_v_card = _resolveComponent(\"v-card\")\n  const _component_v_tooltip = _resolveComponent(\"v-tooltip\")\n  const _component_v_card_subtitle = _resolveComponent(\"v-card-subtitle\")\n  const _component_v_card_item = _resolveComponent(\"v-card-item\")\n  const _component_v_progress_circular = _resolveComponent(\"v-progress-circular\")\n  const _component_v_card_text = _resolveComponent(\"v-card-text\")\n\n  return (_openBlock(), _createBlock(TheViewLayout, null, {\n    mainPanel: _withCtx(() => [\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          _hoisted_1\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          _hoisted_2\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_v_row, null, {\n            default: _withCtx(() => [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(getTokenBtnList.value, (item) => {\n                return (_openBlock(), _createBlock(_component_v_col, {\n                  key: item,\n                  cols: \"12\",\n                  md: \"6\",\n                  \"max-width\": \"250\"\n                }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_v_btn, {\n                      width: \"100%\",\n                      onClick: $event => (fetchMethods(item.methods))\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(_toDisplayString(item.title), 1)\n                      ]),\n                      _: 2\n                    }, 1032, [\"onClick\"])\n                  ]),\n                  _: 2\n                }, 1024))\n              }), 128))\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      (isInputBoxShow.value)\n        ? (_openBlock(), _createBlock(_component_v_container, { key: 0 }, {\n            default: _withCtx(() => [\n              _hoisted_3,\n              _createVNode(_component_v_card, { class: \"ma-2 pa-4\" }, {\n                default: _withCtx(() => [\n                  _createVNode(_component_v_form, {\n                    class: \"justify-center mb-6\",\n                    ref: \"form\"\n                  }, {\n                    default: _withCtx(() => [\n                      _createVNode(_component_v_text_field, {\n                        modelValue: userId.value,\n                        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => ((userId).value = $event)),\n                        counter: 10,\n                        label: \"UserId\",\n                        required: \"\"\n                      }, null, 8, [\"modelValue\"]),\n                      _createVNode(_component_v_text_field, {\n                        modelValue: userPw.value,\n                        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => ((userPw).value = $event)),\n                        label: \"Password\",\n                        required: \"\"\n                      }, null, 8, [\"modelValue\"]),\n                      _createVNode(_component_v_btn, {\n                        color: \"warning\",\n                        onClick: _cache[2] || (_cache[2] = $event => (FetchTokenPassword()))\n                      }, {\n                        default: _withCtx(() => [\n                          _createTextVNode(\" 제출 \")\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _: 1\n                  }, 512)\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          }))\n        : _createCommentVNode(\"\", true),\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          _hoisted_4\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          (\r\n\t\t\t\t\t\toauthType.value === getTokenBtnList.value[0].title ||\r\n\t\t\t\t\t\toauthType.value === getTokenBtnList.value[3].title\r\n\t\t\t\t\t)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [\n                _createVNode(_component_v_card_subtitle, { class: \"d-flex align-center\" }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"토큰 재발급 \"),\n                    _createVNode(_component_v_tooltip, {\n                      activator: \"parent\",\n                      location: \"bottom\"\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(\"Authorization Code인증, Password Credentails 인증 방식에만 Refresh Token 발급됨\")\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_v_btn, {\n                  class: \"d-flex align-center\",\n                  style: {\"width\":\"250px\"},\n                  onClick: _cache[3] || (_cache[3] = $event => (fetchRefreshToken()))\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(_toDisplayString(refreshTokenBtn.value.title), 1)\n                  ]),\n                  _: 1\n                })\n              ]))\n            : _createCommentVNode(\"\", true),\n          _createVNode(_component_v_card, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_v_card_item, null, {\n                default: _withCtx(() => [\n                  _createVNode(_component_v_card_subtitle, null, {\n                    default: _withCtx(() => [\n                      _createTextVNode(\"인증타입 : \" + _toDisplayString(oauthType.value), 1)\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              }),\n              _createVNode(_component_v_card_text, { style: `min-height:200px;` }, {\n                default: _withCtx(() => [\n                  (isOauthResult.value)\n                    ? (_openBlock(), _createBlock(_component_v_progress_circular, {\n                        key: 0,\n                        indeterminate: \"\",\n                        color: \"red\",\n                        style: {\"margin-left\":\"50%\",\"margin-top\":\"50px\"}\n                      }))\n                    : (_openBlock(), _createElementBlock(_Fragment, { key: 1 }, [\n                        _createTextVNode(_toDisplayString(oauthResult.value), 1)\n                      ], 64))\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}\n}\n\n}\n\n\n\nexport default _sfc_main","start":1667202977794,"end":1667202977843,"order":"normal"},{"name":"vuetify:import","result":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Oauth Sample\", -1)\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Redwood OAuth Library (4가지 로그인)\", -1)\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h4\", null, \"FetchTokenPassword 정보 입력\", -1)\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Token Result\", -1)\nconst _hoisted_5 = {\n  key: 0,\n  class: \"d-flex justify-center mb-6\"\n}\n\nimport { onMounted, ref, watch, onUpdated } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport TheViewLayout from '@/layouts/TheViewLayout.vue';\r\nimport {\r\n\tgetTokenAuthCode,\r\n\tgetTokenAuthCodeResult,\r\n\tgetTokenImplicit,\r\n\tgetTokenClient,\r\n\tgetTokenPassword,\r\n\tgetTokenRefresh,\r\n} from '@/api/oauthApi';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport * as OpenAPI from '@/assets/js/sdk/openApi';\r\n\r\nimport sha256 from 'sha256';\r\n\r\n\nconst _sfc_main = {\n  __name: 'OauthView',\n  setup(__props) {\n\r\nconst store = useAuthStore();\r\nconst { SET_LOGIN, SET_OAUTH } = store;\r\n\r\nconst isInputBoxShow = ref(false);\r\nconst getTokenBtnList = ref([\r\n\t{\r\n\t\ttitle: '1.Authorization Code 인증',\r\n\t\tmethods: 'FetchTokenAuthCode',\r\n\t},\r\n\t{\r\n\t\ttitle: '2.Implicit 인증',\r\n\t\tmethods: 'FetchTokenImplicit',\r\n\t},\r\n\t{\r\n\t\ttitle: '3.Client Credentials 인증',\r\n\t\tmethods: 'FetchTokenClient',\r\n\t},\r\n\t{\r\n\t\ttitle: '4.Password Credentials 인증',\r\n\t\tmethods: 'FetchTokenPassword',\r\n\t},\r\n]);\r\nconst refreshTokenBtn = ref({\r\n\ttitle: 'Refresh Token',\r\n\tmethods: 'FetchTokenAuthCode',\r\n});\r\nconst oauthResult = ref(null);\r\nconst isOauthResult = ref(false);\r\nconst oauthType = ref(null);\r\nconst refreshToken = ref(null);\r\nconst clickedMethods = ref(null);\r\nconst router = useRouter();\r\nconst route = useRoute();\r\nconst fetchMethods = methodsName => {\r\n\trouter.push({ path: '/sdkSample/oauth', replace: true });\r\n\toauthResult.value = null;\r\n\toauthType.value = null;\r\n\tif (methodsName !== getTokenBtnList.value[3].methods) {\r\n\t\tisOauthResult.value = true;\r\n\t}\r\n\tclickedMethods.value = methodsName;\r\n\tswitch (methodsName) {\r\n\t\tcase getTokenBtnList.value[0].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenAuthCode();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[1].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenImplicit();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[2].methods:\r\n\t\t\tisInputBoxShow.value = false;\r\n\t\t\tFetchTokenClient();\r\n\t\t\tbreak;\r\n\t\tcase getTokenBtnList.value[3].methods:\r\n\t\t\tisInputBoxShow.value = !isInputBoxShow.value;\r\n\t\t\tif (isInputBoxShow.value) {\r\n\t\t\t\tuserId.value = null;\r\n\t\t\t\tuserPw.value = null;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\n/**\r\n * Authorization Code 인증\r\n */\r\nconst FetchTokenAuthCode = async () => {\r\n\ttry {\r\n\t\tawait getTokenAuthCode();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\n/**\r\n * Implicit 인증\r\n */\r\nconst FetchTokenImplicit = async () => {\r\n\ttry {\r\n\t\tawait getTokenImplicit();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\n/**\r\n * Client Credentials 인증\r\n */\r\nconst FetchTokenClient = async () => {\r\n\ttry {\r\n\t\tconst response = await getTokenClient();\r\n\t\tSET_OAUTH(response);\r\n\t\toauthResult.value = response;\r\n\t\toauthType.value = getTokenBtnList.value[2].title;\r\n\t\t// btnFetchUserInfo();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t} finally {\r\n\t\tisOauthResult.value = false;\r\n\t}\r\n};\r\n\r\n/**\r\n * Password Credentials 인증\r\n */\r\nconst userId = ref(null);\r\nconst userPw = ref(null);\r\nconst FetchTokenPassword = async () => {\r\n\toauthResult.value = null;\r\n\tisOauthResult.value = true;\r\n\tif (!userId.value || !userPw.value) {\r\n\t\talert('정보를 입력하세요');\r\n\t\treturn false;\r\n\t}\r\n\tlet userInfo = {\r\n\t\tuserId: userId.value,\r\n\t\tuserPw: sha256(userPw.value),\r\n\t\t// userPw: '2fa1ecf9826474fe8e18a96441c94a500cd968454eeb05ed056d0918e19cd118',\r\n\t};\r\n\ttry {\r\n\t\tconst response = await getTokenPassword(userInfo);\r\n\t\toauthResult.value = response;\r\n\t\tSET_OAUTH(response);\r\n\t\toauthType.value = getTokenBtnList.value[3].title;\r\n\t\trefreshToken.value = response.refresh_token;\r\n\t\t// btnFetchUserInfo();\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t} finally {\r\n\t\tisOauthResult.value = false;\r\n\t}\r\n};\r\n\r\n/**\r\n * refreshToken 발급\r\n */\r\nconst fetchRefreshToken = async () => {\r\n\tconst response = await getTokenRefresh(refreshToken.value);\r\n\tconsole.log('response', response);\r\n\tSET_OAUTH(response);\r\n\toauthResult.value = response;\r\n\trefreshToken.value = null;\r\n\t// btnFetchUserInfo();\r\n};\r\n\r\nlet lhash = ref(location.hash);\r\nlet lsearch = ref(location.search);\r\nconst isCode = ref(route.query.code);\r\nconst tokenResultSet = async () => {\r\n\tif (lhash.value != undefined && lhash.value != '') {\r\n\t\tlet accToken = lhash.value.split('&')[0].split('=')[1];\r\n\t\toauthType.value = getTokenBtnList.value[1].title;\r\n\t\toauthResult.value = accToken;\r\n\t} else if (lsearch.value != undefined && isCode.value) {\r\n\t\tlet lsearchSplit = lsearch.value.split('&');\r\n\t\tlet code = lsearchSplit[0].split('=')[1];\r\n\t\tconst response = await getTokenAuthCodeResult(code);\r\n\t\toauthResult.value = response;\r\n\t\tSET_OAUTH(response);\r\n\t\toauthType.value = getTokenBtnList.value[0].title;\r\n\t\trefreshToken.value = response.refresh_token;\r\n\t\t// btnFetchUserInfo();\r\n\t} else {\r\n\t\treturn;\r\n\t}\r\n};\r\n// const oauth = useAuthStore().oauth;\r\n\r\n// 회원 정보 조회\r\nconst btnFetchUserInfo = async token => {\r\n\tconst configToken = {\r\n\t\tbaseUrl: 'https://api.redwoodhealth.kr',\r\n\t\taccessToken: token,\r\n\t};\r\n\tawait OpenAPI.fetchUserInfo(configToken)\r\n\t\t.then(response => {\r\n\t\t\tconsole.log('response', response);\r\n\t\t\tSET_LOGIN(response);\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.log('error', error);\r\n\t\t});\r\n};\r\n\r\nonMounted(() => {\r\n\ttokenResultSet();\r\n});\r\n\r\nwatch(\r\n\t() => oauthResult.value,\r\n\t() => {\r\n\t\tconsole.log('oauthResult', oauthResult.value);\r\n\t\tif (oauthResult.value) {\r\n\t\t\tbtnFetchUserInfo(oauthResult.value.access_token);\r\n\t\t}\r\n\t},\r\n\t{ deep: true },\r\n);\r\n\r\nonUpdated(() => {\r\n\t// console.log('oauth', oauth);\r\n});\r\n\nreturn (_ctx, _cache) => {\n                                                                 \n                                                     \n                                                     \n                                                     \n                                                                   \n                                                       \n                                                       \n                                                             \n                                                                         \n                                                                 \n                                                                                 \n                                                                 \n\n  return (_openBlock(), _createBlock(TheViewLayout, null, {\n    mainPanel: _withCtx(() => [\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          _hoisted_1\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          _hoisted_2\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_v_row, null, {\n            default: _withCtx(() => [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(getTokenBtnList.value, (item) => {\n                return (_openBlock(), _createBlock(_component_v_col, {\n                  key: item,\n                  cols: \"12\",\n                  md: \"6\",\n                  \"max-width\": \"250\"\n                }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_v_btn, {\n                      width: \"100%\",\n                      onClick: $event => (fetchMethods(item.methods))\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(_toDisplayString(item.title), 1)\n                      ]),\n                      _: 2\n                    }, 1032, [\"onClick\"])\n                  ]),\n                  _: 2\n                }, 1024))\n              }), 128))\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      (isInputBoxShow.value)\n        ? (_openBlock(), _createBlock(_component_v_container, { key: 0 }, {\n            default: _withCtx(() => [\n              _hoisted_3,\n              _createVNode(_component_v_card, { class: \"ma-2 pa-4\" }, {\n                default: _withCtx(() => [\n                  _createVNode(_component_v_form, {\n                    class: \"justify-center mb-6\",\n                    ref: \"form\"\n                  }, {\n                    default: _withCtx(() => [\n                      _createVNode(_component_v_text_field, {\n                        modelValue: userId.value,\n                        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => ((userId).value = $event)),\n                        counter: 10,\n                        label: \"UserId\",\n                        required: \"\"\n                      }, null, 8, [\"modelValue\"]),\n                      _createVNode(_component_v_text_field, {\n                        modelValue: userPw.value,\n                        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => ((userPw).value = $event)),\n                        label: \"Password\",\n                        required: \"\"\n                      }, null, 8, [\"modelValue\"]),\n                      _createVNode(_component_v_btn, {\n                        color: \"warning\",\n                        onClick: _cache[2] || (_cache[2] = $event => (FetchTokenPassword()))\n                      }, {\n                        default: _withCtx(() => [\n                          _createTextVNode(\" 제출 \")\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _: 1\n                  }, 512)\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          }))\n        : _createCommentVNode(\"\", true),\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          _hoisted_4\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_v_container, null, {\n        default: _withCtx(() => [\n          (\r\n\t\t\t\t\t\toauthType.value === getTokenBtnList.value[0].title ||\r\n\t\t\t\t\t\toauthType.value === getTokenBtnList.value[3].title\r\n\t\t\t\t\t)\n            ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [\n                _createVNode(_component_v_card_subtitle, { class: \"d-flex align-center\" }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"토큰 재발급 \"),\n                    _createVNode(_component_v_tooltip, {\n                      activator: \"parent\",\n                      location: \"bottom\"\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(\"Authorization Code인증, Password Credentails 인증 방식에만 Refresh Token 발급됨\")\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_v_btn, {\n                  class: \"d-flex align-center\",\n                  style: {\"width\":\"250px\"},\n                  onClick: _cache[3] || (_cache[3] = $event => (fetchRefreshToken()))\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(_toDisplayString(refreshTokenBtn.value.title), 1)\n                  ]),\n                  _: 1\n                })\n              ]))\n            : _createCommentVNode(\"\", true),\n          _createVNode(_component_v_card, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_v_card_item, null, {\n                default: _withCtx(() => [\n                  _createVNode(_component_v_card_subtitle, null, {\n                    default: _withCtx(() => [\n                      _createTextVNode(\"인증타입 : \" + _toDisplayString(oauthType.value), 1)\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              }),\n              _createVNode(_component_v_card_text, { style: `min-height:200px;` }, {\n                default: _withCtx(() => [\n                  (isOauthResult.value)\n                    ? (_openBlock(), _createBlock(_component_v_progress_circular, {\n                        key: 0,\n                        indeterminate: \"\",\n                        color: \"red\",\n                        style: {\"margin-left\":\"50%\",\"margin-top\":\"50px\"}\n                      }))\n                    : (_openBlock(), _createElementBlock(_Fragment, { key: 1 }, [\n                        _createTextVNode(_toDisplayString(oauthResult.value), 1)\n                      ], 64))\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}\n}\n\n}\n\n\n\nexport default _sfc_main\n\n/* Vuetify */\nimport { VBtn as _component_v_btn } from \"vuetify/lib/components/VBtn/index.mjs\"\nimport { VCard as _component_v_card, VCardSubtitle as _component_v_card_subtitle, VCardItem as _component_v_card_item, VCardText as _component_v_card_text } from \"vuetify/lib/components/VCard/index.mjs\"\nimport { VForm as _component_v_form } from \"vuetify/lib/components/VForm/index.mjs\"\nimport { VContainer as _component_v_container, VCol as _component_v_col, VRow as _component_v_row } from \"vuetify/lib/components/VGrid/index.mjs\"\nimport { VProgressCircular as _component_v_progress_circular } from \"vuetify/lib/components/VProgressCircular/index.mjs\"\nimport { VTextField as _component_v_text_field } from \"vuetify/lib/components/VTextField/index.mjs\"\nimport { VTooltip as _component_v_tooltip } from \"vuetify/lib/components/VTooltip/index.mjs\"\n\n","start":1667202977843,"end":1667202977844,"order":"normal"}]}
