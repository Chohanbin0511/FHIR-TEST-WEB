{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/vuetify/lib/components/VList/VListChildren.mjs","transforms":[{"name":"vite:load-fallback","result":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VDivider } from \"../VDivider/index.mjs\";\nimport { filterListGroupProps, VListGroup } from \"./VListGroup.mjs\";\nimport { VListItem } from \"./VListItem.mjs\";\nimport { VListSubheader } from \"./VListSubheader.mjs\"; // Utilities\n\nimport { createList } from \"./list.mjs\";\nimport { genericComponent } from \"../../util/index.mjs\"; // Types\n\nexport const VListChildren = genericComponent()({\n  name: 'VListChildren',\n  props: {\n    items: Array\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    createList();\n    return () => {\n      var _slots$default, _props$items;\n\n      return ((_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)) ?? ((_props$items = props.items) == null ? void 0 : _props$items.map(_ref2 => {\n        let {\n          children,\n          props: itemProps,\n          type,\n          raw: item\n        } = _ref2;\n\n        if (type === 'divider') {\n          var _slots$divider;\n\n          return ((_slots$divider = slots.divider) == null ? void 0 : _slots$divider.call(slots, {\n            props: itemProps\n          })) ?? _createVNode(VDivider, itemProps, null);\n        }\n\n        if (type === 'subheader') {\n          var _slots$subheader;\n\n          return ((_slots$subheader = slots.subheader) == null ? void 0 : _slots$subheader.call(slots, {\n            props: itemProps\n          })) ?? _createVNode(VListSubheader, itemProps, {\n            default: slots.subheader\n          });\n        }\n\n        const slotsWithItem = {\n          subtitle: slots.subtitle ? slotProps => {\n            var _slots$subtitle;\n\n            return (_slots$subtitle = slots.subtitle) == null ? void 0 : _slots$subtitle.call(slots, { ...slotProps,\n              item\n            });\n          } : undefined,\n          prepend: slots.prepend ? slotProps => {\n            var _slots$prepend;\n\n            return (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, { ...slotProps,\n              item\n            });\n          } : undefined,\n          append: slots.append ? slotProps => {\n            var _slots$append;\n\n            return (_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, { ...slotProps,\n              item\n            });\n          } : undefined,\n          default: slots.default ? slotProps => {\n            var _slots$default2;\n\n            return (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots, { ...slotProps,\n              item\n            });\n          } : undefined,\n          title: slots.title ? slotProps => {\n            var _slots$title;\n\n            return (_slots$title = slots.title) == null ? void 0 : _slots$title.call(slots, { ...slotProps,\n              item\n            });\n          } : undefined\n        };\n        const [listGroupProps, _1] = filterListGroupProps(itemProps);\n        return children ? _createVNode(VListGroup, _mergeProps({\n          \"value\": itemProps == null ? void 0 : itemProps.value\n        }, listGroupProps), {\n          activator: _ref3 => {\n            let {\n              props: activatorProps\n            } = _ref3;\n            return slots.header ? slots.header({ ...itemProps,\n              ...activatorProps\n            }) : _createVNode(VListItem, _mergeProps(itemProps, activatorProps), slotsWithItem);\n          },\n          default: () => _createVNode(VListChildren, {\n            \"items\": children\n          }, slots)\n        }) : slots.item ? slots.item(itemProps) : _createVNode(VListItem, itemProps, slotsWithItem);\n      }));\n    };\n  }\n\n});\n//# sourceMappingURL=VListChildren.mjs.map","start":1667202981585,"end":1667202981649}]}
