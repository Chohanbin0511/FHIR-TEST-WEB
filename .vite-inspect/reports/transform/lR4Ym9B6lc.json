{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/ajv.js","transforms":[{"name":"vite:load-fallback","result":"'use strict';\n\nvar compileSchema = require('./compile')\n  , resolve = require('./compile/resolve')\n  , Cache = require('./cache')\n  , SchemaObject = require('./compile/schema_obj')\n  , stableStringify = require('fast-json-stable-stringify')\n  , formats = require('./compile/formats')\n  , rules = require('./compile/rules')\n  , $dataMetaSchema = require('./data')\n  , util = require('./compile/util');\n\nmodule.exports = Ajv;\n\nAjv.prototype.validate = validate;\nAjv.prototype.compile = compile;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\n\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\n\nAjv.prototype.compileAsync = require('./compile/async');\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\nAjv.prototype.validateKeyword = customKeyword.validate;\n\nvar errorClasses = require('./compile/error_classes');\nAjv.ValidationError = errorClasses.Validation;\nAjv.MissingRefError = errorClasses.MissingRef;\nAjv.$dataMetaSchema = $dataMetaSchema;\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\n\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];\nvar META_SUPPORT_DATA = ['/properties'];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n\n  this._cache = opts.cache || new Cache;\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n\n  if (opts.formats) addInitialFormats(this);\n  if (opts.keywords) addInitialKeywords(this);\n  addDefaultMetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});\n  addInitialSchemas(this);\n}\n\n\n\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\nfunction validate(schemaKeyRef, data) {\n  var v;\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n\n  var valid = v(data);\n  if (v.$async !== true) this.errors = v.errors;\n  return valid;\n}\n\n\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\nfunction compile(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n  return schemaObj.validate || this._compile(schemaObj);\n}\n\n\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)){\n    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    return this;\n  }\n  var id = this._getId(schema);\n  if (id !== undefined && typeof id != 'string')\n    throw new Error('schema id must be string');\n  key = resolve.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n\n\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n\n\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string')\n    throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n  var valid = this.validate($schema, schema);\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);\n    else throw new Error(message);\n  }\n  return valid;\n}\n\n\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object'\n                            ? self._getId(meta) || meta\n                            : self.getSchema(META_SCHEMA_ID)\n                              ? META_SCHEMA_ID\n                              : undefined;\n  return self._opts.defaultMeta;\n}\n\n\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n  switch (typeof schemaObj) {\n    case 'object': return schemaObj.validate || this._compile(schemaObj);\n    case 'string': return this.getSchema(schemaObj);\n    case 'undefined': return _getSchemaFragment(this, keyRef);\n  }\n}\n\n\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve.schema.call(self, { schema: {} }, ref);\n  if (res) {\n    var schema = res.schema\n      , root = res.root\n      , baseId = res.baseId;\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new SchemaObject({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\n\n\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n\n\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n    return this;\n  }\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n      _removeAllSchemas(this, this._refs);\n      this._cache.clear();\n      return this;\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n      this._cache.del(cacheKey);\n      var id = this._getId(schemaKeyRef);\n      if (id) {\n        id = resolve.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n  }\n  return this;\n}\n\n\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n      delete schemas[keyRef];\n    }\n  }\n}\n\n\n/* @this   Ajv */\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean')\n    throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n  var cached = this._cache.get(cacheKey);\n  if (cached) return cached;\n\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n\n  var id = resolve.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\n    this.validateSchema(schema, true);\n\n  var localRefs = resolve.ids.call(this, schema);\n\n  var schemaObj = new SchemaObject({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n  this._cache.put(cacheKey, schemaObj);\n\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n\n  return schemaObj;\n}\n\n\n/* @this   Ajv */\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true)\n      callValidate.$async = true;\n    return callValidate;\n  }\n  schemaObj.compiling = true;\n\n  var currentOpts;\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n\n  var v;\n  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }\n  catch(e) {\n    delete schemaObj.validate;\n    throw e;\n  }\n  finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n\n\n  /* @this   {*} - custom context, see passContext option */\n  function callValidate() {\n    /* jshint validthis: true */\n    var _validate = schemaObj.validate;\n    var result = _validate.apply(this, arguments);\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\n\n\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case 'auto': return _get$IdOrId;\n    case 'id': return _getId;\n    default: return _get$Id;\n  }\n}\n\n/* @this   Ajv */\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n\n/* @this   Ajv */\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\n\n\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id)\n    throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n\n\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n  var text = '';\n  for (var i=0; i<errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n  return text.slice(0, -separator.length);\n}\n\n\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\n\n\nfunction addDefaultMetaSchema(self) {\n  var $dataSchema;\n  if (self._opts.$data) {\n    $dataSchema = require('./refs/data.json');\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n  if (self._opts.meta === false) return;\n  var metaSchema = require('./refs/json-schema-draft-07.json');\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\n\n\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);\n  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n}\n\n\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\n\n\nfunction addInitialKeywords(self) {\n  for (var name in self._opts.keywords) {\n    var keyword = self._opts.keywords[name];\n    self.addKeyword(name, keyword);\n  }\n}\n\n\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id])\n    throw new Error('schema with key or id \"' + id + '\" already exists');\n}\n\n\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n    delete metaOpts[META_IGNORE_OPTIONS[i]];\n  return metaOpts;\n}\n\n\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n  if (logger === false) {\n    self.logger = {log: noop, warn: noop, error: noop};\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))\n      throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\n\n\nfunction noop() {}\n","start":1667202705551,"end":1667202705757},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/resolve.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/cache.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/schema_obj.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fast-json-stable-stringify/index.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/formats.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/rules.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/data.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/util.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/async.js?commonjs-wrapped\";\nimport { __require as require$$10 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/keyword.js?commonjs-wrapped\";\nimport { __require as require$$11 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/error_classes.js?commonjs-wrapped\";\nimport require$$12 from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/refs/data.json?commonjs-proxy\";\nimport require$$13 from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/refs/json-schema-draft-07.json?commonjs-proxy\";\n\nvar ajv;\nvar hasRequiredAjv;\n\nfunction requireAjv () {\n\tif (hasRequiredAjv) return ajv;\n\thasRequiredAjv = 1;\n\t'use strict';\n\n\tvar compileSchema = require$$0()\n\t  , resolve = require$$1()\n\t  , Cache = require$$2()\n\t  , SchemaObject = require$$3()\n\t  , stableStringify = require$$4()\n\t  , formats = require$$5()\n\t  , rules = require$$6()\n\t  , $dataMetaSchema = require$$7()\n\t  , util = require$$8();\n\n\tajv = Ajv;\n\n\tAjv.prototype.validate = validate;\n\tAjv.prototype.compile = compile;\n\tAjv.prototype.addSchema = addSchema;\n\tAjv.prototype.addMetaSchema = addMetaSchema;\n\tAjv.prototype.validateSchema = validateSchema;\n\tAjv.prototype.getSchema = getSchema;\n\tAjv.prototype.removeSchema = removeSchema;\n\tAjv.prototype.addFormat = addFormat;\n\tAjv.prototype.errorsText = errorsText;\n\n\tAjv.prototype._addSchema = _addSchema;\n\tAjv.prototype._compile = _compile;\n\n\tAjv.prototype.compileAsync = require$$9();\n\tvar customKeyword = require$$10();\n\tAjv.prototype.addKeyword = customKeyword.add;\n\tAjv.prototype.getKeyword = customKeyword.get;\n\tAjv.prototype.removeKeyword = customKeyword.remove;\n\tAjv.prototype.validateKeyword = customKeyword.validate;\n\n\tvar errorClasses = require$$11();\n\tAjv.ValidationError = errorClasses.Validation;\n\tAjv.MissingRefError = errorClasses.MissingRef;\n\tAjv.$dataMetaSchema = $dataMetaSchema;\n\n\tvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\n\n\tvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];\n\tvar META_SUPPORT_DATA = ['/properties'];\n\n\t/**\n\t * Creates validator instance.\n\t * Usage: `Ajv(opts)`\n\t * @param {Object} opts optional options\n\t * @return {Object} ajv instance\n\t */\n\tfunction Ajv(opts) {\n\t  if (!(this instanceof Ajv)) return new Ajv(opts);\n\t  opts = this._opts = util.copy(opts) || {};\n\t  setLogger(this);\n\t  this._schemas = {};\n\t  this._refs = {};\n\t  this._fragments = {};\n\t  this._formats = formats(opts.format);\n\n\t  this._cache = opts.cache || new Cache;\n\t  this._loadingSchemas = {};\n\t  this._compilations = [];\n\t  this.RULES = rules();\n\t  this._getId = chooseGetId(opts);\n\n\t  opts.loopRequired = opts.loopRequired || Infinity;\n\t  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n\t  if (opts.serialize === undefined) opts.serialize = stableStringify;\n\t  this._metaOpts = getMetaSchemaOptions(this);\n\n\t  if (opts.formats) addInitialFormats(this);\n\t  if (opts.keywords) addInitialKeywords(this);\n\t  addDefaultMetaSchema(this);\n\t  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n\t  if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});\n\t  addInitialSchemas(this);\n\t}\n\n\n\n\t/**\n\t * Validate data using schema\n\t * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n\t * @this   Ajv\n\t * @param  {String|Object} schemaKeyRef key, ref or schema object\n\t * @param  {Any} data to be validated\n\t * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n\t */\n\tfunction validate(schemaKeyRef, data) {\n\t  var v;\n\t  if (typeof schemaKeyRef == 'string') {\n\t    v = this.getSchema(schemaKeyRef);\n\t    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n\t  } else {\n\t    var schemaObj = this._addSchema(schemaKeyRef);\n\t    v = schemaObj.validate || this._compile(schemaObj);\n\t  }\n\n\t  var valid = v(data);\n\t  if (v.$async !== true) this.errors = v.errors;\n\t  return valid;\n\t}\n\n\n\t/**\n\t * Create validating function for passed schema.\n\t * @this   Ajv\n\t * @param  {Object} schema schema object\n\t * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n\t * @return {Function} validating function\n\t */\n\tfunction compile(schema, _meta) {\n\t  var schemaObj = this._addSchema(schema, undefined, _meta);\n\t  return schemaObj.validate || this._compile(schemaObj);\n\t}\n\n\n\t/**\n\t * Adds schema to the instance.\n\t * @this   Ajv\n\t * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n\t * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n\t * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n\t * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n\t * @return {Ajv} this for method chaining\n\t */\n\tfunction addSchema(schema, key, _skipValidation, _meta) {\n\t  if (Array.isArray(schema)){\n\t    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n\t    return this;\n\t  }\n\t  var id = this._getId(schema);\n\t  if (id !== undefined && typeof id != 'string')\n\t    throw new Error('schema id must be string');\n\t  key = resolve.normalizeId(key || id);\n\t  checkUnique(this, key);\n\t  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n\t  return this;\n\t}\n\n\n\t/**\n\t * Add schema that will be used to validate other schemas\n\t * options in META_IGNORE_OPTIONS are alway set to false\n\t * @this   Ajv\n\t * @param {Object} schema schema object\n\t * @param {String} key optional schema key\n\t * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n\t * @return {Ajv} this for method chaining\n\t */\n\tfunction addMetaSchema(schema, key, skipValidation) {\n\t  this.addSchema(schema, key, skipValidation, true);\n\t  return this;\n\t}\n\n\n\t/**\n\t * Validate schema\n\t * @this   Ajv\n\t * @param {Object} schema schema to validate\n\t * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n\t * @return {Boolean} true if schema is valid\n\t */\n\tfunction validateSchema(schema, throwOrLogError) {\n\t  var $schema = schema.$schema;\n\t  if ($schema !== undefined && typeof $schema != 'string')\n\t    throw new Error('$schema must be a string');\n\t  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n\t  if (!$schema) {\n\t    this.logger.warn('meta-schema not available');\n\t    this.errors = null;\n\t    return true;\n\t  }\n\t  var valid = this.validate($schema, schema);\n\t  if (!valid && throwOrLogError) {\n\t    var message = 'schema is invalid: ' + this.errorsText();\n\t    if (this._opts.validateSchema == 'log') this.logger.error(message);\n\t    else throw new Error(message);\n\t  }\n\t  return valid;\n\t}\n\n\n\tfunction defaultMeta(self) {\n\t  var meta = self._opts.meta;\n\t  self._opts.defaultMeta = typeof meta == 'object'\n\t                            ? self._getId(meta) || meta\n\t                            : self.getSchema(META_SCHEMA_ID)\n\t                              ? META_SCHEMA_ID\n\t                              : undefined;\n\t  return self._opts.defaultMeta;\n\t}\n\n\n\t/**\n\t * Get compiled schema from the instance by `key` or `ref`.\n\t * @this   Ajv\n\t * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n\t * @return {Function} schema validating function (with property `schema`).\n\t */\n\tfunction getSchema(keyRef) {\n\t  var schemaObj = _getSchemaObj(this, keyRef);\n\t  switch (typeof schemaObj) {\n\t    case 'object': return schemaObj.validate || this._compile(schemaObj);\n\t    case 'string': return this.getSchema(schemaObj);\n\t    case 'undefined': return _getSchemaFragment(this, keyRef);\n\t  }\n\t}\n\n\n\tfunction _getSchemaFragment(self, ref) {\n\t  var res = resolve.schema.call(self, { schema: {} }, ref);\n\t  if (res) {\n\t    var schema = res.schema\n\t      , root = res.root\n\t      , baseId = res.baseId;\n\t    var v = compileSchema.call(self, schema, root, undefined, baseId);\n\t    self._fragments[ref] = new SchemaObject({\n\t      ref: ref,\n\t      fragment: true,\n\t      schema: schema,\n\t      root: root,\n\t      baseId: baseId,\n\t      validate: v\n\t    });\n\t    return v;\n\t  }\n\t}\n\n\n\tfunction _getSchemaObj(self, keyRef) {\n\t  keyRef = resolve.normalizeId(keyRef);\n\t  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n\t}\n\n\n\t/**\n\t * Remove cached schema(s).\n\t * If no parameter is passed all schemas but meta-schemas are removed.\n\t * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n\t * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n\t * @this   Ajv\n\t * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n\t * @return {Ajv} this for method chaining\n\t */\n\tfunction removeSchema(schemaKeyRef) {\n\t  if (schemaKeyRef instanceof RegExp) {\n\t    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n\t    _removeAllSchemas(this, this._refs, schemaKeyRef);\n\t    return this;\n\t  }\n\t  switch (typeof schemaKeyRef) {\n\t    case 'undefined':\n\t      _removeAllSchemas(this, this._schemas);\n\t      _removeAllSchemas(this, this._refs);\n\t      this._cache.clear();\n\t      return this;\n\t    case 'string':\n\t      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n\t      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n\t      delete this._schemas[schemaKeyRef];\n\t      delete this._refs[schemaKeyRef];\n\t      return this;\n\t    case 'object':\n\t      var serialize = this._opts.serialize;\n\t      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n\t      this._cache.del(cacheKey);\n\t      var id = this._getId(schemaKeyRef);\n\t      if (id) {\n\t        id = resolve.normalizeId(id);\n\t        delete this._schemas[id];\n\t        delete this._refs[id];\n\t      }\n\t  }\n\t  return this;\n\t}\n\n\n\tfunction _removeAllSchemas(self, schemas, regex) {\n\t  for (var keyRef in schemas) {\n\t    var schemaObj = schemas[keyRef];\n\t    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n\t      self._cache.del(schemaObj.cacheKey);\n\t      delete schemas[keyRef];\n\t    }\n\t  }\n\t}\n\n\n\t/* @this   Ajv */\n\tfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n\t  if (typeof schema != 'object' && typeof schema != 'boolean')\n\t    throw new Error('schema should be object or boolean');\n\t  var serialize = this._opts.serialize;\n\t  var cacheKey = serialize ? serialize(schema) : schema;\n\t  var cached = this._cache.get(cacheKey);\n\t  if (cached) return cached;\n\n\t  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n\n\t  var id = resolve.normalizeId(this._getId(schema));\n\t  if (id && shouldAddSchema) checkUnique(this, id);\n\n\t  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n\t  var recursiveMeta;\n\t  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\n\t    this.validateSchema(schema, true);\n\n\t  var localRefs = resolve.ids.call(this, schema);\n\n\t  var schemaObj = new SchemaObject({\n\t    id: id,\n\t    schema: schema,\n\t    localRefs: localRefs,\n\t    cacheKey: cacheKey,\n\t    meta: meta\n\t  });\n\n\t  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n\t  this._cache.put(cacheKey, schemaObj);\n\n\t  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n\n\t  return schemaObj;\n\t}\n\n\n\t/* @this   Ajv */\n\tfunction _compile(schemaObj, root) {\n\t  if (schemaObj.compiling) {\n\t    schemaObj.validate = callValidate;\n\t    callValidate.schema = schemaObj.schema;\n\t    callValidate.errors = null;\n\t    callValidate.root = root ? root : callValidate;\n\t    if (schemaObj.schema.$async === true)\n\t      callValidate.$async = true;\n\t    return callValidate;\n\t  }\n\t  schemaObj.compiling = true;\n\n\t  var currentOpts;\n\t  if (schemaObj.meta) {\n\t    currentOpts = this._opts;\n\t    this._opts = this._metaOpts;\n\t  }\n\n\t  var v;\n\t  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }\n\t  catch(e) {\n\t    delete schemaObj.validate;\n\t    throw e;\n\t  }\n\t  finally {\n\t    schemaObj.compiling = false;\n\t    if (schemaObj.meta) this._opts = currentOpts;\n\t  }\n\n\t  schemaObj.validate = v;\n\t  schemaObj.refs = v.refs;\n\t  schemaObj.refVal = v.refVal;\n\t  schemaObj.root = v.root;\n\t  return v;\n\n\n\t  /* @this   {*} - custom context, see passContext option */\n\t  function callValidate() {\n\t    /* jshint validthis: true */\n\t    var _validate = schemaObj.validate;\n\t    var result = _validate.apply(this, arguments);\n\t    callValidate.errors = _validate.errors;\n\t    return result;\n\t  }\n\t}\n\n\n\tfunction chooseGetId(opts) {\n\t  switch (opts.schemaId) {\n\t    case 'auto': return _get$IdOrId;\n\t    case 'id': return _getId;\n\t    default: return _get$Id;\n\t  }\n\t}\n\n\t/* @this   Ajv */\n\tfunction _getId(schema) {\n\t  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n\t  return schema.id;\n\t}\n\n\t/* @this   Ajv */\n\tfunction _get$Id(schema) {\n\t  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n\t  return schema.$id;\n\t}\n\n\n\tfunction _get$IdOrId(schema) {\n\t  if (schema.$id && schema.id && schema.$id != schema.id)\n\t    throw new Error('schema $id is different from id');\n\t  return schema.$id || schema.id;\n\t}\n\n\n\t/**\n\t * Convert array of error message objects to string\n\t * @this   Ajv\n\t * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n\t * @param  {Object} options optional options with properties `separator` and `dataVar`.\n\t * @return {String} human readable string with all errors descriptions\n\t */\n\tfunction errorsText(errors, options) {\n\t  errors = errors || this.errors;\n\t  if (!errors) return 'No errors';\n\t  options = options || {};\n\t  var separator = options.separator === undefined ? ', ' : options.separator;\n\t  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n\t  var text = '';\n\t  for (var i=0; i<errors.length; i++) {\n\t    var e = errors[i];\n\t    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n\t  }\n\t  return text.slice(0, -separator.length);\n\t}\n\n\n\t/**\n\t * Add custom format\n\t * @this   Ajv\n\t * @param {String} name format name\n\t * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n\t * @return {Ajv} this for method chaining\n\t */\n\tfunction addFormat(name, format) {\n\t  if (typeof format == 'string') format = new RegExp(format);\n\t  this._formats[name] = format;\n\t  return this;\n\t}\n\n\n\tfunction addDefaultMetaSchema(self) {\n\t  var $dataSchema;\n\t  if (self._opts.$data) {\n\t    $dataSchema = require$$12;\n\t    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n\t  }\n\t  if (self._opts.meta === false) return;\n\t  var metaSchema = require$$13;\n\t  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n\t  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n\t  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n\t}\n\n\n\tfunction addInitialSchemas(self) {\n\t  var optsSchemas = self._opts.schemas;\n\t  if (!optsSchemas) return;\n\t  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);\n\t  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n\t}\n\n\n\tfunction addInitialFormats(self) {\n\t  for (var name in self._opts.formats) {\n\t    var format = self._opts.formats[name];\n\t    self.addFormat(name, format);\n\t  }\n\t}\n\n\n\tfunction addInitialKeywords(self) {\n\t  for (var name in self._opts.keywords) {\n\t    var keyword = self._opts.keywords[name];\n\t    self.addKeyword(name, keyword);\n\t  }\n\t}\n\n\n\tfunction checkUnique(self, id) {\n\t  if (self._schemas[id] || self._refs[id])\n\t    throw new Error('schema with key or id \"' + id + '\" already exists');\n\t}\n\n\n\tfunction getMetaSchemaOptions(self) {\n\t  var metaOpts = util.copy(self._opts);\n\t  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n\t    delete metaOpts[META_IGNORE_OPTIONS[i]];\n\t  return metaOpts;\n\t}\n\n\n\tfunction setLogger(self) {\n\t  var logger = self._opts.logger;\n\t  if (logger === false) {\n\t    self.logger = {log: noop, warn: noop, error: noop};\n\t  } else {\n\t    if (logger === undefined) logger = console;\n\t    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))\n\t      throw new Error('logger must implement log, warn and error methods');\n\t    self.logger = logger;\n\t  }\n\t}\n\n\n\tfunction noop() {}\n\treturn ajv;\n}\n\nexport { requireAjv as __require };","start":1667202705758,"end":1667202707391,"order":"normal"}]}
