{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/lib/tunnel.js","transforms":[{"name":"vite:load-fallback","result":"'use strict'\n\nvar url = require('url')\nvar tunnel = require('tunnel-agent')\n\nvar defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nvar defaultProxyHeaderExclusiveList = [\n  'proxy-authorization'\n]\n\nfunction constructProxyHost (uriObject) {\n  var port = uriObject.port\n  var protocol = uriObject.protocol\n  var proxyHost = uriObject.hostname + ':'\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) {\n  var whiteList = proxyHeaderWhiteList\n    .reduce(function (set, header) {\n      set[header.toLowerCase()] = true\n      return set\n    }, {})\n\n  return Object.keys(headers)\n    .filter(function (header) {\n      return whiteList[header.toLowerCase()]\n    })\n    .reduce(function (set, header) {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions (request, proxyHeaders) {\n  var proxy = request.proxy\n\n  var tunnelOptions = {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders\n    },\n    headers: request.headers,\n    ca: request.ca,\n    cert: request.cert,\n    key: request.key,\n    passphrase: request.passphrase,\n    pfx: request.pfx,\n    ciphers: request.ciphers,\n    rejectUnauthorized: request.rejectUnauthorized,\n    secureOptions: request.secureOptions,\n    secureProtocol: request.secureProtocol\n  }\n\n  return tunnelOptions\n}\n\nfunction constructTunnelFnName (uri, proxy) {\n  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction getTunnelFn (request) {\n  var uri = request.uri\n  var proxy = request.proxy\n  var tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction Tunnel (request) {\n  this.request = request\n  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n  this.proxyHeaderExclusiveList = []\n  if (typeof request.tunnel !== 'undefined') {\n    this.tunnelOverride = request.tunnel\n  }\n}\n\nTunnel.prototype.isEnabled = function () {\n  var self = this\n  var request = self.request\n    // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If self.tunnelOverride is set (the user specified a value), use it.\n  if (typeof self.tunnelOverride !== 'undefined') {\n    return self.tunnelOverride\n  }\n\n  // If the destination is HTTPS, tunnel.\n  if (request.uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nTunnel.prototype.setup = function (options) {\n  var self = this\n  var request = self.request\n\n  options = options || {}\n\n  if (typeof request.proxy === 'string') {\n    request.proxy = url.parse(request.proxy)\n  }\n\n  if (!request.proxy || !request.tunnel) {\n    return false\n  }\n\n  // Setup Proxy Header Exclusive List and White List\n  if (options.proxyHeaderWhiteList) {\n    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n  }\n  if (options.proxyHeaderExclusiveList) {\n    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n  }\n\n  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n  // Setup Proxy Headers and Proxy Headers Host\n  // Only send the Proxy White Listed Header names\n  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(request.uri)\n\n  proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n  // Set Agent from Tunnel Data\n  var tunnelFn = getTunnelFn(request)\n  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n  request.agent = tunnelFn(tunnelOptions)\n\n  return true\n}\n\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\nexports.Tunnel = Tunnel\n","start":1667202981997,"end":1667202982177},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as tunnel_1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/lib/tunnel.js?commonjs-exports\"\nimport require$$0 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/tunnel-agent/index.js?commonjs-wrapped\";\n\nvar hasRequiredTunnel;\n\nfunction requireTunnel () {\n\tif (hasRequiredTunnel) return tunnel_1;\n\thasRequiredTunnel = 1;\n\t'use strict'\n\n\tvar url = require$$0\n\tvar tunnel = require$$1()\n\n\tvar defaultProxyHeaderWhiteList = [\n\t  'accept',\n\t  'accept-charset',\n\t  'accept-encoding',\n\t  'accept-language',\n\t  'accept-ranges',\n\t  'cache-control',\n\t  'content-encoding',\n\t  'content-language',\n\t  'content-location',\n\t  'content-md5',\n\t  'content-range',\n\t  'content-type',\n\t  'connection',\n\t  'date',\n\t  'expect',\n\t  'max-forwards',\n\t  'pragma',\n\t  'referer',\n\t  'te',\n\t  'user-agent',\n\t  'via'\n\t]\n\n\tvar defaultProxyHeaderExclusiveList = [\n\t  'proxy-authorization'\n\t]\n\n\tfunction constructProxyHost (uriObject) {\n\t  var port = uriObject.port\n\t  var protocol = uriObject.protocol\n\t  var proxyHost = uriObject.hostname + ':'\n\n\t  if (port) {\n\t    proxyHost += port\n\t  } else if (protocol === 'https:') {\n\t    proxyHost += '443'\n\t  } else {\n\t    proxyHost += '80'\n\t  }\n\n\t  return proxyHost\n\t}\n\n\tfunction constructProxyHeaderWhiteList (headers, proxyHeaderWhiteList) {\n\t  var whiteList = proxyHeaderWhiteList\n\t    .reduce(function (set, header) {\n\t      set[header.toLowerCase()] = true\n\t      return set\n\t    }, {})\n\n\t  return Object.keys(headers)\n\t    .filter(function (header) {\n\t      return whiteList[header.toLowerCase()]\n\t    })\n\t    .reduce(function (set, header) {\n\t      set[header] = headers[header]\n\t      return set\n\t    }, {})\n\t}\n\n\tfunction constructTunnelOptions (request, proxyHeaders) {\n\t  var proxy = request.proxy\n\n\t  var tunnelOptions = {\n\t    proxy: {\n\t      host: proxy.hostname,\n\t      port: +proxy.port,\n\t      proxyAuth: proxy.auth,\n\t      headers: proxyHeaders\n\t    },\n\t    headers: request.headers,\n\t    ca: request.ca,\n\t    cert: request.cert,\n\t    key: request.key,\n\t    passphrase: request.passphrase,\n\t    pfx: request.pfx,\n\t    ciphers: request.ciphers,\n\t    rejectUnauthorized: request.rejectUnauthorized,\n\t    secureOptions: request.secureOptions,\n\t    secureProtocol: request.secureProtocol\n\t  }\n\n\t  return tunnelOptions\n\t}\n\n\tfunction constructTunnelFnName (uri, proxy) {\n\t  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n\t  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n\t  return [uriProtocol, proxyProtocol].join('Over')\n\t}\n\n\tfunction getTunnelFn (request) {\n\t  var uri = request.uri\n\t  var proxy = request.proxy\n\t  var tunnelFnName = constructTunnelFnName(uri, proxy)\n\t  return tunnel[tunnelFnName]\n\t}\n\n\tfunction Tunnel (request) {\n\t  this.request = request\n\t  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n\t  this.proxyHeaderExclusiveList = []\n\t  if (typeof request.tunnel !== 'undefined') {\n\t    this.tunnelOverride = request.tunnel\n\t  }\n\t}\n\n\tTunnel.prototype.isEnabled = function () {\n\t  var self = this\n\t  var request = self.request\n\t    // Tunnel HTTPS by default. Allow the user to override this setting.\n\n\t  // If self.tunnelOverride is set (the user specified a value), use it.\n\t  if (typeof self.tunnelOverride !== 'undefined') {\n\t    return self.tunnelOverride\n\t  }\n\n\t  // If the destination is HTTPS, tunnel.\n\t  if (request.uri.protocol === 'https:') {\n\t    return true\n\t  }\n\n\t  // Otherwise, do not use tunnel.\n\t  return false\n\t}\n\n\tTunnel.prototype.setup = function (options) {\n\t  var self = this\n\t  var request = self.request\n\n\t  options = options || {}\n\n\t  if (typeof request.proxy === 'string') {\n\t    request.proxy = url.parse(request.proxy)\n\t  }\n\n\t  if (!request.proxy || !request.tunnel) {\n\t    return false\n\t  }\n\n\t  // Setup Proxy Header Exclusive List and White List\n\t  if (options.proxyHeaderWhiteList) {\n\t    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n\t  }\n\t  if (options.proxyHeaderExclusiveList) {\n\t    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n\t  }\n\n\t  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n\t  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n\t  // Setup Proxy Headers and Proxy Headers Host\n\t  // Only send the Proxy White Listed Header names\n\t  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n\t  proxyHeaders.host = constructProxyHost(request.uri)\n\n\t  proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n\t  // Set Agent from Tunnel Data\n\t  var tunnelFn = getTunnelFn(request)\n\t  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n\t  request.agent = tunnelFn(tunnelOptions)\n\n\t  return true\n\t}\n\n\tTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\n\tTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n\ttunnel_1.Tunnel = Tunnel\n\treturn tunnel_1;\n}\n\nexport { requireTunnel as __require };","start":1667202982177,"end":1667202984854,"order":"normal"}]}
