{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/core.js","transforms":[{"name":"vite:load-fallback","result":"(function() {\n    var utils = require(\"../utils\");\n\n    var id = function(x){return x;};\n    var constantly = function(x){return function(){return x;};};\n\n    var mwComposition = function(mw1, mw2){\n        return function(h){ return mw1(mw2(h)); };\n    };\n\n    var Middleware = function(mw){\n        mw.and = function(nmw){\n            return Middleware(mwComposition(mw, nmw));\n        };\n        mw.end = function(h){\n            return mw(h);\n        };\n        return mw;\n    };\n\n    // generate wm from function\n    exports.$$Simple = function(f){\n        return function(h){\n            return function(args){\n                return h(f(args));\n            };\n        };\n    };\n\n    var setAttr = function(args, attr, value){\n        var path = attr.split('.');\n        var obj = args;\n        for(var i = 0; i < (path.length - 1); i++){\n            var k = path[i];\n            obj = args[k];\n            if(!obj){\n                obj = {};\n                args[k] = obj;\n            }\n        }\n        obj[path[path.length - 1]] = value;\n        return args;\n    };\n\n    // generate wm from function\n    exports.$$Attr = function(attr, fn){\n        return Middleware(function(h){\n            return function(args) {\n                var value = null;\n                if(utils.type(fn) == 'function'){\n                   value = fn(args);\n                } else {\n                    value = fn;\n                }\n                if(value == null && value == undefined){\n                    return h(args);\n                }else {\n                    return h(setAttr(args, attr, value));\n                }\n            };\n        });\n    };\n\n    var Attribute = function(attr, fn){\n        return Middleware(function(h){\n            return function(args) {\n                args[attr] = fn(args);\n                return h(args);\n            };\n        });\n    };\n\n    var Method = function(method){\n        return Attribute('method', constantly(method));\n    };\n\n    exports.Middleware = Middleware;\n    exports.Attribute = Attribute;\n    exports.Method = Method;\n\n}).call(this);\n","start":1667202981211,"end":1667202981471},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as core } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/core.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/utils.js?commonjs-wrapped\";\n\nvar hasRequiredCore;\n\nfunction requireCore () {\n\tif (hasRequiredCore) return core;\n\thasRequiredCore = 1;\n\t(function() {\n\t    var utils = require$$0();\n\n\t    var id = function(x){return x;};\n\t    var constantly = function(x){return function(){return x;};};\n\n\t    var mwComposition = function(mw1, mw2){\n\t        return function(h){ return mw1(mw2(h)); };\n\t    };\n\n\t    var Middleware = function(mw){\n\t        mw.and = function(nmw){\n\t            return Middleware(mwComposition(mw, nmw));\n\t        };\n\t        mw.end = function(h){\n\t            return mw(h);\n\t        };\n\t        return mw;\n\t    };\n\n\t    // generate wm from function\n\t    core.$$Simple = function(f){\n\t        return function(h){\n\t            return function(args){\n\t                return h(f(args));\n\t            };\n\t        };\n\t    };\n\n\t    var setAttr = function(args, attr, value){\n\t        var path = attr.split('.');\n\t        var obj = args;\n\t        for(var i = 0; i < (path.length - 1); i++){\n\t            var k = path[i];\n\t            obj = args[k];\n\t            if(!obj){\n\t                obj = {};\n\t                args[k] = obj;\n\t            }\n\t        }\n\t        obj[path[path.length - 1]] = value;\n\t        return args;\n\t    };\n\n\t    // generate wm from function\n\t    core.$$Attr = function(attr, fn){\n\t        return Middleware(function(h){\n\t            return function(args) {\n\t                var value = null;\n\t                if(utils.type(fn) == 'function'){\n\t                   value = fn(args);\n\t                } else {\n\t                    value = fn;\n\t                }\n\t                if(value == null && value == undefined){\n\t                    return h(args);\n\t                }else {\n\t                    return h(setAttr(args, attr, value));\n\t                }\n\t            };\n\t        });\n\t    };\n\n\t    var Attribute = function(attr, fn){\n\t        return Middleware(function(h){\n\t            return function(args) {\n\t                args[attr] = fn(args);\n\t                return h(args);\n\t            };\n\t        });\n\t    };\n\n\t    var Method = function(method){\n\t        return Attribute('method', constantly(method));\n\t    };\n\n\t    core.Middleware = Middleware;\n\t    core.Attribute = Attribute;\n\t    core.Method = Method;\n\n\t}).call(commonjsHelpers.commonjsGlobal);\n\treturn core;\n}\n\nexport { requireCore as __require };","start":1667202981471,"end":1667202982197,"order":"normal"}]}
