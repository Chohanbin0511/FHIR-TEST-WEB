{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/errors.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar util = require('util');\n\nfunction FingerprintFormatError(fp, format) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, FingerprintFormatError);\n\tthis.name = 'FingerprintFormatError';\n\tthis.fingerprint = fp;\n\tthis.format = format;\n\tthis.message = 'Fingerprint format is not supported, or is invalid: ';\n\tif (fp !== undefined)\n\t\tthis.message += ' fingerprint = ' + fp;\n\tif (format !== undefined)\n\t\tthis.message += ' format = ' + format;\n}\nutil.inherits(FingerprintFormatError, Error);\n\nfunction InvalidAlgorithmError(alg) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, InvalidAlgorithmError);\n\tthis.name = 'InvalidAlgorithmError';\n\tthis.algorithm = alg;\n\tthis.message = 'Algorithm \"' + alg + '\" is not supported';\n}\nutil.inherits(InvalidAlgorithmError, Error);\n\nfunction KeyParseError(name, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, KeyParseError);\n\tthis.name = 'KeyParseError';\n\tthis.format = format;\n\tthis.keyName = name;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t    ' format key: ' + innerErr.message;\n}\nutil.inherits(KeyParseError, Error);\n\nfunction SignatureParseError(type, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, SignatureParseError);\n\tthis.name = 'SignatureParseError';\n\tthis.type = type;\n\tthis.format = format;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse the given data as a ' + type +\n\t    ' signature in ' + format + ' format: ' + innerErr.message;\n}\nutil.inherits(SignatureParseError, Error);\n\nfunction CertificateParseError(name, format, innerErr) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, CertificateParseError);\n\tthis.name = 'CertificateParseError';\n\tthis.format = format;\n\tthis.certName = name;\n\tthis.innerErr = innerErr;\n\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t    ' format certificate: ' + innerErr.message;\n}\nutil.inherits(CertificateParseError, Error);\n\nfunction KeyEncryptedError(name, format) {\n\tif (Error.captureStackTrace)\n\t\tError.captureStackTrace(this, KeyEncryptedError);\n\tthis.name = 'KeyEncryptedError';\n\tthis.format = format;\n\tthis.keyName = name;\n\tthis.message = 'The ' + format + ' format key ' + name + ' is ' +\n\t    'encrypted (password-protected), and no passphrase was ' +\n\t    'provided in `options`';\n}\nutil.inherits(KeyEncryptedError, Error);\n\nmodule.exports = {\n\tFingerprintFormatError: FingerprintFormatError,\n\tInvalidAlgorithmError: InvalidAlgorithmError,\n\tKeyParseError: KeyParseError,\n\tSignatureParseError: SignatureParseError,\n\tKeyEncryptedError: KeyEncryptedError,\n\tCertificateParseError: CertificateParseError\n};\n","start":1667202706209,"end":1667202706422},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\n\nvar errors;\nvar hasRequiredErrors;\n\nfunction requireErrors () {\n\tif (hasRequiredErrors) return errors;\n\thasRequiredErrors = 1;\n\t// Copyright 2015 Joyent, Inc.\n\n\tvar assert = require$$0();\n\tvar util = require$$1();\n\n\tfunction FingerprintFormatError(fp, format) {\n\t\tif (Error.captureStackTrace)\n\t\t\tError.captureStackTrace(this, FingerprintFormatError);\n\t\tthis.name = 'FingerprintFormatError';\n\t\tthis.fingerprint = fp;\n\t\tthis.format = format;\n\t\tthis.message = 'Fingerprint format is not supported, or is invalid: ';\n\t\tif (fp !== undefined)\n\t\t\tthis.message += ' fingerprint = ' + fp;\n\t\tif (format !== undefined)\n\t\t\tthis.message += ' format = ' + format;\n\t}\n\tutil.inherits(FingerprintFormatError, Error);\n\n\tfunction InvalidAlgorithmError(alg) {\n\t\tif (Error.captureStackTrace)\n\t\t\tError.captureStackTrace(this, InvalidAlgorithmError);\n\t\tthis.name = 'InvalidAlgorithmError';\n\t\tthis.algorithm = alg;\n\t\tthis.message = 'Algorithm \"' + alg + '\" is not supported';\n\t}\n\tutil.inherits(InvalidAlgorithmError, Error);\n\n\tfunction KeyParseError(name, format, innerErr) {\n\t\tif (Error.captureStackTrace)\n\t\t\tError.captureStackTrace(this, KeyParseError);\n\t\tthis.name = 'KeyParseError';\n\t\tthis.format = format;\n\t\tthis.keyName = name;\n\t\tthis.innerErr = innerErr;\n\t\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t\t    ' format key: ' + innerErr.message;\n\t}\n\tutil.inherits(KeyParseError, Error);\n\n\tfunction SignatureParseError(type, format, innerErr) {\n\t\tif (Error.captureStackTrace)\n\t\t\tError.captureStackTrace(this, SignatureParseError);\n\t\tthis.name = 'SignatureParseError';\n\t\tthis.type = type;\n\t\tthis.format = format;\n\t\tthis.innerErr = innerErr;\n\t\tthis.message = 'Failed to parse the given data as a ' + type +\n\t\t    ' signature in ' + format + ' format: ' + innerErr.message;\n\t}\n\tutil.inherits(SignatureParseError, Error);\n\n\tfunction CertificateParseError(name, format, innerErr) {\n\t\tif (Error.captureStackTrace)\n\t\t\tError.captureStackTrace(this, CertificateParseError);\n\t\tthis.name = 'CertificateParseError';\n\t\tthis.format = format;\n\t\tthis.certName = name;\n\t\tthis.innerErr = innerErr;\n\t\tthis.message = 'Failed to parse ' + name + ' as a valid ' + format +\n\t\t    ' format certificate: ' + innerErr.message;\n\t}\n\tutil.inherits(CertificateParseError, Error);\n\n\tfunction KeyEncryptedError(name, format) {\n\t\tif (Error.captureStackTrace)\n\t\t\tError.captureStackTrace(this, KeyEncryptedError);\n\t\tthis.name = 'KeyEncryptedError';\n\t\tthis.format = format;\n\t\tthis.keyName = name;\n\t\tthis.message = 'The ' + format + ' format key ' + name + ' is ' +\n\t\t    'encrypted (password-protected), and no passphrase was ' +\n\t\t    'provided in `options`';\n\t}\n\tutil.inherits(KeyEncryptedError, Error);\n\n\terrors = {\n\t\tFingerprintFormatError: FingerprintFormatError,\n\t\tInvalidAlgorithmError: InvalidAlgorithmError,\n\t\tKeyParseError: KeyParseError,\n\t\tSignatureParseError: SignatureParseError,\n\t\tKeyEncryptedError: KeyEncryptedError,\n\t\tCertificateParseError: CertificateParseError\n\t};\n\treturn errors;\n}\n\nexport { requireErrors as __require };","start":1667202706422,"end":1667202707555,"order":"normal"}]}
