{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/memstore.js","transforms":[{"name":"vite:load-fallback","result":"/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\nvar Store = require('./store').Store;\nvar permuteDomain = require('./permuteDomain').permuteDomain;\nvar pathMatch = require('./pathMatch').pathMatch;\nvar util = require('util');\n\nfunction MemoryCookieStore() {\n  Store.call(this);\n  this.idx = {};\n}\nutil.inherits(MemoryCookieStore, Store);\nexports.MemoryCookieStore = MemoryCookieStore;\nMemoryCookieStore.prototype.idx = null;\n\n// Since it's just a struct in RAM, this Store is synchronous\nMemoryCookieStore.prototype.synchronous = true;\n\n// force a default depth:\nMemoryCookieStore.prototype.inspect = function() {\n  return \"{ idx: \"+util.inspect(this.idx, false, 2)+' }';\n};\n\n// Use the new custom inspection symbol to add the custom inspect function if\n// available.\nif (util.inspect.custom) {\n  MemoryCookieStore.prototype[util.inspect.custom] = MemoryCookieStore.prototype.inspect;\n}\n\nMemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {\n  if (!this.idx[domain]) {\n    return cb(null,undefined);\n  }\n  if (!this.idx[domain][path]) {\n    return cb(null,undefined);\n  }\n  return cb(null,this.idx[domain][path][key]||null);\n};\n\nMemoryCookieStore.prototype.findCookies = function(domain, path, cb) {\n  var results = [];\n  if (!domain) {\n    return cb(null,[]);\n  }\n\n  var pathMatcher;\n  if (!path) {\n    // null means \"all paths\"\n    pathMatcher = function matchAll(domainIndex) {\n      for (var curPath in domainIndex) {\n        var pathIndex = domainIndex[curPath];\n        for (var key in pathIndex) {\n          results.push(pathIndex[key]);\n        }\n      }\n    };\n\n  } else {\n    pathMatcher = function matchRFC(domainIndex) {\n       //NOTE: we should use path-match algorithm from S5.1.4 here\n       //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)\n       Object.keys(domainIndex).forEach(function (cookiePath) {\n         if (pathMatch(path, cookiePath)) {\n           var pathIndex = domainIndex[cookiePath];\n\n           for (var key in pathIndex) {\n             results.push(pathIndex[key]);\n           }\n         }\n       });\n     };\n  }\n\n  var domains = permuteDomain(domain) || [domain];\n  var idx = this.idx;\n  domains.forEach(function(curDomain) {\n    var domainIndex = idx[curDomain];\n    if (!domainIndex) {\n      return;\n    }\n    pathMatcher(domainIndex);\n  });\n\n  cb(null,results);\n};\n\nMemoryCookieStore.prototype.putCookie = function(cookie, cb) {\n  if (!this.idx[cookie.domain]) {\n    this.idx[cookie.domain] = {};\n  }\n  if (!this.idx[cookie.domain][cookie.path]) {\n    this.idx[cookie.domain][cookie.path] = {};\n  }\n  this.idx[cookie.domain][cookie.path][cookie.key] = cookie;\n  cb(null);\n};\n\nMemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {\n  // updateCookie() may avoid updating cookies that are identical.  For example,\n  // lastAccessed may not be important to some stores and an equality\n  // comparison could exclude that field.\n  this.putCookie(newCookie,cb);\n};\n\nMemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {\n  if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {\n    delete this.idx[domain][path][key];\n  }\n  cb(null);\n};\n\nMemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {\n  if (this.idx[domain]) {\n    if (path) {\n      delete this.idx[domain][path];\n    } else {\n      delete this.idx[domain];\n    }\n  }\n  return cb(null);\n};\n\nMemoryCookieStore.prototype.removeAllCookies = function(cb) {\n  this.idx = {};\n  return cb(null);\n}\n\nMemoryCookieStore.prototype.getAllCookies = function(cb) {\n  var cookies = [];\n  var idx = this.idx;\n\n  var domains = Object.keys(idx);\n  domains.forEach(function(domain) {\n    var paths = Object.keys(idx[domain]);\n    paths.forEach(function(path) {\n      var keys = Object.keys(idx[domain][path]);\n      keys.forEach(function(key) {\n        if (key !== null) {\n          cookies.push(idx[domain][path][key]);\n        }\n      });\n    });\n  });\n\n  // Sort by creationIndex so deserializing retains the creation order.\n  // When implementing your own store, this SHOULD retain the order too\n  cookies.sort(function(a,b) {\n    return (a.creationIndex||0) - (b.creationIndex||0);\n  });\n\n  cb(null, cookies);\n};\n","start":1667202982330,"end":1667202982440},{"name":"commonjs","result":"/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as memstore } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/memstore.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/store.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/permuteDomain.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/pathMatch.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\n\nvar hasRequiredMemstore;\n\nfunction requireMemstore () {\n\tif (hasRequiredMemstore) return memstore;\n\thasRequiredMemstore = 1;\n\t'use strict';\n\tvar Store = require$$0().Store;\n\tvar permuteDomain = require$$1().permuteDomain;\n\tvar pathMatch = require$$2().pathMatch;\n\tvar util = require$$3();\n\n\tfunction MemoryCookieStore() {\n\t  Store.call(this);\n\t  this.idx = {};\n\t}\n\tutil.inherits(MemoryCookieStore, Store);\n\tmemstore.MemoryCookieStore = MemoryCookieStore;\n\tMemoryCookieStore.prototype.idx = null;\n\n\t// Since it's just a struct in RAM, this Store is synchronous\n\tMemoryCookieStore.prototype.synchronous = true;\n\n\t// force a default depth:\n\tMemoryCookieStore.prototype.inspect = function() {\n\t  return \"{ idx: \"+util.inspect(this.idx, false, 2)+' }';\n\t};\n\n\t// Use the new custom inspection symbol to add the custom inspect function if\n\t// available.\n\tif (util.inspect.custom) {\n\t  MemoryCookieStore.prototype[util.inspect.custom] = MemoryCookieStore.prototype.inspect;\n\t}\n\n\tMemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {\n\t  if (!this.idx[domain]) {\n\t    return cb(null,undefined);\n\t  }\n\t  if (!this.idx[domain][path]) {\n\t    return cb(null,undefined);\n\t  }\n\t  return cb(null,this.idx[domain][path][key]||null);\n\t};\n\n\tMemoryCookieStore.prototype.findCookies = function(domain, path, cb) {\n\t  var results = [];\n\t  if (!domain) {\n\t    return cb(null,[]);\n\t  }\n\n\t  var pathMatcher;\n\t  if (!path) {\n\t    // null means \"all paths\"\n\t    pathMatcher = function matchAll(domainIndex) {\n\t      for (var curPath in domainIndex) {\n\t        var pathIndex = domainIndex[curPath];\n\t        for (var key in pathIndex) {\n\t          results.push(pathIndex[key]);\n\t        }\n\t      }\n\t    };\n\n\t  } else {\n\t    pathMatcher = function matchRFC(domainIndex) {\n\t       //NOTE: we should use path-match algorithm from S5.1.4 here\n\t       //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)\n\t       Object.keys(domainIndex).forEach(function (cookiePath) {\n\t         if (pathMatch(path, cookiePath)) {\n\t           var pathIndex = domainIndex[cookiePath];\n\n\t           for (var key in pathIndex) {\n\t             results.push(pathIndex[key]);\n\t           }\n\t         }\n\t       });\n\t     };\n\t  }\n\n\t  var domains = permuteDomain(domain) || [domain];\n\t  var idx = this.idx;\n\t  domains.forEach(function(curDomain) {\n\t    var domainIndex = idx[curDomain];\n\t    if (!domainIndex) {\n\t      return;\n\t    }\n\t    pathMatcher(domainIndex);\n\t  });\n\n\t  cb(null,results);\n\t};\n\n\tMemoryCookieStore.prototype.putCookie = function(cookie, cb) {\n\t  if (!this.idx[cookie.domain]) {\n\t    this.idx[cookie.domain] = {};\n\t  }\n\t  if (!this.idx[cookie.domain][cookie.path]) {\n\t    this.idx[cookie.domain][cookie.path] = {};\n\t  }\n\t  this.idx[cookie.domain][cookie.path][cookie.key] = cookie;\n\t  cb(null);\n\t};\n\n\tMemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {\n\t  // updateCookie() may avoid updating cookies that are identical.  For example,\n\t  // lastAccessed may not be important to some stores and an equality\n\t  // comparison could exclude that field.\n\t  this.putCookie(newCookie,cb);\n\t};\n\n\tMemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {\n\t  if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {\n\t    delete this.idx[domain][path][key];\n\t  }\n\t  cb(null);\n\t};\n\n\tMemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {\n\t  if (this.idx[domain]) {\n\t    if (path) {\n\t      delete this.idx[domain][path];\n\t    } else {\n\t      delete this.idx[domain];\n\t    }\n\t  }\n\t  return cb(null);\n\t};\n\n\tMemoryCookieStore.prototype.removeAllCookies = function(cb) {\n\t  this.idx = {};\n\t  return cb(null);\n\t}\n\n\tMemoryCookieStore.prototype.getAllCookies = function(cb) {\n\t  var cookies = [];\n\t  var idx = this.idx;\n\n\t  var domains = Object.keys(idx);\n\t  domains.forEach(function(domain) {\n\t    var paths = Object.keys(idx[domain]);\n\t    paths.forEach(function(path) {\n\t      var keys = Object.keys(idx[domain][path]);\n\t      keys.forEach(function(key) {\n\t        if (key !== null) {\n\t          cookies.push(idx[domain][path][key]);\n\t        }\n\t      });\n\t    });\n\t  });\n\n\t  // Sort by creationIndex so deserializing retains the creation order.\n\t  // When implementing your own store, this SHOULD retain the order too\n\t  cookies.sort(function(a,b) {\n\t    return (a.creationIndex||0) - (b.creationIndex||0);\n\t  });\n\n\t  cb(null, cookies);\n\t};\n\treturn memstore;\n}\n\nexport { requireMemstore as __require };","start":1667202982441,"end":1667202984819,"order":"normal"}]}
