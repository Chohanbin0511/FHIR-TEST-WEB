{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/lib/multipart.js","transforms":[{"name":"vite:load-fallback","result":"'use strict'\n\nvar uuid = require('uuid/v4')\nvar CombinedStream = require('combined-stream')\nvar isstream = require('isstream')\nvar Buffer = require('safe-buffer').Buffer\n\nfunction Multipart (request) {\n  this.request = request\n  this.boundary = uuid()\n  this.chunked = false\n  this.body = null\n}\n\nMultipart.prototype.isChunked = function (options) {\n  var self = this\n  var chunked = false\n  var parts = options.data || options\n\n  if (!parts.forEach) {\n    self.request.emit('error', new Error('Argument error, options.multipart.'))\n  }\n\n  if (options.chunked !== undefined) {\n    chunked = options.chunked\n  }\n\n  if (self.request.getHeader('transfer-encoding') === 'chunked') {\n    chunked = true\n  }\n\n  if (!chunked) {\n    parts.forEach(function (part) {\n      if (typeof part.body === 'undefined') {\n        self.request.emit('error', new Error('Body attribute missing in multipart.'))\n      }\n      if (isstream(part.body)) {\n        chunked = true\n      }\n    })\n  }\n\n  return chunked\n}\n\nMultipart.prototype.setHeaders = function (chunked) {\n  var self = this\n\n  if (chunked && !self.request.hasHeader('transfer-encoding')) {\n    self.request.setHeader('transfer-encoding', 'chunked')\n  }\n\n  var header = self.request.getHeader('content-type')\n\n  if (!header || header.indexOf('multipart') === -1) {\n    self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary)\n  } else {\n    if (header.indexOf('boundary') !== -1) {\n      self.boundary = header.replace(/.*boundary=([^\\s;]+).*/, '$1')\n    } else {\n      self.request.setHeader('content-type', header + '; boundary=' + self.boundary)\n    }\n  }\n}\n\nMultipart.prototype.build = function (parts, chunked) {\n  var self = this\n  var body = chunked ? new CombinedStream() : []\n\n  function add (part) {\n    if (typeof part === 'number') {\n      part = part.toString()\n    }\n    return chunked ? body.append(part) : body.push(Buffer.from(part))\n  }\n\n  if (self.request.preambleCRLF) {\n    add('\\r\\n')\n  }\n\n  parts.forEach(function (part) {\n    var preamble = '--' + self.boundary + '\\r\\n'\n    Object.keys(part).forEach(function (key) {\n      if (key === 'body') { return }\n      preamble += key + ': ' + part[key] + '\\r\\n'\n    })\n    preamble += '\\r\\n'\n    add(preamble)\n    add(part.body)\n    add('\\r\\n')\n  })\n  add('--' + self.boundary + '--')\n\n  if (self.request.postambleCRLF) {\n    add('\\r\\n')\n  }\n\n  return body\n}\n\nMultipart.prototype.onRequest = function (options) {\n  var self = this\n\n  var chunked = self.isChunked(options)\n  var parts = options.data || options\n\n  self.setHeaders(chunked)\n  self.chunked = chunked\n  self.body = self.build(parts, chunked)\n}\n\nexports.Multipart = Multipart\n","start":1667202981921,"end":1667202982153},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as multipart } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/lib/multipart.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/uuid/v4.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/combined-stream/lib/combined_stream.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/isstream/isstream.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safe-buffer/index.js?commonjs-wrapped\";\n\nvar hasRequiredMultipart;\n\nfunction requireMultipart () {\n\tif (hasRequiredMultipart) return multipart;\n\thasRequiredMultipart = 1;\n\t'use strict'\n\n\tvar uuid = require$$0()\n\tvar CombinedStream = require$$1()\n\tvar isstream = require$$2()\n\tvar Buffer = require$$3().Buffer\n\n\tfunction Multipart (request) {\n\t  this.request = request\n\t  this.boundary = uuid()\n\t  this.chunked = false\n\t  this.body = null\n\t}\n\n\tMultipart.prototype.isChunked = function (options) {\n\t  var self = this\n\t  var chunked = false\n\t  var parts = options.data || options\n\n\t  if (!parts.forEach) {\n\t    self.request.emit('error', new Error('Argument error, options.multipart.'))\n\t  }\n\n\t  if (options.chunked !== undefined) {\n\t    chunked = options.chunked\n\t  }\n\n\t  if (self.request.getHeader('transfer-encoding') === 'chunked') {\n\t    chunked = true\n\t  }\n\n\t  if (!chunked) {\n\t    parts.forEach(function (part) {\n\t      if (typeof part.body === 'undefined') {\n\t        self.request.emit('error', new Error('Body attribute missing in multipart.'))\n\t      }\n\t      if (isstream(part.body)) {\n\t        chunked = true\n\t      }\n\t    })\n\t  }\n\n\t  return chunked\n\t}\n\n\tMultipart.prototype.setHeaders = function (chunked) {\n\t  var self = this\n\n\t  if (chunked && !self.request.hasHeader('transfer-encoding')) {\n\t    self.request.setHeader('transfer-encoding', 'chunked')\n\t  }\n\n\t  var header = self.request.getHeader('content-type')\n\n\t  if (!header || header.indexOf('multipart') === -1) {\n\t    self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary)\n\t  } else {\n\t    if (header.indexOf('boundary') !== -1) {\n\t      self.boundary = header.replace(/.*boundary=([^\\s;]+).*/, '$1')\n\t    } else {\n\t      self.request.setHeader('content-type', header + '; boundary=' + self.boundary)\n\t    }\n\t  }\n\t}\n\n\tMultipart.prototype.build = function (parts, chunked) {\n\t  var self = this\n\t  var body = chunked ? new CombinedStream() : []\n\n\t  function add (part) {\n\t    if (typeof part === 'number') {\n\t      part = part.toString()\n\t    }\n\t    return chunked ? body.append(part) : body.push(Buffer.from(part))\n\t  }\n\n\t  if (self.request.preambleCRLF) {\n\t    add('\\r\\n')\n\t  }\n\n\t  parts.forEach(function (part) {\n\t    var preamble = '--' + self.boundary + '\\r\\n'\n\t    Object.keys(part).forEach(function (key) {\n\t      if (key === 'body') { return }\n\t      preamble += key + ': ' + part[key] + '\\r\\n'\n\t    })\n\t    preamble += '\\r\\n'\n\t    add(preamble)\n\t    add(part.body)\n\t    add('\\r\\n')\n\t  })\n\t  add('--' + self.boundary + '--')\n\n\t  if (self.request.postambleCRLF) {\n\t    add('\\r\\n')\n\t  }\n\n\t  return body\n\t}\n\n\tMultipart.prototype.onRequest = function (options) {\n\t  var self = this\n\n\t  var chunked = self.isChunked(options)\n\t  var parts = options.data || options\n\n\t  self.setHeaders(chunked)\n\t  self.chunked = chunked\n\t  self.body = self.build(parts, chunked)\n\t}\n\n\tmultipart.Multipart = Multipart\n\treturn multipart;\n}\n\nexport { requireMultipart as __require };","start":1667202982154,"end":1667202984890,"order":"normal"}]}
