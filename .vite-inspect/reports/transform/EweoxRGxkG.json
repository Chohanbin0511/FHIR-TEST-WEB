{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/safe-buffer/index.js","transforms":[{"name":"vite:load-fallback","result":"/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer ?? {}\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","start":1667202704590,"end":1667202704734},{"name":"commonjs","result":"/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as safeBufferModule, exports as safeBuffer } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safe-buffer/index.js?commonjs-module\"\nimport require$$0 from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/rollup-plugin-node-polyfills/polyfills/buffer-es6.js?commonjs-proxy\";\n\nvar hasRequiredSafeBuffer;\n\nfunction requireSafeBuffer () {\n\tif (hasRequiredSafeBuffer) return safeBuffer;\n\thasRequiredSafeBuffer = 1;\n\t(function (module, exports) {\n\t\t/* eslint-disable node/no-deprecated-api */\n\t\tvar buffer = require$$0\n\t\tvar Buffer = buffer.Buffer ?? {}\n\n\t\t// alternative to using Object.keys for old browsers\n\t\tfunction copyProps (src, dst) {\n\t\t  for (var key in src) {\n\t\t    dst[key] = src[key]\n\t\t  }\n\t\t}\n\t\tif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n\t\t  module.exports = buffer\n\t\t} else {\n\t\t  // Copy properties from require('buffer')\n\t\t  copyProps(buffer, exports)\n\t\t  exports.Buffer = SafeBuffer\n\t\t}\n\n\t\tfunction SafeBuffer (arg, encodingOrOffset, length) {\n\t\t  return Buffer(arg, encodingOrOffset, length)\n\t\t}\n\n\t\tSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n\t\t// Copy static methods from Buffer\n\t\tcopyProps(Buffer, SafeBuffer)\n\n\t\tSafeBuffer.from = function (arg, encodingOrOffset, length) {\n\t\t  if (typeof arg === 'number') {\n\t\t    throw new TypeError('Argument must not be a number')\n\t\t  }\n\t\t  return Buffer(arg, encodingOrOffset, length)\n\t\t}\n\n\t\tSafeBuffer.alloc = function (size, fill, encoding) {\n\t\t  if (typeof size !== 'number') {\n\t\t    throw new TypeError('Argument must be a number')\n\t\t  }\n\t\t  var buf = Buffer(size)\n\t\t  if (fill !== undefined) {\n\t\t    if (typeof encoding === 'string') {\n\t\t      buf.fill(fill, encoding)\n\t\t    } else {\n\t\t      buf.fill(fill)\n\t\t    }\n\t\t  } else {\n\t\t    buf.fill(0)\n\t\t  }\n\t\t  return buf\n\t\t}\n\n\t\tSafeBuffer.allocUnsafe = function (size) {\n\t\t  if (typeof size !== 'number') {\n\t\t    throw new TypeError('Argument must be a number')\n\t\t  }\n\t\t  return Buffer(size)\n\t\t}\n\n\t\tSafeBuffer.allocUnsafeSlow = function (size) {\n\t\t  if (typeof size !== 'number') {\n\t\t    throw new TypeError('Argument must be a number')\n\t\t  }\n\t\t  return buffer.SlowBuffer(size)\n\t\t}\n} (safeBufferModule, safeBuffer));\n\treturn safeBuffer;\n}\n\nexport { requireSafeBuffer as __require };","start":1667202704734,"end":1667202705221,"order":"normal"},{"name":"node-polyfills","result":"/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as safeBufferModule, exports as safeBuffer } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safe-buffer/index.js?commonjs-module\"\nimport require$$0 from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/rollup-plugin-node-polyfills/polyfills/buffer-es6.js?commonjs-proxy\";\n\nvar hasRequiredSafeBuffer;\n\nfunction requireSafeBuffer () {\n\tif (hasRequiredSafeBuffer) return safeBuffer;\n\thasRequiredSafeBuffer = 1;\n\t(function (module, exports) {\n\t\t/* eslint-disable node/no-deprecated-api */\n\t\tvar buffer = require$$0\n\t\tvar Buffer = buffer.Buffer ?? {}\n\n\t\t// alternative to using Object.keys for old browsers\n\t\tfunction copyProps (src, dst) {\n\t\t  for (var key in src) {\n\t\t    dst[key] = src[key]\n\t\t  }\n\t\t}\n\t\tif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n\t\t  module.exports = buffer\n\t\t} else {\n\t\t  // Copy properties from require('buffer')\n\t\t  copyProps(buffer, exports)\n\t\t  exports.Buffer = SafeBuffer\n\t\t}\n\n\t\tfunction SafeBuffer (arg, encodingOrOffset, length) {\n\t\t  return Buffer(arg, encodingOrOffset, length)\n\t\t}\n\n\t\tSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n\t\t// Copy static methods from Buffer\n\t\tcopyProps(Buffer, SafeBuffer)\n\n\t\tSafeBuffer.from = function (arg, encodingOrOffset, length) {\n\t\t  if (typeof arg === 'number') {\n\t\t    throw new TypeError('Argument must not be a number')\n\t\t  }\n\t\t  return Buffer(arg, encodingOrOffset, length)\n\t\t}\n\n\t\tSafeBuffer.alloc = function (size, fill, encoding) {\n\t\t  if (typeof size !== 'number') {\n\t\t    throw new TypeError('Argument must be a number')\n\t\t  }\n\t\t  var buf = Buffer(size)\n\t\t  if (fill !== undefined) {\n\t\t    if (typeof encoding === 'string') {\n\t\t      buf.fill(fill, encoding)\n\t\t    } else {\n\t\t      buf.fill(fill)\n\t\t    }\n\t\t  } else {\n\t\t    buf.fill(0)\n\t\t  }\n\t\t  return buf\n\t\t}\n\n\t\tSafeBuffer.allocUnsafe = function (size) {\n\t\t  if (typeof size !== 'number') {\n\t\t    throw new TypeError('Argument must be a number')\n\t\t  }\n\t\t  return Buffer(size)\n\t\t}\n\n\t\tSafeBuffer.allocUnsafeSlow = function (size) {\n\t\t  if (typeof size !== 'number') {\n\t\t    throw new TypeError('Argument must be a number')\n\t\t  }\n\t\t  return buffer.SlowBuffer(size)\n\t\t}\n} (safeBufferModule, safeBuffer));\n\treturn safeBuffer;\n}\n\nexport { requireSafeBuffer as __require };","start":1667202705222,"end":1667202705223,"order":"normal"}]}
