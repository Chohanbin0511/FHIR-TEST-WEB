{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sha256/lib/sha256.js","transforms":[{"name":"vite:load-fallback","result":"!function(globals) {\n'use strict'\n\nvar _imports = {}\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  _imports.bytesToHex = require('convert-hex').bytesToHex\n  _imports.convertString = require('convert-string')\n  module.exports = sha256\n} else {\n  _imports.bytesToHex = globals.convertHex.bytesToHex\n  _imports.convertString = globals.convertString\n  globals.sha256 = sha256\n}\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n\n// Initialization round constants tables\nvar K = []\n\n// Compute constants\n!function () {\n  function isPrime(n) {\n    var sqrtN = Math.sqrt(n);\n    for (var factor = 2; factor <= sqrtN; factor++) {\n      if (!(n % factor)) return false\n    }\n\n    return true\n  }\n\n  function getFractionalBits(n) {\n    return ((n - (n | 0)) * 0x100000000) | 0\n  }\n\n  var n = 2\n  var nPrime = 0\n  while (nPrime < 64) {\n    if (isPrime(n)) {\n      K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3))\n      nPrime++\n    }\n\n    n++\n  }\n}()\n\nvar bytesToWords = function (bytes) {\n  var words = []\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n    words[b >>> 5] |= bytes[i] << (24 - b % 32)\n  }\n  return words\n}\n\nvar wordsToBytes = function (words) {\n  var bytes = []\n  for (var b = 0; b < words.length * 32; b += 8) {\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\n  }\n  return bytes\n}\n\n// Reusable object\nvar W = []\n\nvar processBlock = function (H, M, offset) {\n  // Working variables\n  var a = H[0], b = H[1], c = H[2], d = H[3]\n  var e = H[4], f = H[5], g = H[6], h = H[7]\n\n    // Computation\n  for (var i = 0; i < 64; i++) {\n    if (i < 16) {\n      W[i] = M[offset + i] | 0\n    } else {\n      var gamma0x = W[i - 15]\n      var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n                    ((gamma0x << 14) | (gamma0x >>> 18)) ^\n                    (gamma0x >>> 3)\n\n      var gamma1x = W[i - 2];\n      var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n                    ((gamma1x << 13) | (gamma1x >>> 19)) ^\n                    (gamma1x >>> 10)\n\n      W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n    }\n\n    var ch  = (e & f) ^ (~e & g);\n    var maj = (a & b) ^ (a & c) ^ (b & c);\n\n    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n    var t1 = h + sigma1 + ch + K[i] + W[i];\n    var t2 = sigma0 + maj;\n\n    h = g;\n    g = f;\n    f = e;\n    e = (d + t1) | 0;\n    d = c;\n    c = b;\n    b = a;\n    a = (t1 + t2) | 0;\n  }\n\n  // Intermediate hash value\n  H[0] = (H[0] + a) | 0;\n  H[1] = (H[1] + b) | 0;\n  H[2] = (H[2] + c) | 0;\n  H[3] = (H[3] + d) | 0;\n  H[4] = (H[4] + e) | 0;\n  H[5] = (H[5] + f) | 0;\n  H[6] = (H[6] + g) | 0;\n  H[7] = (H[7] + h) | 0;\n}\n\nfunction sha256(message, options) {;\n  if (message.constructor === String) {\n    message = _imports.convertString.UTF8.stringToBytes(message);\n  }\n\n  var H =[ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n           0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ];\n\n  var m = bytesToWords(message);\n  var l = message.length * 8;\n\n  m[l >> 5] |= 0x80 << (24 - l % 32);\n  m[((l + 64 >> 9) << 4) + 15] = l;\n\n  for (var i=0 ; i<m.length; i += 16) {\n    processBlock(H, m, i);\n  }\n\n  var digestbytes = wordsToBytes(H);\n  return options && options.asBytes ? digestbytes :\n         options && options.asString ? _imports.convertString.bytesToString(digestbytes) :\n         _imports.bytesToHex(digestbytes)\n}\n\nsha256.x2 = function(message, options) {\n  return sha256(sha256(message, { asBytes:true }), options)\n}\n\n}(this);\n","start":1667202701829,"end":1667202703151},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as sha256Module, exports as sha256 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sha256/lib/sha256.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/convert-hex/convert-hex.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/convert-string/convert-string.js?commonjs-wrapped\";\n\n(function (module) {\n\t!function(globals) {\n\t'use strict'\n\n\tvar _imports = {}\n\n\tif ('object' !== 'undefined' && module.exports) { //CommonJS\n\t  _imports.bytesToHex = require$$0().bytesToHex\n\t  _imports.convertString = require$$1()\n\t  module.exports = sha256\n\t} else {\n\t  _imports.bytesToHex = globals.convertHex.bytesToHex\n\t  _imports.convertString = globals.convertString\n\t  globals.sha256 = sha256\n\t}\n\n\t/*\n\tCryptoJS v3.1.2\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\n\t// Initialization round constants tables\n\tvar K = []\n\n\t// Compute constants\n\t!function () {\n\t  function isPrime(n) {\n\t    var sqrtN = Math.sqrt(n);\n\t    for (var factor = 2; factor <= sqrtN; factor++) {\n\t      if (!(n % factor)) return false\n\t    }\n\n\t    return true\n\t  }\n\n\t  function getFractionalBits(n) {\n\t    return ((n - (n | 0)) * 0x100000000) | 0\n\t  }\n\n\t  var n = 2\n\t  var nPrime = 0\n\t  while (nPrime < 64) {\n\t    if (isPrime(n)) {\n\t      K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3))\n\t      nPrime++\n\t    }\n\n\t    n++\n\t  }\n\t}()\n\n\tvar bytesToWords = function (bytes) {\n\t  var words = []\n\t  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n\t    words[b >>> 5] |= bytes[i] << (24 - b % 32)\n\t  }\n\t  return words\n\t}\n\n\tvar wordsToBytes = function (words) {\n\t  var bytes = []\n\t  for (var b = 0; b < words.length * 32; b += 8) {\n\t    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\n\t  }\n\t  return bytes\n\t}\n\n\t// Reusable object\n\tvar W = []\n\n\tvar processBlock = function (H, M, offset) {\n\t  // Working variables\n\t  var a = H[0], b = H[1], c = H[2], d = H[3]\n\t  var e = H[4], f = H[5], g = H[6], h = H[7]\n\n\t    // Computation\n\t  for (var i = 0; i < 64; i++) {\n\t    if (i < 16) {\n\t      W[i] = M[offset + i] | 0\n\t    } else {\n\t      var gamma0x = W[i - 15]\n\t      var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                    ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                    (gamma0x >>> 3)\n\n\t      var gamma1x = W[i - 2];\n\t      var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                    ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                    (gamma1x >>> 10)\n\n\t      W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t    }\n\n\t    var ch  = (e & f) ^ (~e & g);\n\t    var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t    var t1 = h + sigma1 + ch + K[i] + W[i];\n\t    var t2 = sigma0 + maj;\n\n\t    h = g;\n\t    g = f;\n\t    f = e;\n\t    e = (d + t1) | 0;\n\t    d = c;\n\t    c = b;\n\t    b = a;\n\t    a = (t1 + t2) | 0;\n\t  }\n\n\t  // Intermediate hash value\n\t  H[0] = (H[0] + a) | 0;\n\t  H[1] = (H[1] + b) | 0;\n\t  H[2] = (H[2] + c) | 0;\n\t  H[3] = (H[3] + d) | 0;\n\t  H[4] = (H[4] + e) | 0;\n\t  H[5] = (H[5] + f) | 0;\n\t  H[6] = (H[6] + g) | 0;\n\t  H[7] = (H[7] + h) | 0;\n\t}\n\n\tfunction sha256(message, options) {;\n\t  if (message.constructor === String) {\n\t    message = _imports.convertString.UTF8.stringToBytes(message);\n\t  }\n\n\t  var H =[ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n\t           0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ];\n\n\t  var m = bytesToWords(message);\n\t  var l = message.length * 8;\n\n\t  m[l >> 5] |= 0x80 << (24 - l % 32);\n\t  m[((l + 64 >> 9) << 4) + 15] = l;\n\n\t  for (var i=0 ; i<m.length; i += 16) {\n\t    processBlock(H, m, i);\n\t  }\n\n\t  var digestbytes = wordsToBytes(H);\n\t  return options && options.asBytes ? digestbytes :\n\t         options && options.asString ? _imports.convertString.bytesToString(digestbytes) :\n\t         _imports.bytesToHex(digestbytes)\n\t}\n\n\tsha256.x2 = function(message, options) {\n\t  return sha256(sha256(message, { asBytes:true }), options)\n\t}\n\n\t}(commonjsHelpers.commonjsGlobal);\n} (sha256Module));\n\nexport default sha256;\nexport { sha256 as __moduleExports };","start":1667202703152,"end":1667202703544,"order":"normal"},{"name":"node-polyfills","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as sha256Module, exports as sha256 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sha256/lib/sha256.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/convert-hex/convert-hex.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/convert-string/convert-string.js?commonjs-wrapped\";\n\n(function (module) {\n\t!function(globals) {\n\t'use strict'\n\n\tvar _imports = {}\n\n\tif ('object' !== 'undefined' && module.exports) { //CommonJS\n\t  _imports.bytesToHex = require$$0().bytesToHex\n\t  _imports.convertString = require$$1()\n\t  module.exports = sha256\n\t} else {\n\t  _imports.bytesToHex = globals.convertHex.bytesToHex\n\t  _imports.convertString = globals.convertString\n\t  globals.sha256 = sha256\n\t}\n\n\t/*\n\tCryptoJS v3.1.2\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\n\t// Initialization round constants tables\n\tvar K = []\n\n\t// Compute constants\n\t!function () {\n\t  function isPrime(n) {\n\t    var sqrtN = Math.sqrt(n);\n\t    for (var factor = 2; factor <= sqrtN; factor++) {\n\t      if (!(n % factor)) return false\n\t    }\n\n\t    return true\n\t  }\n\n\t  function getFractionalBits(n) {\n\t    return ((n - (n | 0)) * 0x100000000) | 0\n\t  }\n\n\t  var n = 2\n\t  var nPrime = 0\n\t  while (nPrime < 64) {\n\t    if (isPrime(n)) {\n\t      K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3))\n\t      nPrime++\n\t    }\n\n\t    n++\n\t  }\n\t}()\n\n\tvar bytesToWords = function (bytes) {\n\t  var words = []\n\t  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n\t    words[b >>> 5] |= bytes[i] << (24 - b % 32)\n\t  }\n\t  return words\n\t}\n\n\tvar wordsToBytes = function (words) {\n\t  var bytes = []\n\t  for (var b = 0; b < words.length * 32; b += 8) {\n\t    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\n\t  }\n\t  return bytes\n\t}\n\n\t// Reusable object\n\tvar W = []\n\n\tvar processBlock = function (H, M, offset) {\n\t  // Working variables\n\t  var a = H[0], b = H[1], c = H[2], d = H[3]\n\t  var e = H[4], f = H[5], g = H[6], h = H[7]\n\n\t    // Computation\n\t  for (var i = 0; i < 64; i++) {\n\t    if (i < 16) {\n\t      W[i] = M[offset + i] | 0\n\t    } else {\n\t      var gamma0x = W[i - 15]\n\t      var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                    ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                    (gamma0x >>> 3)\n\n\t      var gamma1x = W[i - 2];\n\t      var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                    ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                    (gamma1x >>> 10)\n\n\t      W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t    }\n\n\t    var ch  = (e & f) ^ (~e & g);\n\t    var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t    var t1 = h + sigma1 + ch + K[i] + W[i];\n\t    var t2 = sigma0 + maj;\n\n\t    h = g;\n\t    g = f;\n\t    f = e;\n\t    e = (d + t1) | 0;\n\t    d = c;\n\t    c = b;\n\t    b = a;\n\t    a = (t1 + t2) | 0;\n\t  }\n\n\t  // Intermediate hash value\n\t  H[0] = (H[0] + a) | 0;\n\t  H[1] = (H[1] + b) | 0;\n\t  H[2] = (H[2] + c) | 0;\n\t  H[3] = (H[3] + d) | 0;\n\t  H[4] = (H[4] + e) | 0;\n\t  H[5] = (H[5] + f) | 0;\n\t  H[6] = (H[6] + g) | 0;\n\t  H[7] = (H[7] + h) | 0;\n\t}\n\n\tfunction sha256(message, options) {;\n\t  if (message.constructor === String) {\n\t    message = _imports.convertString.UTF8.stringToBytes(message);\n\t  }\n\n\t  var H =[ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n\t           0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ];\n\n\t  var m = bytesToWords(message);\n\t  var l = message.length * 8;\n\n\t  m[l >> 5] |= 0x80 << (24 - l % 32);\n\t  m[((l + 64 >> 9) << 4) + 15] = l;\n\n\t  for (var i=0 ; i<m.length; i += 16) {\n\t    processBlock(H, m, i);\n\t  }\n\n\t  var digestbytes = wordsToBytes(H);\n\t  return options && options.asBytes ? digestbytes :\n\t         options && options.asString ? _imports.convertString.bytesToString(digestbytes) :\n\t         _imports.bytesToHex(digestbytes)\n\t}\n\n\tsha256.x2 = function(message, options) {\n\t  return sha256(sha256(message, { asBytes:true }), options)\n\t}\n\n\t}(commonjsHelpers.commonjsGlobal);\n} (sha256Module));\n\nexport default sha256;\nexport { sha256 as __moduleExports };","start":1667202703544,"end":1667202703550,"order":"normal"}]}
