{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/auto.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2018 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pem = require('./pem');\nvar ssh = require('./ssh');\nvar rfc4253 = require('./rfc4253');\nvar dnssec = require('./dnssec');\nvar putty = require('./putty');\n\nvar DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';\n\nfunction read(buf, options) {\n\tif (typeof (buf) === 'string') {\n\t\tif (buf.trim().match(/^[-]+[ ]*BEGIN/))\n\t\t\treturn (pem.read(buf, options));\n\t\tif (buf.match(/^\\s*ssh-[a-z]/))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (buf.match(/^\\s*ecdsa-/))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (buf.match(/^putty-user-key-file-2:/i))\n\t\t\treturn (putty.read(buf, options));\n\t\tif (findDNSSECHeader(buf))\n\t\t\treturn (dnssec.read(buf, options));\n\t\tbuf = Buffer.from(buf, 'binary');\n\t} else {\n\t\tassert.buffer(buf);\n\t\tif (findPEMHeader(buf))\n\t\t\treturn (pem.read(buf, options));\n\t\tif (findSSHHeader(buf))\n\t\t\treturn (ssh.read(buf, options));\n\t\tif (findPuTTYHeader(buf))\n\t\t\treturn (putty.read(buf, options));\n\t\tif (findDNSSECHeader(buf))\n\t\t\treturn (dnssec.read(buf, options));\n\t}\n\tif (buf.readUInt32BE(0) < buf.length)\n\t\treturn (rfc4253.read(buf, options));\n\tthrow (new Error('Failed to auto-detect format of key'));\n}\n\nfunction findPuTTYHeader(buf) {\n\tvar offset = 0;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t++offset;\n\tif (offset + 22 <= buf.length &&\n\t    buf.slice(offset, offset + 22).toString('ascii').toLowerCase() ===\n\t    'putty-user-key-file-2:')\n\t\treturn (true);\n\treturn (false);\n}\n\nfunction findSSHHeader(buf) {\n\tvar offset = 0;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t++offset;\n\tif (offset + 4 <= buf.length &&\n\t    buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')\n\t\treturn (true);\n\tif (offset + 6 <= buf.length &&\n\t    buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')\n\t\treturn (true);\n\treturn (false);\n}\n\nfunction findPEMHeader(buf) {\n\tvar offset = 0;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32 || buf[offset] === 10))\n\t\t++offset;\n\tif (buf[offset] !== 45)\n\t\treturn (false);\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 45))\n\t\t++offset;\n\twhile (offset < buf.length &&\n\t    (buf[offset] === 32))\n\t\t++offset;\n\tif (offset + 5 > buf.length ||\n\t    buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')\n\t\treturn (false);\n\treturn (true);\n}\n\nfunction findDNSSECHeader(buf) {\n\t// private case first\n\tif (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length)\n\t\treturn (false);\n\tvar headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n\tif (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX)\n\t\treturn (true);\n\n\t// public-key RFC3110 ?\n\t// 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n\t// skip any comment-lines\n\tif (typeof (buf) !== 'string') {\n\t\tbuf = buf.toString('ascii');\n\t}\n\tvar lines = buf.split('\\n');\n\tvar line = 0;\n\t/* JSSTYLED */\n\twhile (lines[line].match(/^\\;/))\n\t\tline++;\n\tif (lines[line].toString('ascii').match(/\\. IN KEY /))\n\t\treturn (true);\n\tif (lines[line].toString('ascii').match(/\\. IN DNSKEY /))\n\t\treturn (true);\n\treturn (false);\n}\n\nfunction write(key, options) {\n\tthrow (new Error('\"auto\" format cannot be used for writing'));\n}\n","start":1667202706596,"end":1667202706725},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/pem.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/ssh.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/rfc4253.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/dnssec.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/putty.js?commonjs-wrapped\";\n\nvar auto;\nvar hasRequiredAuto;\n\nfunction requireAuto () {\n\tif (hasRequiredAuto) return auto;\n\thasRequiredAuto = 1;\n\t// Copyright 2018 Joyent, Inc.\n\n\tauto = {\n\t\tread: read,\n\t\twrite: write\n\t};\n\n\tvar assert = require$$0();\n\tvar Buffer = require$$1().Buffer;\n\tvar utils = require$$2();\n\tvar Key = require$$3();\n\tvar PrivateKey = require$$4();\n\n\tvar pem = require$$5();\n\tvar ssh = require$$6();\n\tvar rfc4253 = require$$7();\n\tvar dnssec = require$$8();\n\tvar putty = require$$9();\n\n\tvar DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';\n\n\tfunction read(buf, options) {\n\t\tif (typeof (buf) === 'string') {\n\t\t\tif (buf.trim().match(/^[-]+[ ]*BEGIN/))\n\t\t\t\treturn (pem.read(buf, options));\n\t\t\tif (buf.match(/^\\s*ssh-[a-z]/))\n\t\t\t\treturn (ssh.read(buf, options));\n\t\t\tif (buf.match(/^\\s*ecdsa-/))\n\t\t\t\treturn (ssh.read(buf, options));\n\t\t\tif (buf.match(/^putty-user-key-file-2:/i))\n\t\t\t\treturn (putty.read(buf, options));\n\t\t\tif (findDNSSECHeader(buf))\n\t\t\t\treturn (dnssec.read(buf, options));\n\t\t\tbuf = Buffer.from(buf, 'binary');\n\t\t} else {\n\t\t\tassert.buffer(buf);\n\t\t\tif (findPEMHeader(buf))\n\t\t\t\treturn (pem.read(buf, options));\n\t\t\tif (findSSHHeader(buf))\n\t\t\t\treturn (ssh.read(buf, options));\n\t\t\tif (findPuTTYHeader(buf))\n\t\t\t\treturn (putty.read(buf, options));\n\t\t\tif (findDNSSECHeader(buf))\n\t\t\t\treturn (dnssec.read(buf, options));\n\t\t}\n\t\tif (buf.readUInt32BE(0) < buf.length)\n\t\t\treturn (rfc4253.read(buf, options));\n\t\tthrow (new Error('Failed to auto-detect format of key'));\n\t}\n\n\tfunction findPuTTYHeader(buf) {\n\t\tvar offset = 0;\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t\t++offset;\n\t\tif (offset + 22 <= buf.length &&\n\t\t    buf.slice(offset, offset + 22).toString('ascii').toLowerCase() ===\n\t\t    'putty-user-key-file-2:')\n\t\t\treturn (true);\n\t\treturn (false);\n\t}\n\n\tfunction findSSHHeader(buf) {\n\t\tvar offset = 0;\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t\t++offset;\n\t\tif (offset + 4 <= buf.length &&\n\t\t    buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')\n\t\t\treturn (true);\n\t\tif (offset + 6 <= buf.length &&\n\t\t    buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')\n\t\t\treturn (true);\n\t\treturn (false);\n\t}\n\n\tfunction findPEMHeader(buf) {\n\t\tvar offset = 0;\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 32 || buf[offset] === 10))\n\t\t\t++offset;\n\t\tif (buf[offset] !== 45)\n\t\t\treturn (false);\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 45))\n\t\t\t++offset;\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 32))\n\t\t\t++offset;\n\t\tif (offset + 5 > buf.length ||\n\t\t    buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')\n\t\t\treturn (false);\n\t\treturn (true);\n\t}\n\n\tfunction findDNSSECHeader(buf) {\n\t\t// private case first\n\t\tif (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length)\n\t\t\treturn (false);\n\t\tvar headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n\t\tif (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX)\n\t\t\treturn (true);\n\n\t\t// public-key RFC3110 ?\n\t\t// 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n\t\t// skip any comment-lines\n\t\tif (typeof (buf) !== 'string') {\n\t\t\tbuf = buf.toString('ascii');\n\t\t}\n\t\tvar lines = buf.split('\\n');\n\t\tvar line = 0;\n\t\t/* JSSTYLED */\n\t\twhile (lines[line].match(/^\\;/))\n\t\t\tline++;\n\t\tif (lines[line].toString('ascii').match(/\\. IN KEY /))\n\t\t\treturn (true);\n\t\tif (lines[line].toString('ascii').match(/\\. IN DNSKEY /))\n\t\t\treturn (true);\n\t\treturn (false);\n\t}\n\n\tfunction write(key, options) {\n\t\tthrow (new Error('\"auto\" format cannot be used for writing'));\n\t}\n\treturn auto;\n}\n\nexport { requireAuto as __require };","start":1667202706726,"end":1667202707938,"order":"normal"},{"name":"node-polyfills","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/pem.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/ssh.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/rfc4253.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/dnssec.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/putty.js?commonjs-wrapped\";\n\nvar auto;\nvar hasRequiredAuto;\n\nfunction requireAuto () {\n\tif (hasRequiredAuto) return auto;\n\thasRequiredAuto = 1;\n\t// Copyright 2018 Joyent, Inc.\n\n\tauto = {\n\t\tread: read,\n\t\twrite: write\n\t};\n\n\tvar assert = require$$0();\n\tvar Buffer = require$$1().Buffer;\n\tvar utils = require$$2();\n\tvar Key = require$$3();\n\tvar PrivateKey = require$$4();\n\n\tvar pem = require$$5();\n\tvar ssh = require$$6();\n\tvar rfc4253 = require$$7();\n\tvar dnssec = require$$8();\n\tvar putty = require$$9();\n\n\tvar DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';\n\n\tfunction read(buf, options) {\n\t\tif (typeof (buf) === 'string') {\n\t\t\tif (buf.trim().match(/^[-]+[ ]*BEGIN/))\n\t\t\t\treturn (pem.read(buf, options));\n\t\t\tif (buf.match(/^\\s*ssh-[a-z]/))\n\t\t\t\treturn (ssh.read(buf, options));\n\t\t\tif (buf.match(/^\\s*ecdsa-/))\n\t\t\t\treturn (ssh.read(buf, options));\n\t\t\tif (buf.match(/^putty-user-key-file-2:/i))\n\t\t\t\treturn (putty.read(buf, options));\n\t\t\tif (findDNSSECHeader(buf))\n\t\t\t\treturn (dnssec.read(buf, options));\n\t\t\tbuf = Buffer.from(buf, 'binary');\n\t\t} else {\n\t\t\tassert.buffer(buf);\n\t\t\tif (findPEMHeader(buf))\n\t\t\t\treturn (pem.read(buf, options));\n\t\t\tif (findSSHHeader(buf))\n\t\t\t\treturn (ssh.read(buf, options));\n\t\t\tif (findPuTTYHeader(buf))\n\t\t\t\treturn (putty.read(buf, options));\n\t\t\tif (findDNSSECHeader(buf))\n\t\t\t\treturn (dnssec.read(buf, options));\n\t\t}\n\t\tif (buf.readUInt32BE(0) < buf.length)\n\t\t\treturn (rfc4253.read(buf, options));\n\t\tthrow (new Error('Failed to auto-detect format of key'));\n\t}\n\n\tfunction findPuTTYHeader(buf) {\n\t\tvar offset = 0;\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t\t++offset;\n\t\tif (offset + 22 <= buf.length &&\n\t\t    buf.slice(offset, offset + 22).toString('ascii').toLowerCase() ===\n\t\t    'putty-user-key-file-2:')\n\t\t\treturn (true);\n\t\treturn (false);\n\t}\n\n\tfunction findSSHHeader(buf) {\n\t\tvar offset = 0;\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9))\n\t\t\t++offset;\n\t\tif (offset + 4 <= buf.length &&\n\t\t    buf.slice(offset, offset + 4).toString('ascii') === 'ssh-')\n\t\t\treturn (true);\n\t\tif (offset + 6 <= buf.length &&\n\t\t    buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-')\n\t\t\treturn (true);\n\t\treturn (false);\n\t}\n\n\tfunction findPEMHeader(buf) {\n\t\tvar offset = 0;\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 32 || buf[offset] === 10))\n\t\t\t++offset;\n\t\tif (buf[offset] !== 45)\n\t\t\treturn (false);\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 45))\n\t\t\t++offset;\n\t\twhile (offset < buf.length &&\n\t\t    (buf[offset] === 32))\n\t\t\t++offset;\n\t\tif (offset + 5 > buf.length ||\n\t\t    buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN')\n\t\t\treturn (false);\n\t\treturn (true);\n\t}\n\n\tfunction findDNSSECHeader(buf) {\n\t\t// private case first\n\t\tif (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length)\n\t\t\treturn (false);\n\t\tvar headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);\n\t\tif (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX)\n\t\t\treturn (true);\n\n\t\t// public-key RFC3110 ?\n\t\t// 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'\n\t\t// skip any comment-lines\n\t\tif (typeof (buf) !== 'string') {\n\t\t\tbuf = buf.toString('ascii');\n\t\t}\n\t\tvar lines = buf.split('\\n');\n\t\tvar line = 0;\n\t\t/* JSSTYLED */\n\t\twhile (lines[line].match(/^\\;/))\n\t\t\tline++;\n\t\tif (lines[line].toString('ascii').match(/\\. IN KEY /))\n\t\t\treturn (true);\n\t\tif (lines[line].toString('ascii').match(/\\. IN DNSKEY /))\n\t\t\treturn (true);\n\t\treturn (false);\n\t}\n\n\tfunction write(key, options) {\n\t\tthrow (new Error('\"auto\" format cannot be used for writing'));\n\t}\n\treturn auto;\n}\n\nexport { requireAuto as __require };","start":1667202707939,"end":1667202707943,"order":"normal"}]}
