{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/dhe.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tDiffieHellman: DiffieHellman,\n\tgenerateECDSA: generateECDSA,\n\tgenerateED25519: generateED25519\n};\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('./algs');\nvar utils = require('./utils');\nvar nacl = require('tweetnacl');\n\nvar Key = require('./key');\nvar PrivateKey = require('./private-key');\n\nvar CRYPTO_HAVE_ECDH = (crypto.createECDH !== undefined);\n\nvar ecdh = require('ecc-jsbn');\nvar ec = require('ecc-jsbn/lib/ec');\nvar jsbn = require('jsbn').BigInteger;\n\nfunction DiffieHellman(key) {\n\tutils.assertCompatible(key, Key, [1, 4], 'key');\n\tthis._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);\n\tthis._algo = key.type;\n\tthis._curve = key.curve;\n\tthis._key = key;\n\tif (key.type === 'dsa') {\n\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\tthrow (new Error('Due to bugs in the node 0.10 ' +\n\t\t\t    'crypto API, node 0.12.x or later is required ' +\n\t\t\t    'to use DH'));\n\t\t}\n\t\tthis._dh = crypto.createDiffieHellman(\n\t\t    key.part.p.data, undefined,\n\t\t    key.part.g.data, undefined);\n\t\tthis._p = key.part.p;\n\t\tthis._g = key.part.g;\n\t\tif (this._isPriv)\n\t\t\tthis._dh.setPrivateKey(key.part.x.data);\n\t\tthis._dh.setPublicKey(key.part.y.data);\n\n\t} else if (key.type === 'ecdsa') {\n\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\tthis._ecParams = new X9ECParameters(this._curve);\n\n\t\t\tif (this._isPriv) {\n\t\t\t\tthis._priv = new ECPrivate(\n\t\t\t\t    this._ecParams, key.part.d.data);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tvar curve = {\n\t\t\t'nistp256': 'prime256v1',\n\t\t\t'nistp384': 'secp384r1',\n\t\t\t'nistp521': 'secp521r1'\n\t\t}[key.curve];\n\t\tthis._dh = crypto.createECDH(curve);\n\t\tif (typeof (this._dh) !== 'object' ||\n\t\t    typeof (this._dh.setPrivateKey) !== 'function') {\n\t\t\tCRYPTO_HAVE_ECDH = false;\n\t\t\tDiffieHellman.call(this, key);\n\t\t\treturn;\n\t\t}\n\t\tif (this._isPriv)\n\t\t\tthis._dh.setPrivateKey(key.part.d.data);\n\t\tthis._dh.setPublicKey(key.part.Q.data);\n\n\t} else if (key.type === 'curve25519') {\n\t\tif (this._isPriv) {\n\t\t\tutils.assertCompatible(key, PrivateKey, [1, 5], 'key');\n\t\t\tthis._priv = key.part.k.data;\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('DH not supported for ' + key.type + ' keys'));\n\t}\n}\n\nDiffieHellman.prototype.getPublicKey = function () {\n\tif (this._isPriv)\n\t\treturn (this._key.toPublic());\n\treturn (this._key);\n};\n\nDiffieHellman.prototype.getPrivateKey = function () {\n\tif (this._isPriv)\n\t\treturn (this._key);\n\telse\n\t\treturn (undefined);\n};\nDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\n\nDiffieHellman.prototype._keyCheck = function (pk, isPub) {\n\tassert.object(pk, 'key');\n\tif (!isPub)\n\t\tutils.assertCompatible(pk, PrivateKey, [1, 3], 'key');\n\tutils.assertCompatible(pk, Key, [1, 4], 'key');\n\n\tif (pk.type !== this._algo) {\n\t\tthrow (new Error('A ' + pk.type + ' key cannot be used in ' +\n\t\t    this._algo + ' Diffie-Hellman'));\n\t}\n\n\tif (pk.curve !== this._curve) {\n\t\tthrow (new Error('A key from the ' + pk.curve + ' curve ' +\n\t\t    'cannot be used with a ' + this._curve +\n\t\t    ' Diffie-Hellman'));\n\t}\n\n\tif (pk.type === 'dsa') {\n\t\tassert.deepEqual(pk.part.p, this._p,\n\t\t    'DSA key prime does not match');\n\t\tassert.deepEqual(pk.part.g, this._g,\n\t\t    'DSA key generator does not match');\n\t}\n};\n\nDiffieHellman.prototype.setKey = function (pk) {\n\tthis._keyCheck(pk);\n\n\tif (pk.type === 'dsa') {\n\t\tthis._dh.setPrivateKey(pk.part.x.data);\n\t\tthis._dh.setPublicKey(pk.part.y.data);\n\n\t} else if (pk.type === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\tthis._dh.setPrivateKey(pk.part.d.data);\n\t\t\tthis._dh.setPublicKey(pk.part.Q.data);\n\t\t} else {\n\t\t\tthis._priv = new ECPrivate(\n\t\t\t    this._ecParams, pk.part.d.data);\n\t\t}\n\n\t} else if (pk.type === 'curve25519') {\n\t\tvar k = pk.part.k;\n\t\tif (!pk.part.k)\n\t\t\tk = pk.part.r;\n\t\tthis._priv = k.data;\n\t\tif (this._priv[0] === 0x00)\n\t\t\tthis._priv = this._priv.slice(1);\n\t\tthis._priv = this._priv.slice(0, 32);\n\t}\n\tthis._key = pk;\n\tthis._isPriv = true;\n};\nDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\n\nDiffieHellman.prototype.computeSecret = function (otherpk) {\n\tthis._keyCheck(otherpk, true);\n\tif (!this._isPriv)\n\t\tthrow (new Error('DH exchange has not been initialized with ' +\n\t\t    'a private key yet'));\n\n\tvar pub;\n\tif (this._algo === 'dsa') {\n\t\treturn (this._dh.computeSecret(\n\t\t    otherpk.part.y.data));\n\n\t} else if (this._algo === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\treturn (this._dh.computeSecret(\n\t\t\t    otherpk.part.Q.data));\n\t\t} else {\n\t\t\tpub = new ECPublic(\n\t\t\t    this._ecParams, otherpk.part.Q.data);\n\t\t\treturn (this._priv.deriveSharedSecret(pub));\n\t\t}\n\n\t} else if (this._algo === 'curve25519') {\n\t\tpub = otherpk.part.A.data;\n\t\twhile (pub[0] === 0x00 && pub.length > 32)\n\t\t\tpub = pub.slice(1);\n\t\tvar priv = this._priv;\n\t\tassert.strictEqual(pub.length, 32);\n\t\tassert.strictEqual(priv.length, 32);\n\n\t\tvar secret = nacl.box.before(new Uint8Array(pub),\n\t\t    new Uint8Array(priv));\n\n\t\treturn (Buffer.from(secret));\n\t}\n\n\tthrow (new Error('Invalid algorithm: ' + this._algo));\n};\n\nDiffieHellman.prototype.generateKey = function () {\n\tvar parts = [];\n\tvar priv, pub;\n\tif (this._algo === 'dsa') {\n\t\tthis._dh.generateKeys();\n\n\t\tparts.push({name: 'p', data: this._p.data});\n\t\tparts.push({name: 'q', data: this._key.part.q.data});\n\t\tparts.push({name: 'g', data: this._g.data});\n\t\tparts.push({name: 'y', data: this._dh.getPublicKey()});\n\t\tparts.push({name: 'x', data: this._dh.getPrivateKey()});\n\t\tthis._key = new PrivateKey({\n\t\t\ttype: 'dsa',\n\t\t\tparts: parts\n\t\t});\n\t\tthis._isPriv = true;\n\t\treturn (this._key);\n\n\t} else if (this._algo === 'ecdsa') {\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\tthis._dh.generateKeys();\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: Buffer.from(this._curve)});\n\t\t\tparts.push({name: 'Q', data: this._dh.getPublicKey()});\n\t\t\tparts.push({name: 'd', data: this._dh.getPrivateKey()});\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: this._curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\n\t\t} else {\n\t\t\tvar n = this._ecParams.getN();\n\t\t\tvar r = new jsbn(crypto.randomBytes(n.bitLength()));\n\t\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\t\tpriv = r.mod(n1).add(jsbn.ONE);\n\t\t\tpub = this._ecParams.getG().multiply(priv);\n\n\t\t\tpriv = Buffer.from(priv.toByteArray());\n\t\t\tpub = Buffer.from(this._ecParams.getCurve().\n\t\t\t    encodePointHex(pub), 'hex');\n\n\t\t\tthis._priv = new ECPrivate(this._ecParams, priv);\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: Buffer.from(this._curve)});\n\t\t\tparts.push({name: 'Q', data: pub});\n\t\t\tparts.push({name: 'd', data: priv});\n\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: this._curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\t\t}\n\n\t} else if (this._algo === 'curve25519') {\n\t\tvar pair = nacl.box.keyPair();\n\t\tpriv = Buffer.from(pair.secretKey);\n\t\tpub = Buffer.from(pair.publicKey);\n\t\tpriv = Buffer.concat([priv, pub]);\n\t\tassert.strictEqual(priv.length, 64);\n\t\tassert.strictEqual(pub.length, 32);\n\n\t\tparts.push({name: 'A', data: pub});\n\t\tparts.push({name: 'k', data: priv});\n\t\tthis._key = new PrivateKey({\n\t\t\ttype: 'curve25519',\n\t\t\tparts: parts\n\t\t});\n\t\tthis._isPriv = true;\n\t\treturn (this._key);\n\t}\n\n\tthrow (new Error('Invalid algorithm: ' + this._algo));\n};\nDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n\n/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */\n\nfunction X9ECParameters(name) {\n\tvar params = algs.curves[name];\n\tassert.object(params);\n\n\tvar p = new jsbn(params.p);\n\tvar a = new jsbn(params.a);\n\tvar b = new jsbn(params.b);\n\tvar n = new jsbn(params.n);\n\tvar h = jsbn.ONE;\n\tvar curve = new ec.ECCurveFp(p, a, b);\n\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\tthis.curve = curve;\n\tthis.g = G;\n\tthis.n = n;\n\tthis.h = h;\n}\nX9ECParameters.prototype.getCurve = function () { return (this.curve); };\nX9ECParameters.prototype.getG = function () { return (this.g); };\nX9ECParameters.prototype.getN = function () { return (this.n); };\nX9ECParameters.prototype.getH = function () { return (this.h); };\n\nfunction ECPublic(params, buffer) {\n\tthis._params = params;\n\tif (buffer[0] === 0x00)\n\t\tbuffer = buffer.slice(1);\n\tthis._pub = params.getCurve().decodePointHex(buffer.toString('hex'));\n}\n\nfunction ECPrivate(params, buffer) {\n\tthis._params = params;\n\tthis._priv = new jsbn(utils.mpNormalize(buffer));\n}\nECPrivate.prototype.deriveSharedSecret = function (pubKey) {\n\tassert.ok(pubKey instanceof ECPublic);\n\tvar S = pubKey._pub.multiply(this._priv);\n\treturn (Buffer.from(S.getX().toBigInteger().toByteArray()));\n};\n\nfunction generateED25519() {\n\tvar pair = nacl.sign.keyPair();\n\tvar priv = Buffer.from(pair.secretKey);\n\tvar pub = Buffer.from(pair.publicKey);\n\tassert.strictEqual(priv.length, 64);\n\tassert.strictEqual(pub.length, 32);\n\n\tvar parts = [];\n\tparts.push({name: 'A', data: pub});\n\tparts.push({name: 'k', data: priv.slice(0, 32)});\n\tvar key = new PrivateKey({\n\t\ttype: 'ed25519',\n\t\tparts: parts\n\t});\n\treturn (key);\n}\n\n/* Generates a new ECDSA private key on a given curve. */\nfunction generateECDSA(curve) {\n\tvar parts = [];\n\tvar key;\n\n\tif (CRYPTO_HAVE_ECDH) {\n\t\t/*\n\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t * ECDH instances can generate keys. It turns out this just\n\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t * read its output happily without doing an actual DH. So we\n\t\t * use that here.\n\t\t */\n\t\tvar osCurve = {\n\t\t\t'nistp256': 'prime256v1',\n\t\t\t'nistp384': 'secp384r1',\n\t\t\t'nistp521': 'secp521r1'\n\t\t}[curve];\n\n\t\tvar dh = crypto.createECDH(osCurve);\n\t\tdh.generateKeys();\n\n\t\tparts.push({name: 'curve',\n\t\t    data: Buffer.from(curve)});\n\t\tparts.push({name: 'Q', data: dh.getPublicKey()});\n\t\tparts.push({name: 'd', data: dh.getPrivateKey()});\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t} else {\n\n\t\tvar ecParams = new X9ECParameters(curve);\n\n\t\t/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */\n\t\tvar n = ecParams.getN();\n\t\t/*\n\t\t * The crypto.randomBytes() function can only give us whole\n\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t */\n\t\tvar cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n\t\tvar c = new jsbn(crypto.randomBytes(cByteLen));\n\n\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\tvar priv = c.mod(n1).add(jsbn.ONE);\n\t\tvar pub = ecParams.getG().multiply(priv);\n\n\t\tpriv = Buffer.from(priv.toByteArray());\n\t\tpub = Buffer.from(ecParams.getCurve().\n\t\t    encodePointHex(pub), 'hex');\n\n\t\tparts.push({name: 'curve', data: Buffer.from(curve)});\n\t\tparts.push({name: 'Q', data: pub});\n\t\tparts.push({name: 'd', data: priv});\n\n\t\tkey = new PrivateKey({\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t}\n}\n","start":1667202706594,"end":1667202706673},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/algs.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/tweetnacl/nacl-fast.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ecc-jsbn/index.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ecc-jsbn/lib/ec.js?commonjs-wrapped\";\nimport { __require as require$$10 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/jsbn/index.js?commonjs-wrapped\";\n\nvar dhe;\nvar hasRequiredDhe;\n\nfunction requireDhe () {\n\tif (hasRequiredDhe) return dhe;\n\thasRequiredDhe = 1;\n\t// Copyright 2017 Joyent, Inc.\n\n\tdhe = {\n\t\tDiffieHellman: DiffieHellman,\n\t\tgenerateECDSA: generateECDSA,\n\t\tgenerateED25519: generateED25519\n\t};\n\n\tvar assert = require$$0();\n\tvar crypto = require$$1;\n\tvar Buffer = require$$2().Buffer;\n\tvar algs = require$$3();\n\tvar utils = require$$4();\n\tvar nacl = require$$5();\n\n\tvar Key = require$$6();\n\tvar PrivateKey = require$$7();\n\n\tvar CRYPTO_HAVE_ECDH = (crypto.createECDH !== undefined);\n\n\tvar ecdh = require$$8();\n\tvar ec = require$$9();\n\tvar jsbn = require$$10().BigInteger;\n\n\tfunction DiffieHellman(key) {\n\t\tutils.assertCompatible(key, Key, [1, 4], 'key');\n\t\tthis._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);\n\t\tthis._algo = key.type;\n\t\tthis._curve = key.curve;\n\t\tthis._key = key;\n\t\tif (key.type === 'dsa') {\n\t\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\t\tthrow (new Error('Due to bugs in the node 0.10 ' +\n\t\t\t\t    'crypto API, node 0.12.x or later is required ' +\n\t\t\t\t    'to use DH'));\n\t\t\t}\n\t\t\tthis._dh = crypto.createDiffieHellman(\n\t\t\t    key.part.p.data, undefined,\n\t\t\t    key.part.g.data, undefined);\n\t\t\tthis._p = key.part.p;\n\t\t\tthis._g = key.part.g;\n\t\t\tif (this._isPriv)\n\t\t\t\tthis._dh.setPrivateKey(key.part.x.data);\n\t\t\tthis._dh.setPublicKey(key.part.y.data);\n\n\t\t} else if (key.type === 'ecdsa') {\n\t\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\t\tthis._ecParams = new X9ECParameters(this._curve);\n\n\t\t\t\tif (this._isPriv) {\n\t\t\t\t\tthis._priv = new ECPrivate(\n\t\t\t\t\t    this._ecParams, key.part.d.data);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar curve = {\n\t\t\t\t'nistp256': 'prime256v1',\n\t\t\t\t'nistp384': 'secp384r1',\n\t\t\t\t'nistp521': 'secp521r1'\n\t\t\t}[key.curve];\n\t\t\tthis._dh = crypto.createECDH(curve);\n\t\t\tif (typeof (this._dh) !== 'object' ||\n\t\t\t    typeof (this._dh.setPrivateKey) !== 'function') {\n\t\t\t\tCRYPTO_HAVE_ECDH = false;\n\t\t\t\tDiffieHellman.call(this, key);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._isPriv)\n\t\t\t\tthis._dh.setPrivateKey(key.part.d.data);\n\t\t\tthis._dh.setPublicKey(key.part.Q.data);\n\n\t\t} else if (key.type === 'curve25519') {\n\t\t\tif (this._isPriv) {\n\t\t\t\tutils.assertCompatible(key, PrivateKey, [1, 5], 'key');\n\t\t\t\tthis._priv = key.part.k.data;\n\t\t\t}\n\n\t\t} else {\n\t\t\tthrow (new Error('DH not supported for ' + key.type + ' keys'));\n\t\t}\n\t}\n\n\tDiffieHellman.prototype.getPublicKey = function () {\n\t\tif (this._isPriv)\n\t\t\treturn (this._key.toPublic());\n\t\treturn (this._key);\n\t};\n\n\tDiffieHellman.prototype.getPrivateKey = function () {\n\t\tif (this._isPriv)\n\t\t\treturn (this._key);\n\t\telse\n\t\t\treturn (undefined);\n\t};\n\tDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\n\n\tDiffieHellman.prototype._keyCheck = function (pk, isPub) {\n\t\tassert.object(pk, 'key');\n\t\tif (!isPub)\n\t\t\tutils.assertCompatible(pk, PrivateKey, [1, 3], 'key');\n\t\tutils.assertCompatible(pk, Key, [1, 4], 'key');\n\n\t\tif (pk.type !== this._algo) {\n\t\t\tthrow (new Error('A ' + pk.type + ' key cannot be used in ' +\n\t\t\t    this._algo + ' Diffie-Hellman'));\n\t\t}\n\n\t\tif (pk.curve !== this._curve) {\n\t\t\tthrow (new Error('A key from the ' + pk.curve + ' curve ' +\n\t\t\t    'cannot be used with a ' + this._curve +\n\t\t\t    ' Diffie-Hellman'));\n\t\t}\n\n\t\tif (pk.type === 'dsa') {\n\t\t\tassert.deepEqual(pk.part.p, this._p,\n\t\t\t    'DSA key prime does not match');\n\t\t\tassert.deepEqual(pk.part.g, this._g,\n\t\t\t    'DSA key generator does not match');\n\t\t}\n\t};\n\n\tDiffieHellman.prototype.setKey = function (pk) {\n\t\tthis._keyCheck(pk);\n\n\t\tif (pk.type === 'dsa') {\n\t\t\tthis._dh.setPrivateKey(pk.part.x.data);\n\t\t\tthis._dh.setPublicKey(pk.part.y.data);\n\n\t\t} else if (pk.type === 'ecdsa') {\n\t\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\t\tthis._dh.setPrivateKey(pk.part.d.data);\n\t\t\t\tthis._dh.setPublicKey(pk.part.Q.data);\n\t\t\t} else {\n\t\t\t\tthis._priv = new ECPrivate(\n\t\t\t\t    this._ecParams, pk.part.d.data);\n\t\t\t}\n\n\t\t} else if (pk.type === 'curve25519') {\n\t\t\tvar k = pk.part.k;\n\t\t\tif (!pk.part.k)\n\t\t\t\tk = pk.part.r;\n\t\t\tthis._priv = k.data;\n\t\t\tif (this._priv[0] === 0x00)\n\t\t\t\tthis._priv = this._priv.slice(1);\n\t\t\tthis._priv = this._priv.slice(0, 32);\n\t\t}\n\t\tthis._key = pk;\n\t\tthis._isPriv = true;\n\t};\n\tDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\n\n\tDiffieHellman.prototype.computeSecret = function (otherpk) {\n\t\tthis._keyCheck(otherpk, true);\n\t\tif (!this._isPriv)\n\t\t\tthrow (new Error('DH exchange has not been initialized with ' +\n\t\t\t    'a private key yet'));\n\n\t\tvar pub;\n\t\tif (this._algo === 'dsa') {\n\t\t\treturn (this._dh.computeSecret(\n\t\t\t    otherpk.part.y.data));\n\n\t\t} else if (this._algo === 'ecdsa') {\n\t\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\t\treturn (this._dh.computeSecret(\n\t\t\t\t    otherpk.part.Q.data));\n\t\t\t} else {\n\t\t\t\tpub = new ECPublic(\n\t\t\t\t    this._ecParams, otherpk.part.Q.data);\n\t\t\t\treturn (this._priv.deriveSharedSecret(pub));\n\t\t\t}\n\n\t\t} else if (this._algo === 'curve25519') {\n\t\t\tpub = otherpk.part.A.data;\n\t\t\twhile (pub[0] === 0x00 && pub.length > 32)\n\t\t\t\tpub = pub.slice(1);\n\t\t\tvar priv = this._priv;\n\t\t\tassert.strictEqual(pub.length, 32);\n\t\t\tassert.strictEqual(priv.length, 32);\n\n\t\t\tvar secret = nacl.box.before(new Uint8Array(pub),\n\t\t\t    new Uint8Array(priv));\n\n\t\t\treturn (Buffer.from(secret));\n\t\t}\n\n\t\tthrow (new Error('Invalid algorithm: ' + this._algo));\n\t};\n\n\tDiffieHellman.prototype.generateKey = function () {\n\t\tvar parts = [];\n\t\tvar priv, pub;\n\t\tif (this._algo === 'dsa') {\n\t\t\tthis._dh.generateKeys();\n\n\t\t\tparts.push({name: 'p', data: this._p.data});\n\t\t\tparts.push({name: 'q', data: this._key.part.q.data});\n\t\t\tparts.push({name: 'g', data: this._g.data});\n\t\t\tparts.push({name: 'y', data: this._dh.getPublicKey()});\n\t\t\tparts.push({name: 'x', data: this._dh.getPrivateKey()});\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'dsa',\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\n\t\t} else if (this._algo === 'ecdsa') {\n\t\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\t\tthis._dh.generateKeys();\n\n\t\t\t\tparts.push({name: 'curve',\n\t\t\t\t    data: Buffer.from(this._curve)});\n\t\t\t\tparts.push({name: 'Q', data: this._dh.getPublicKey()});\n\t\t\t\tparts.push({name: 'd', data: this._dh.getPrivateKey()});\n\t\t\t\tthis._key = new PrivateKey({\n\t\t\t\t\ttype: 'ecdsa',\n\t\t\t\t\tcurve: this._curve,\n\t\t\t\t\tparts: parts\n\t\t\t\t});\n\t\t\t\tthis._isPriv = true;\n\t\t\t\treturn (this._key);\n\n\t\t\t} else {\n\t\t\t\tvar n = this._ecParams.getN();\n\t\t\t\tvar r = new jsbn(crypto.randomBytes(n.bitLength()));\n\t\t\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\t\t\tpriv = r.mod(n1).add(jsbn.ONE);\n\t\t\t\tpub = this._ecParams.getG().multiply(priv);\n\n\t\t\t\tpriv = Buffer.from(priv.toByteArray());\n\t\t\t\tpub = Buffer.from(this._ecParams.getCurve().\n\t\t\t\t    encodePointHex(pub), 'hex');\n\n\t\t\t\tthis._priv = new ECPrivate(this._ecParams, priv);\n\n\t\t\t\tparts.push({name: 'curve',\n\t\t\t\t    data: Buffer.from(this._curve)});\n\t\t\t\tparts.push({name: 'Q', data: pub});\n\t\t\t\tparts.push({name: 'd', data: priv});\n\n\t\t\t\tthis._key = new PrivateKey({\n\t\t\t\t\ttype: 'ecdsa',\n\t\t\t\t\tcurve: this._curve,\n\t\t\t\t\tparts: parts\n\t\t\t\t});\n\t\t\t\tthis._isPriv = true;\n\t\t\t\treturn (this._key);\n\t\t\t}\n\n\t\t} else if (this._algo === 'curve25519') {\n\t\t\tvar pair = nacl.box.keyPair();\n\t\t\tpriv = Buffer.from(pair.secretKey);\n\t\t\tpub = Buffer.from(pair.publicKey);\n\t\t\tpriv = Buffer.concat([priv, pub]);\n\t\t\tassert.strictEqual(priv.length, 64);\n\t\t\tassert.strictEqual(pub.length, 32);\n\n\t\t\tparts.push({name: 'A', data: pub});\n\t\t\tparts.push({name: 'k', data: priv});\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'curve25519',\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\t\t}\n\n\t\tthrow (new Error('Invalid algorithm: ' + this._algo));\n\t};\n\tDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n\n\t/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */\n\n\tfunction X9ECParameters(name) {\n\t\tvar params = algs.curves[name];\n\t\tassert.object(params);\n\n\t\tvar p = new jsbn(params.p);\n\t\tvar a = new jsbn(params.a);\n\t\tvar b = new jsbn(params.b);\n\t\tvar n = new jsbn(params.n);\n\t\tvar h = jsbn.ONE;\n\t\tvar curve = new ec.ECCurveFp(p, a, b);\n\t\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\t\tthis.curve = curve;\n\t\tthis.g = G;\n\t\tthis.n = n;\n\t\tthis.h = h;\n\t}\n\tX9ECParameters.prototype.getCurve = function () { return (this.curve); };\n\tX9ECParameters.prototype.getG = function () { return (this.g); };\n\tX9ECParameters.prototype.getN = function () { return (this.n); };\n\tX9ECParameters.prototype.getH = function () { return (this.h); };\n\n\tfunction ECPublic(params, buffer) {\n\t\tthis._params = params;\n\t\tif (buffer[0] === 0x00)\n\t\t\tbuffer = buffer.slice(1);\n\t\tthis._pub = params.getCurve().decodePointHex(buffer.toString('hex'));\n\t}\n\n\tfunction ECPrivate(params, buffer) {\n\t\tthis._params = params;\n\t\tthis._priv = new jsbn(utils.mpNormalize(buffer));\n\t}\n\tECPrivate.prototype.deriveSharedSecret = function (pubKey) {\n\t\tassert.ok(pubKey instanceof ECPublic);\n\t\tvar S = pubKey._pub.multiply(this._priv);\n\t\treturn (Buffer.from(S.getX().toBigInteger().toByteArray()));\n\t};\n\n\tfunction generateED25519() {\n\t\tvar pair = nacl.sign.keyPair();\n\t\tvar priv = Buffer.from(pair.secretKey);\n\t\tvar pub = Buffer.from(pair.publicKey);\n\t\tassert.strictEqual(priv.length, 64);\n\t\tassert.strictEqual(pub.length, 32);\n\n\t\tvar parts = [];\n\t\tparts.push({name: 'A', data: pub});\n\t\tparts.push({name: 'k', data: priv.slice(0, 32)});\n\t\tvar key = new PrivateKey({\n\t\t\ttype: 'ed25519',\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t}\n\n\t/* Generates a new ECDSA private key on a given curve. */\n\tfunction generateECDSA(curve) {\n\t\tvar parts = [];\n\t\tvar key;\n\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\t/*\n\t\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t\t * ECDH instances can generate keys. It turns out this just\n\t\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t\t * read its output happily without doing an actual DH. So we\n\t\t\t * use that here.\n\t\t\t */\n\t\t\tvar osCurve = {\n\t\t\t\t'nistp256': 'prime256v1',\n\t\t\t\t'nistp384': 'secp384r1',\n\t\t\t\t'nistp521': 'secp521r1'\n\t\t\t}[curve];\n\n\t\t\tvar dh = crypto.createECDH(osCurve);\n\t\t\tdh.generateKeys();\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: Buffer.from(curve)});\n\t\t\tparts.push({name: 'Q', data: dh.getPublicKey()});\n\t\t\tparts.push({name: 'd', data: dh.getPrivateKey()});\n\n\t\t\tkey = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\treturn (key);\n\t\t} else {\n\n\t\t\tvar ecParams = new X9ECParameters(curve);\n\n\t\t\t/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */\n\t\t\tvar n = ecParams.getN();\n\t\t\t/*\n\t\t\t * The crypto.randomBytes() function can only give us whole\n\t\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t\t */\n\t\t\tvar cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n\t\t\tvar c = new jsbn(crypto.randomBytes(cByteLen));\n\n\t\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\t\tvar priv = c.mod(n1).add(jsbn.ONE);\n\t\t\tvar pub = ecParams.getG().multiply(priv);\n\n\t\t\tpriv = Buffer.from(priv.toByteArray());\n\t\t\tpub = Buffer.from(ecParams.getCurve().\n\t\t\t    encodePointHex(pub), 'hex');\n\n\t\t\tparts.push({name: 'curve', data: Buffer.from(curve)});\n\t\t\tparts.push({name: 'Q', data: pub});\n\t\t\tparts.push({name: 'd', data: priv});\n\n\t\t\tkey = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\treturn (key);\n\t\t}\n\t}\n\treturn dhe;\n}\n\nexport { requireDhe as __require };","start":1667202706673,"end":1667202707660,"order":"normal"},{"name":"node-polyfills","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/algs.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/tweetnacl/nacl-fast.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ecc-jsbn/index.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ecc-jsbn/lib/ec.js?commonjs-wrapped\";\nimport { __require as require$$10 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/jsbn/index.js?commonjs-wrapped\";\n\nvar dhe;\nvar hasRequiredDhe;\n\nfunction requireDhe () {\n\tif (hasRequiredDhe) return dhe;\n\thasRequiredDhe = 1;\n\t// Copyright 2017 Joyent, Inc.\n\n\tdhe = {\n\t\tDiffieHellman: DiffieHellman,\n\t\tgenerateECDSA: generateECDSA,\n\t\tgenerateED25519: generateED25519\n\t};\n\n\tvar assert = require$$0();\n\tvar crypto = require$$1;\n\tvar Buffer = require$$2().Buffer;\n\tvar algs = require$$3();\n\tvar utils = require$$4();\n\tvar nacl = require$$5();\n\n\tvar Key = require$$6();\n\tvar PrivateKey = require$$7();\n\n\tvar CRYPTO_HAVE_ECDH = (crypto.createECDH !== undefined);\n\n\tvar ecdh = require$$8();\n\tvar ec = require$$9();\n\tvar jsbn = require$$10().BigInteger;\n\n\tfunction DiffieHellman(key) {\n\t\tutils.assertCompatible(key, Key, [1, 4], 'key');\n\t\tthis._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);\n\t\tthis._algo = key.type;\n\t\tthis._curve = key.curve;\n\t\tthis._key = key;\n\t\tif (key.type === 'dsa') {\n\t\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\t\tthrow (new Error('Due to bugs in the node 0.10 ' +\n\t\t\t\t    'crypto API, node 0.12.x or later is required ' +\n\t\t\t\t    'to use DH'));\n\t\t\t}\n\t\t\tthis._dh = crypto.createDiffieHellman(\n\t\t\t    key.part.p.data, undefined,\n\t\t\t    key.part.g.data, undefined);\n\t\t\tthis._p = key.part.p;\n\t\t\tthis._g = key.part.g;\n\t\t\tif (this._isPriv)\n\t\t\t\tthis._dh.setPrivateKey(key.part.x.data);\n\t\t\tthis._dh.setPublicKey(key.part.y.data);\n\n\t\t} else if (key.type === 'ecdsa') {\n\t\t\tif (!CRYPTO_HAVE_ECDH) {\n\t\t\t\tthis._ecParams = new X9ECParameters(this._curve);\n\n\t\t\t\tif (this._isPriv) {\n\t\t\t\t\tthis._priv = new ECPrivate(\n\t\t\t\t\t    this._ecParams, key.part.d.data);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar curve = {\n\t\t\t\t'nistp256': 'prime256v1',\n\t\t\t\t'nistp384': 'secp384r1',\n\t\t\t\t'nistp521': 'secp521r1'\n\t\t\t}[key.curve];\n\t\t\tthis._dh = crypto.createECDH(curve);\n\t\t\tif (typeof (this._dh) !== 'object' ||\n\t\t\t    typeof (this._dh.setPrivateKey) !== 'function') {\n\t\t\t\tCRYPTO_HAVE_ECDH = false;\n\t\t\t\tDiffieHellman.call(this, key);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._isPriv)\n\t\t\t\tthis._dh.setPrivateKey(key.part.d.data);\n\t\t\tthis._dh.setPublicKey(key.part.Q.data);\n\n\t\t} else if (key.type === 'curve25519') {\n\t\t\tif (this._isPriv) {\n\t\t\t\tutils.assertCompatible(key, PrivateKey, [1, 5], 'key');\n\t\t\t\tthis._priv = key.part.k.data;\n\t\t\t}\n\n\t\t} else {\n\t\t\tthrow (new Error('DH not supported for ' + key.type + ' keys'));\n\t\t}\n\t}\n\n\tDiffieHellman.prototype.getPublicKey = function () {\n\t\tif (this._isPriv)\n\t\t\treturn (this._key.toPublic());\n\t\treturn (this._key);\n\t};\n\n\tDiffieHellman.prototype.getPrivateKey = function () {\n\t\tif (this._isPriv)\n\t\t\treturn (this._key);\n\t\telse\n\t\t\treturn (undefined);\n\t};\n\tDiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;\n\n\tDiffieHellman.prototype._keyCheck = function (pk, isPub) {\n\t\tassert.object(pk, 'key');\n\t\tif (!isPub)\n\t\t\tutils.assertCompatible(pk, PrivateKey, [1, 3], 'key');\n\t\tutils.assertCompatible(pk, Key, [1, 4], 'key');\n\n\t\tif (pk.type !== this._algo) {\n\t\t\tthrow (new Error('A ' + pk.type + ' key cannot be used in ' +\n\t\t\t    this._algo + ' Diffie-Hellman'));\n\t\t}\n\n\t\tif (pk.curve !== this._curve) {\n\t\t\tthrow (new Error('A key from the ' + pk.curve + ' curve ' +\n\t\t\t    'cannot be used with a ' + this._curve +\n\t\t\t    ' Diffie-Hellman'));\n\t\t}\n\n\t\tif (pk.type === 'dsa') {\n\t\t\tassert.deepEqual(pk.part.p, this._p,\n\t\t\t    'DSA key prime does not match');\n\t\t\tassert.deepEqual(pk.part.g, this._g,\n\t\t\t    'DSA key generator does not match');\n\t\t}\n\t};\n\n\tDiffieHellman.prototype.setKey = function (pk) {\n\t\tthis._keyCheck(pk);\n\n\t\tif (pk.type === 'dsa') {\n\t\t\tthis._dh.setPrivateKey(pk.part.x.data);\n\t\t\tthis._dh.setPublicKey(pk.part.y.data);\n\n\t\t} else if (pk.type === 'ecdsa') {\n\t\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\t\tthis._dh.setPrivateKey(pk.part.d.data);\n\t\t\t\tthis._dh.setPublicKey(pk.part.Q.data);\n\t\t\t} else {\n\t\t\t\tthis._priv = new ECPrivate(\n\t\t\t\t    this._ecParams, pk.part.d.data);\n\t\t\t}\n\n\t\t} else if (pk.type === 'curve25519') {\n\t\t\tvar k = pk.part.k;\n\t\t\tif (!pk.part.k)\n\t\t\t\tk = pk.part.r;\n\t\t\tthis._priv = k.data;\n\t\t\tif (this._priv[0] === 0x00)\n\t\t\t\tthis._priv = this._priv.slice(1);\n\t\t\tthis._priv = this._priv.slice(0, 32);\n\t\t}\n\t\tthis._key = pk;\n\t\tthis._isPriv = true;\n\t};\n\tDiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;\n\n\tDiffieHellman.prototype.computeSecret = function (otherpk) {\n\t\tthis._keyCheck(otherpk, true);\n\t\tif (!this._isPriv)\n\t\t\tthrow (new Error('DH exchange has not been initialized with ' +\n\t\t\t    'a private key yet'));\n\n\t\tvar pub;\n\t\tif (this._algo === 'dsa') {\n\t\t\treturn (this._dh.computeSecret(\n\t\t\t    otherpk.part.y.data));\n\n\t\t} else if (this._algo === 'ecdsa') {\n\t\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\t\treturn (this._dh.computeSecret(\n\t\t\t\t    otherpk.part.Q.data));\n\t\t\t} else {\n\t\t\t\tpub = new ECPublic(\n\t\t\t\t    this._ecParams, otherpk.part.Q.data);\n\t\t\t\treturn (this._priv.deriveSharedSecret(pub));\n\t\t\t}\n\n\t\t} else if (this._algo === 'curve25519') {\n\t\t\tpub = otherpk.part.A.data;\n\t\t\twhile (pub[0] === 0x00 && pub.length > 32)\n\t\t\t\tpub = pub.slice(1);\n\t\t\tvar priv = this._priv;\n\t\t\tassert.strictEqual(pub.length, 32);\n\t\t\tassert.strictEqual(priv.length, 32);\n\n\t\t\tvar secret = nacl.box.before(new Uint8Array(pub),\n\t\t\t    new Uint8Array(priv));\n\n\t\t\treturn (Buffer.from(secret));\n\t\t}\n\n\t\tthrow (new Error('Invalid algorithm: ' + this._algo));\n\t};\n\n\tDiffieHellman.prototype.generateKey = function () {\n\t\tvar parts = [];\n\t\tvar priv, pub;\n\t\tif (this._algo === 'dsa') {\n\t\t\tthis._dh.generateKeys();\n\n\t\t\tparts.push({name: 'p', data: this._p.data});\n\t\t\tparts.push({name: 'q', data: this._key.part.q.data});\n\t\t\tparts.push({name: 'g', data: this._g.data});\n\t\t\tparts.push({name: 'y', data: this._dh.getPublicKey()});\n\t\t\tparts.push({name: 'x', data: this._dh.getPrivateKey()});\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'dsa',\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\n\t\t} else if (this._algo === 'ecdsa') {\n\t\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\t\tthis._dh.generateKeys();\n\n\t\t\t\tparts.push({name: 'curve',\n\t\t\t\t    data: Buffer.from(this._curve)});\n\t\t\t\tparts.push({name: 'Q', data: this._dh.getPublicKey()});\n\t\t\t\tparts.push({name: 'd', data: this._dh.getPrivateKey()});\n\t\t\t\tthis._key = new PrivateKey({\n\t\t\t\t\ttype: 'ecdsa',\n\t\t\t\t\tcurve: this._curve,\n\t\t\t\t\tparts: parts\n\t\t\t\t});\n\t\t\t\tthis._isPriv = true;\n\t\t\t\treturn (this._key);\n\n\t\t\t} else {\n\t\t\t\tvar n = this._ecParams.getN();\n\t\t\t\tvar r = new jsbn(crypto.randomBytes(n.bitLength()));\n\t\t\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\t\t\tpriv = r.mod(n1).add(jsbn.ONE);\n\t\t\t\tpub = this._ecParams.getG().multiply(priv);\n\n\t\t\t\tpriv = Buffer.from(priv.toByteArray());\n\t\t\t\tpub = Buffer.from(this._ecParams.getCurve().\n\t\t\t\t    encodePointHex(pub), 'hex');\n\n\t\t\t\tthis._priv = new ECPrivate(this._ecParams, priv);\n\n\t\t\t\tparts.push({name: 'curve',\n\t\t\t\t    data: Buffer.from(this._curve)});\n\t\t\t\tparts.push({name: 'Q', data: pub});\n\t\t\t\tparts.push({name: 'd', data: priv});\n\n\t\t\t\tthis._key = new PrivateKey({\n\t\t\t\t\ttype: 'ecdsa',\n\t\t\t\t\tcurve: this._curve,\n\t\t\t\t\tparts: parts\n\t\t\t\t});\n\t\t\t\tthis._isPriv = true;\n\t\t\t\treturn (this._key);\n\t\t\t}\n\n\t\t} else if (this._algo === 'curve25519') {\n\t\t\tvar pair = nacl.box.keyPair();\n\t\t\tpriv = Buffer.from(pair.secretKey);\n\t\t\tpub = Buffer.from(pair.publicKey);\n\t\t\tpriv = Buffer.concat([priv, pub]);\n\t\t\tassert.strictEqual(priv.length, 64);\n\t\t\tassert.strictEqual(pub.length, 32);\n\n\t\t\tparts.push({name: 'A', data: pub});\n\t\t\tparts.push({name: 'k', data: priv});\n\t\t\tthis._key = new PrivateKey({\n\t\t\t\ttype: 'curve25519',\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\tthis._isPriv = true;\n\t\t\treturn (this._key);\n\t\t}\n\n\t\tthrow (new Error('Invalid algorithm: ' + this._algo));\n\t};\n\tDiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;\n\n\t/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */\n\n\tfunction X9ECParameters(name) {\n\t\tvar params = algs.curves[name];\n\t\tassert.object(params);\n\n\t\tvar p = new jsbn(params.p);\n\t\tvar a = new jsbn(params.a);\n\t\tvar b = new jsbn(params.b);\n\t\tvar n = new jsbn(params.n);\n\t\tvar h = jsbn.ONE;\n\t\tvar curve = new ec.ECCurveFp(p, a, b);\n\t\tvar G = curve.decodePointHex(params.G.toString('hex'));\n\n\t\tthis.curve = curve;\n\t\tthis.g = G;\n\t\tthis.n = n;\n\t\tthis.h = h;\n\t}\n\tX9ECParameters.prototype.getCurve = function () { return (this.curve); };\n\tX9ECParameters.prototype.getG = function () { return (this.g); };\n\tX9ECParameters.prototype.getN = function () { return (this.n); };\n\tX9ECParameters.prototype.getH = function () { return (this.h); };\n\n\tfunction ECPublic(params, buffer) {\n\t\tthis._params = params;\n\t\tif (buffer[0] === 0x00)\n\t\t\tbuffer = buffer.slice(1);\n\t\tthis._pub = params.getCurve().decodePointHex(buffer.toString('hex'));\n\t}\n\n\tfunction ECPrivate(params, buffer) {\n\t\tthis._params = params;\n\t\tthis._priv = new jsbn(utils.mpNormalize(buffer));\n\t}\n\tECPrivate.prototype.deriveSharedSecret = function (pubKey) {\n\t\tassert.ok(pubKey instanceof ECPublic);\n\t\tvar S = pubKey._pub.multiply(this._priv);\n\t\treturn (Buffer.from(S.getX().toBigInteger().toByteArray()));\n\t};\n\n\tfunction generateED25519() {\n\t\tvar pair = nacl.sign.keyPair();\n\t\tvar priv = Buffer.from(pair.secretKey);\n\t\tvar pub = Buffer.from(pair.publicKey);\n\t\tassert.strictEqual(priv.length, 64);\n\t\tassert.strictEqual(pub.length, 32);\n\n\t\tvar parts = [];\n\t\tparts.push({name: 'A', data: pub});\n\t\tparts.push({name: 'k', data: priv.slice(0, 32)});\n\t\tvar key = new PrivateKey({\n\t\t\ttype: 'ed25519',\n\t\t\tparts: parts\n\t\t});\n\t\treturn (key);\n\t}\n\n\t/* Generates a new ECDSA private key on a given curve. */\n\tfunction generateECDSA(curve) {\n\t\tvar parts = [];\n\t\tvar key;\n\n\t\tif (CRYPTO_HAVE_ECDH) {\n\t\t\t/*\n\t\t\t * Node crypto doesn't expose key generation directly, but the\n\t\t\t * ECDH instances can generate keys. It turns out this just\n\t\t\t * calls into the OpenSSL generic key generator, and we can\n\t\t\t * read its output happily without doing an actual DH. So we\n\t\t\t * use that here.\n\t\t\t */\n\t\t\tvar osCurve = {\n\t\t\t\t'nistp256': 'prime256v1',\n\t\t\t\t'nistp384': 'secp384r1',\n\t\t\t\t'nistp521': 'secp521r1'\n\t\t\t}[curve];\n\n\t\t\tvar dh = crypto.createECDH(osCurve);\n\t\t\tdh.generateKeys();\n\n\t\t\tparts.push({name: 'curve',\n\t\t\t    data: Buffer.from(curve)});\n\t\t\tparts.push({name: 'Q', data: dh.getPublicKey()});\n\t\t\tparts.push({name: 'd', data: dh.getPrivateKey()});\n\n\t\t\tkey = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\treturn (key);\n\t\t} else {\n\n\t\t\tvar ecParams = new X9ECParameters(curve);\n\n\t\t\t/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */\n\t\t\tvar n = ecParams.getN();\n\t\t\t/*\n\t\t\t * The crypto.randomBytes() function can only give us whole\n\t\t\t * bytes, so taking a nod from X9.62, we round up.\n\t\t\t */\n\t\t\tvar cByteLen = Math.ceil((n.bitLength() + 64) / 8);\n\t\t\tvar c = new jsbn(crypto.randomBytes(cByteLen));\n\n\t\t\tvar n1 = n.subtract(jsbn.ONE);\n\t\t\tvar priv = c.mod(n1).add(jsbn.ONE);\n\t\t\tvar pub = ecParams.getG().multiply(priv);\n\n\t\t\tpriv = Buffer.from(priv.toByteArray());\n\t\t\tpub = Buffer.from(ecParams.getCurve().\n\t\t\t    encodePointHex(pub), 'hex');\n\n\t\t\tparts.push({name: 'curve', data: Buffer.from(curve)});\n\t\t\tparts.push({name: 'Q', data: pub});\n\t\t\tparts.push({name: 'd', data: priv});\n\n\t\t\tkey = new PrivateKey({\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: curve,\n\t\t\t\tparts: parts\n\t\t\t});\n\t\t\treturn (key);\n\t\t}\n\t}\n\treturn dhe;\n}\n\nexport { requireDhe as __require };","start":1667202707683,"end":1667202707709,"order":"normal"}]}
