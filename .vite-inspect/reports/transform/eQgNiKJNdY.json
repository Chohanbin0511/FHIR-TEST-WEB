{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/lib/auth.js","transforms":[{"name":"vite:load-fallback","result":"'use strict'\n\nvar caseless = require('caseless')\nvar uuid = require('uuid/v4')\nvar helpers = require('./helpers')\n\nvar md5 = helpers.md5\nvar toBase64 = helpers.toBase64\n\nfunction Auth (request) {\n  // define all public properties here\n  this.request = request\n  this.hasAuth = false\n  this.sentAuth = false\n  this.bearerToken = null\n  this.user = null\n  this.pass = null\n}\n\nAuth.prototype.basic = function (user, pass, sendImmediately) {\n  var self = this\n  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {\n    self.request.emit('error', new Error('auth() received invalid user or password'))\n  }\n  self.user = user\n  self.pass = pass\n  self.hasAuth = true\n  var header = user + ':' + (pass || '')\n  if (sendImmediately || typeof sendImmediately === 'undefined') {\n    var authHeader = 'Basic ' + toBase64(header)\n    self.sentAuth = true\n    return authHeader\n  }\n}\n\nAuth.prototype.bearer = function (bearer, sendImmediately) {\n  var self = this\n  self.bearerToken = bearer\n  self.hasAuth = true\n  if (sendImmediately || typeof sendImmediately === 'undefined') {\n    if (typeof bearer === 'function') {\n      bearer = bearer()\n    }\n    var authHeader = 'Bearer ' + (bearer || '')\n    self.sentAuth = true\n    return authHeader\n  }\n}\n\nAuth.prototype.digest = function (method, path, authHeader) {\n  // TODO: More complete implementation of RFC 2617.\n  //   - handle challenge.domain\n  //   - support qop=\"auth-int\" only\n  //   - handle Authentication-Info (not necessarily?)\n  //   - check challenge.stale (not necessarily?)\n  //   - increase nc (not necessarily?)\n  // For reference:\n  // http://tools.ietf.org/html/rfc2617#section-3\n  // https://github.com/bagder/curl/blob/master/lib/http_digest.c\n\n  var self = this\n\n  var challenge = {}\n  var re = /([a-z0-9_-]+)=(?:\"([^\"]+)\"|([a-z0-9_-]+))/gi\n  while (true) {\n    var match = re.exec(authHeader)\n    if (!match) {\n      break\n    }\n    challenge[match[1]] = match[2] || match[3]\n  }\n\n  /**\n   * RFC 2617: handle both MD5 and MD5-sess algorithms.\n   *\n   * If the algorithm directive's value is \"MD5\" or unspecified, then HA1 is\n   *   HA1=MD5(username:realm:password)\n   * If the algorithm directive's value is \"MD5-sess\", then HA1 is\n   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)\n   */\n  var ha1Compute = function (algorithm, user, realm, pass, nonce, cnonce) {\n    var ha1 = md5(user + ':' + realm + ':' + pass)\n    if (algorithm && algorithm.toLowerCase() === 'md5-sess') {\n      return md5(ha1 + ':' + nonce + ':' + cnonce)\n    } else {\n      return ha1\n    }\n  }\n\n  var qop = /(^|,)\\s*auth\\s*($|,)/.test(challenge.qop) && 'auth'\n  var nc = qop && '00000001'\n  var cnonce = qop && uuid().replace(/-/g, '')\n  var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce)\n  var ha2 = md5(method + ':' + path)\n  var digestResponse = qop\n    ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2)\n    : md5(ha1 + ':' + challenge.nonce + ':' + ha2)\n  var authValues = {\n    username: self.user,\n    realm: challenge.realm,\n    nonce: challenge.nonce,\n    uri: path,\n    qop: qop,\n    response: digestResponse,\n    nc: nc,\n    cnonce: cnonce,\n    algorithm: challenge.algorithm,\n    opaque: challenge.opaque\n  }\n\n  authHeader = []\n  for (var k in authValues) {\n    if (authValues[k]) {\n      if (k === 'qop' || k === 'nc' || k === 'algorithm') {\n        authHeader.push(k + '=' + authValues[k])\n      } else {\n        authHeader.push(k + '=\"' + authValues[k] + '\"')\n      }\n    }\n  }\n  authHeader = 'Digest ' + authHeader.join(', ')\n  self.sentAuth = true\n  return authHeader\n}\n\nAuth.prototype.onRequest = function (user, pass, sendImmediately, bearer) {\n  var self = this\n  var request = self.request\n\n  var authHeader\n  if (bearer === undefined && user === undefined) {\n    self.request.emit('error', new Error('no auth mechanism defined'))\n  } else if (bearer !== undefined) {\n    authHeader = self.bearer(bearer, sendImmediately)\n  } else {\n    authHeader = self.basic(user, pass, sendImmediately)\n  }\n  if (authHeader) {\n    request.setHeader('authorization', authHeader)\n  }\n}\n\nAuth.prototype.onResponse = function (response) {\n  var self = this\n  var request = self.request\n\n  if (!self.hasAuth || self.sentAuth) { return null }\n\n  var c = caseless(response.headers)\n\n  var authHeader = c.get('www-authenticate')\n  var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase()\n  request.debug('reauth', authVerb)\n\n  switch (authVerb) {\n    case 'basic':\n      return self.basic(self.user, self.pass, true)\n\n    case 'bearer':\n      return self.bearer(self.bearerToken, true)\n\n    case 'digest':\n      return self.digest(request.method, request.path, authHeader)\n  }\n}\n\nexports.Auth = Auth\n","start":1667202704664,"end":1667202704931},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as auth } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/lib/auth.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/caseless/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/uuid/v4.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/lib/helpers.js?commonjs-wrapped\";\n\nvar hasRequiredAuth;\n\nfunction requireAuth () {\n\tif (hasRequiredAuth) return auth;\n\thasRequiredAuth = 1;\n\t'use strict'\n\n\tvar caseless = require$$0()\n\tvar uuid = require$$1()\n\tvar helpers = require$$2()\n\n\tvar md5 = helpers.md5\n\tvar toBase64 = helpers.toBase64\n\n\tfunction Auth (request) {\n\t  // define all public properties here\n\t  this.request = request\n\t  this.hasAuth = false\n\t  this.sentAuth = false\n\t  this.bearerToken = null\n\t  this.user = null\n\t  this.pass = null\n\t}\n\n\tAuth.prototype.basic = function (user, pass, sendImmediately) {\n\t  var self = this\n\t  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {\n\t    self.request.emit('error', new Error('auth() received invalid user or password'))\n\t  }\n\t  self.user = user\n\t  self.pass = pass\n\t  self.hasAuth = true\n\t  var header = user + ':' + (pass || '')\n\t  if (sendImmediately || typeof sendImmediately === 'undefined') {\n\t    var authHeader = 'Basic ' + toBase64(header)\n\t    self.sentAuth = true\n\t    return authHeader\n\t  }\n\t}\n\n\tAuth.prototype.bearer = function (bearer, sendImmediately) {\n\t  var self = this\n\t  self.bearerToken = bearer\n\t  self.hasAuth = true\n\t  if (sendImmediately || typeof sendImmediately === 'undefined') {\n\t    if (typeof bearer === 'function') {\n\t      bearer = bearer()\n\t    }\n\t    var authHeader = 'Bearer ' + (bearer || '')\n\t    self.sentAuth = true\n\t    return authHeader\n\t  }\n\t}\n\n\tAuth.prototype.digest = function (method, path, authHeader) {\n\t  // TODO: More complete implementation of RFC 2617.\n\t  //   - handle challenge.domain\n\t  //   - support qop=\"auth-int\" only\n\t  //   - handle Authentication-Info (not necessarily?)\n\t  //   - check challenge.stale (not necessarily?)\n\t  //   - increase nc (not necessarily?)\n\t  // For reference:\n\t  // http://tools.ietf.org/html/rfc2617#section-3\n\t  // https://github.com/bagder/curl/blob/master/lib/http_digest.c\n\n\t  var self = this\n\n\t  var challenge = {}\n\t  var re = /([a-z0-9_-]+)=(?:\"([^\"]+)\"|([a-z0-9_-]+))/gi\n\t  while (true) {\n\t    var match = re.exec(authHeader)\n\t    if (!match) {\n\t      break\n\t    }\n\t    challenge[match[1]] = match[2] || match[3]\n\t  }\n\n\t  /**\n\t   * RFC 2617: handle both MD5 and MD5-sess algorithms.\n\t   *\n\t   * If the algorithm directive's value is \"MD5\" or unspecified, then HA1 is\n\t   *   HA1=MD5(username:realm:password)\n\t   * If the algorithm directive's value is \"MD5-sess\", then HA1 is\n\t   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)\n\t   */\n\t  var ha1Compute = function (algorithm, user, realm, pass, nonce, cnonce) {\n\t    var ha1 = md5(user + ':' + realm + ':' + pass)\n\t    if (algorithm && algorithm.toLowerCase() === 'md5-sess') {\n\t      return md5(ha1 + ':' + nonce + ':' + cnonce)\n\t    } else {\n\t      return ha1\n\t    }\n\t  }\n\n\t  var qop = /(^|,)\\s*auth\\s*($|,)/.test(challenge.qop) && 'auth'\n\t  var nc = qop && '00000001'\n\t  var cnonce = qop && uuid().replace(/-/g, '')\n\t  var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce)\n\t  var ha2 = md5(method + ':' + path)\n\t  var digestResponse = qop\n\t    ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2)\n\t    : md5(ha1 + ':' + challenge.nonce + ':' + ha2)\n\t  var authValues = {\n\t    username: self.user,\n\t    realm: challenge.realm,\n\t    nonce: challenge.nonce,\n\t    uri: path,\n\t    qop: qop,\n\t    response: digestResponse,\n\t    nc: nc,\n\t    cnonce: cnonce,\n\t    algorithm: challenge.algorithm,\n\t    opaque: challenge.opaque\n\t  }\n\n\t  authHeader = []\n\t  for (var k in authValues) {\n\t    if (authValues[k]) {\n\t      if (k === 'qop' || k === 'nc' || k === 'algorithm') {\n\t        authHeader.push(k + '=' + authValues[k])\n\t      } else {\n\t        authHeader.push(k + '=\"' + authValues[k] + '\"')\n\t      }\n\t    }\n\t  }\n\t  authHeader = 'Digest ' + authHeader.join(', ')\n\t  self.sentAuth = true\n\t  return authHeader\n\t}\n\n\tAuth.prototype.onRequest = function (user, pass, sendImmediately, bearer) {\n\t  var self = this\n\t  var request = self.request\n\n\t  var authHeader\n\t  if (bearer === undefined && user === undefined) {\n\t    self.request.emit('error', new Error('no auth mechanism defined'))\n\t  } else if (bearer !== undefined) {\n\t    authHeader = self.bearer(bearer, sendImmediately)\n\t  } else {\n\t    authHeader = self.basic(user, pass, sendImmediately)\n\t  }\n\t  if (authHeader) {\n\t    request.setHeader('authorization', authHeader)\n\t  }\n\t}\n\n\tAuth.prototype.onResponse = function (response) {\n\t  var self = this\n\t  var request = self.request\n\n\t  if (!self.hasAuth || self.sentAuth) { return null }\n\n\t  var c = caseless(response.headers)\n\n\t  var authHeader = c.get('www-authenticate')\n\t  var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase()\n\t  request.debug('reauth', authVerb)\n\n\t  switch (authVerb) {\n\t    case 'basic':\n\t      return self.basic(self.user, self.pass, true)\n\n\t    case 'bearer':\n\t      return self.bearer(self.bearerToken, true)\n\n\t    case 'digest':\n\t      return self.digest(request.method, request.path, authHeader)\n\t  }\n\t}\n\n\tauth.Auth = Auth\n\treturn auth;\n}\n\nexport { requireAuth as __require };","start":1667202704931,"end":1667202705811,"order":"normal"}]}
