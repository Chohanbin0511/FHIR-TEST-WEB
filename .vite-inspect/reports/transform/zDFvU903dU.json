{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/convert-hex/convert-hex.js","transforms":[{"name":"vite:load-fallback","result":"!function(globals) {\n'use strict'\n\nvar convertHex = {\n  bytesToHex: function(bytes) {\n    /*if (typeof bytes.byteLength != 'undefined') {\n      var newBytes = []\n\n      if (typeof bytes.buffer != 'undefined')\n        bytes = new DataView(bytes.buffer)\n      else\n        bytes = new DataView(bytes)\n\n      for (var i = 0; i < bytes.byteLength; ++i) {\n        newBytes.push(bytes.getUint8(i))\n      }\n      bytes = newBytes\n    }*/\n    return arrBytesToHex(bytes)\n  },\n  hexToBytes: function(hex) {\n    if (hex.length % 2 === 1) throw new Error(\"hexToBytes can't have a string with an odd number of characters.\")\n    if (hex.indexOf('0x') === 0) hex = hex.slice(2)\n    return hex.match(/../g).map(function(x) { return parseInt(x,16) })\n  }\n}\n\n\n// PRIVATE\n\nfunction arrBytesToHex(bytes) {\n  return bytes.map(function(x) { return padLeft(x.toString(16),2) }).join('')\n}\n\nfunction padLeft(orig, len) {\n  if (orig.length > len) return orig\n  return Array(len - orig.length + 1).join('0') + orig\n}\n\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = convertHex\n} else {\n  globals.convertHex = convertHex\n}\n\n}(this);","start":1667202703314,"end":1667202703516},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as convertHexModule, exports as convertHex } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/convert-hex/convert-hex.js?commonjs-module\"\n\nvar hasRequiredConvertHex;\n\nfunction requireConvertHex () {\n\tif (hasRequiredConvertHex) return convertHex;\n\thasRequiredConvertHex = 1;\n\t(function (module) {\n\t\t!function(globals) {\n\t\t'use strict'\n\n\t\tvar convertHex = {\n\t\t  bytesToHex: function(bytes) {\n\t\t    /*if (typeof bytes.byteLength != 'undefined') {\n\t\t      var newBytes = []\n\n\t\t      if (typeof bytes.buffer != 'undefined')\n\t\t        bytes = new DataView(bytes.buffer)\n\t\t      else\n\t\t        bytes = new DataView(bytes)\n\n\t\t      for (var i = 0; i < bytes.byteLength; ++i) {\n\t\t        newBytes.push(bytes.getUint8(i))\n\t\t      }\n\t\t      bytes = newBytes\n\t\t    }*/\n\t\t    return arrBytesToHex(bytes)\n\t\t  },\n\t\t  hexToBytes: function(hex) {\n\t\t    if (hex.length % 2 === 1) throw new Error(\"hexToBytes can't have a string with an odd number of characters.\")\n\t\t    if (hex.indexOf('0x') === 0) hex = hex.slice(2)\n\t\t    return hex.match(/../g).map(function(x) { return parseInt(x,16) })\n\t\t  }\n\t\t}\n\n\n\t\t// PRIVATE\n\n\t\tfunction arrBytesToHex(bytes) {\n\t\t  return bytes.map(function(x) { return padLeft(x.toString(16),2) }).join('')\n\t\t}\n\n\t\tfunction padLeft(orig, len) {\n\t\t  if (orig.length > len) return orig\n\t\t  return Array(len - orig.length + 1).join('0') + orig\n\t\t}\n\n\n\t\tif ('object' !== 'undefined' && module.exports) { //CommonJS\n\t\t  module.exports = convertHex\n\t\t} else {\n\t\t  globals.convertHex = convertHex\n\t\t}\n\n\t\t}(commonjsHelpers.commonjsGlobal);\n} (convertHexModule));\n\treturn convertHex;\n}\n\nexport { requireConvertHex as __require };","start":1667202703516,"end":1667202703518,"order":"normal"},{"name":"node-polyfills","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as convertHexModule, exports as convertHex } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/convert-hex/convert-hex.js?commonjs-module\"\n\nvar hasRequiredConvertHex;\n\nfunction requireConvertHex () {\n\tif (hasRequiredConvertHex) return convertHex;\n\thasRequiredConvertHex = 1;\n\t(function (module) {\n\t\t!function(globals) {\n\t\t'use strict'\n\n\t\tvar convertHex = {\n\t\t  bytesToHex: function(bytes) {\n\t\t    /*if (typeof bytes.byteLength != 'undefined') {\n\t\t      var newBytes = []\n\n\t\t      if (typeof bytes.buffer != 'undefined')\n\t\t        bytes = new DataView(bytes.buffer)\n\t\t      else\n\t\t        bytes = new DataView(bytes)\n\n\t\t      for (var i = 0; i < bytes.byteLength; ++i) {\n\t\t        newBytes.push(bytes.getUint8(i))\n\t\t      }\n\t\t      bytes = newBytes\n\t\t    }*/\n\t\t    return arrBytesToHex(bytes)\n\t\t  },\n\t\t  hexToBytes: function(hex) {\n\t\t    if (hex.length % 2 === 1) throw new Error(\"hexToBytes can't have a string with an odd number of characters.\")\n\t\t    if (hex.indexOf('0x') === 0) hex = hex.slice(2)\n\t\t    return hex.match(/../g).map(function(x) { return parseInt(x,16) })\n\t\t  }\n\t\t}\n\n\n\t\t// PRIVATE\n\n\t\tfunction arrBytesToHex(bytes) {\n\t\t  return bytes.map(function(x) { return padLeft(x.toString(16),2) }).join('')\n\t\t}\n\n\t\tfunction padLeft(orig, len) {\n\t\t  if (orig.length > len) return orig\n\t\t  return Array(len - orig.length + 1).join('0') + orig\n\t\t}\n\n\n\t\tif ('object' !== 'undefined' && module.exports) { //CommonJS\n\t\t  module.exports = convertHex\n\t\t} else {\n\t\t  globals.convertHex = convertHex\n\t\t}\n\n\t\t}(commonjsHelpers.commonjsGlobal);\n} (convertHexModule));\n\treturn convertHex;\n}\n\nexport { requireConvertHex as __require };","start":1667202703519,"end":1667202703520,"order":"normal"}]}
