{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/combined-stream/lib/combined_stream.js","transforms":[{"name":"vite:load-fallback","result":"var util = require('util');\nvar Stream = require('stream').Stream;\nvar DelayedStream = require('delayed-stream');\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n  this._insideLoop = false;\n  this._pendingNext = false;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (typeof stream !== 'boolean')\n    && (typeof stream !== 'number')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n\n  if (this._insideLoop) {\n    this._pendingNext = true;\n    return; // defer call\n  }\n\n  this._insideLoop = true;\n  try {\n    do {\n      this._pendingNext = false;\n      this._realGetNext();\n    } while (this._pendingNext);\n  } finally {\n    this._insideLoop = false;\n  }\n};\n\nCombinedStream.prototype._realGetNext = function() {\n  var stream = this._streams.shift();\n\n\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    this._pipeNext(stream);\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n","start":1667202705152,"end":1667202705320},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/rollup-plugin-node-polyfills/polyfills/stream.js?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/delayed-stream/lib/delayed_stream.js?commonjs-wrapped\";\n\nvar combined_stream;\nvar hasRequiredCombined_stream;\n\nfunction requireCombined_stream () {\n\tif (hasRequiredCombined_stream) return combined_stream;\n\thasRequiredCombined_stream = 1;\n\tvar util = require$$0();\n\tvar Stream = require$$1.Stream;\n\tvar DelayedStream = require$$2();\n\n\tcombined_stream = CombinedStream;\n\tfunction CombinedStream() {\n\t  this.writable = false;\n\t  this.readable = true;\n\t  this.dataSize = 0;\n\t  this.maxDataSize = 2 * 1024 * 1024;\n\t  this.pauseStreams = true;\n\n\t  this._released = false;\n\t  this._streams = [];\n\t  this._currentStream = null;\n\t  this._insideLoop = false;\n\t  this._pendingNext = false;\n\t}\n\tutil.inherits(CombinedStream, Stream);\n\n\tCombinedStream.create = function(options) {\n\t  var combinedStream = new this();\n\n\t  options = options || {};\n\t  for (var option in options) {\n\t    combinedStream[option] = options[option];\n\t  }\n\n\t  return combinedStream;\n\t};\n\n\tCombinedStream.isStreamLike = function(stream) {\n\t  return (typeof stream !== 'function')\n\t    && (typeof stream !== 'string')\n\t    && (typeof stream !== 'boolean')\n\t    && (typeof stream !== 'number')\n\t    && (!Buffer.isBuffer(stream));\n\t};\n\n\tCombinedStream.prototype.append = function(stream) {\n\t  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n\t  if (isStreamLike) {\n\t    if (!(stream instanceof DelayedStream)) {\n\t      var newStream = DelayedStream.create(stream, {\n\t        maxDataSize: Infinity,\n\t        pauseStream: this.pauseStreams,\n\t      });\n\t      stream.on('data', this._checkDataSize.bind(this));\n\t      stream = newStream;\n\t    }\n\n\t    this._handleErrors(stream);\n\n\t    if (this.pauseStreams) {\n\t      stream.pause();\n\t    }\n\t  }\n\n\t  this._streams.push(stream);\n\t  return this;\n\t};\n\n\tCombinedStream.prototype.pipe = function(dest, options) {\n\t  Stream.prototype.pipe.call(this, dest, options);\n\t  this.resume();\n\t  return dest;\n\t};\n\n\tCombinedStream.prototype._getNext = function() {\n\t  this._currentStream = null;\n\n\t  if (this._insideLoop) {\n\t    this._pendingNext = true;\n\t    return; // defer call\n\t  }\n\n\t  this._insideLoop = true;\n\t  try {\n\t    do {\n\t      this._pendingNext = false;\n\t      this._realGetNext();\n\t    } while (this._pendingNext);\n\t  } finally {\n\t    this._insideLoop = false;\n\t  }\n\t};\n\n\tCombinedStream.prototype._realGetNext = function() {\n\t  var stream = this._streams.shift();\n\n\n\t  if (typeof stream == 'undefined') {\n\t    this.end();\n\t    return;\n\t  }\n\n\t  if (typeof stream !== 'function') {\n\t    this._pipeNext(stream);\n\t    return;\n\t  }\n\n\t  var getStream = stream;\n\t  getStream(function(stream) {\n\t    var isStreamLike = CombinedStream.isStreamLike(stream);\n\t    if (isStreamLike) {\n\t      stream.on('data', this._checkDataSize.bind(this));\n\t      this._handleErrors(stream);\n\t    }\n\n\t    this._pipeNext(stream);\n\t  }.bind(this));\n\t};\n\n\tCombinedStream.prototype._pipeNext = function(stream) {\n\t  this._currentStream = stream;\n\n\t  var isStreamLike = CombinedStream.isStreamLike(stream);\n\t  if (isStreamLike) {\n\t    stream.on('end', this._getNext.bind(this));\n\t    stream.pipe(this, {end: false});\n\t    return;\n\t  }\n\n\t  var value = stream;\n\t  this.write(value);\n\t  this._getNext();\n\t};\n\n\tCombinedStream.prototype._handleErrors = function(stream) {\n\t  var self = this;\n\t  stream.on('error', function(err) {\n\t    self._emitError(err);\n\t  });\n\t};\n\n\tCombinedStream.prototype.write = function(data) {\n\t  this.emit('data', data);\n\t};\n\n\tCombinedStream.prototype.pause = function() {\n\t  if (!this.pauseStreams) {\n\t    return;\n\t  }\n\n\t  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n\t  this.emit('pause');\n\t};\n\n\tCombinedStream.prototype.resume = function() {\n\t  if (!this._released) {\n\t    this._released = true;\n\t    this.writable = true;\n\t    this._getNext();\n\t  }\n\n\t  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n\t  this.emit('resume');\n\t};\n\n\tCombinedStream.prototype.end = function() {\n\t  this._reset();\n\t  this.emit('end');\n\t};\n\n\tCombinedStream.prototype.destroy = function() {\n\t  this._reset();\n\t  this.emit('close');\n\t};\n\n\tCombinedStream.prototype._reset = function() {\n\t  this.writable = false;\n\t  this._streams = [];\n\t  this._currentStream = null;\n\t};\n\n\tCombinedStream.prototype._checkDataSize = function() {\n\t  this._updateDataSize();\n\t  if (this.dataSize <= this.maxDataSize) {\n\t    return;\n\t  }\n\n\t  var message =\n\t    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n\t  this._emitError(new Error(message));\n\t};\n\n\tCombinedStream.prototype._updateDataSize = function() {\n\t  this.dataSize = 0;\n\n\t  var self = this;\n\t  this._streams.forEach(function(stream) {\n\t    if (!stream.dataSize) {\n\t      return;\n\t    }\n\n\t    self.dataSize += stream.dataSize;\n\t  });\n\n\t  if (this._currentStream && this._currentStream.dataSize) {\n\t    this.dataSize += this._currentStream.dataSize;\n\t  }\n\t};\n\n\tCombinedStream.prototype._emitError = function(err) {\n\t  this._reset();\n\t  this.emit('error', err);\n\t};\n\treturn combined_stream;\n}\n\nexport { requireCombined_stream as __require };","start":1667202705321,"end":1667202707554,"order":"normal"},{"name":"node-polyfills","result":"import { Buffer as Buffer } from 'buffer';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/rollup-plugin-node-polyfills/polyfills/stream.js?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/delayed-stream/lib/delayed_stream.js?commonjs-wrapped\";\n\nvar combined_stream;\nvar hasRequiredCombined_stream;\n\nfunction requireCombined_stream () {\n\tif (hasRequiredCombined_stream) return combined_stream;\n\thasRequiredCombined_stream = 1;\n\tvar util = require$$0();\n\tvar Stream = require$$1.Stream;\n\tvar DelayedStream = require$$2();\n\n\tcombined_stream = CombinedStream;\n\tfunction CombinedStream() {\n\t  this.writable = false;\n\t  this.readable = true;\n\t  this.dataSize = 0;\n\t  this.maxDataSize = 2 * 1024 * 1024;\n\t  this.pauseStreams = true;\n\n\t  this._released = false;\n\t  this._streams = [];\n\t  this._currentStream = null;\n\t  this._insideLoop = false;\n\t  this._pendingNext = false;\n\t}\n\tutil.inherits(CombinedStream, Stream);\n\n\tCombinedStream.create = function(options) {\n\t  var combinedStream = new this();\n\n\t  options = options || {};\n\t  for (var option in options) {\n\t    combinedStream[option] = options[option];\n\t  }\n\n\t  return combinedStream;\n\t};\n\n\tCombinedStream.isStreamLike = function(stream) {\n\t  return (typeof stream !== 'function')\n\t    && (typeof stream !== 'string')\n\t    && (typeof stream !== 'boolean')\n\t    && (typeof stream !== 'number')\n\t    && (!Buffer.isBuffer(stream));\n\t};\n\n\tCombinedStream.prototype.append = function(stream) {\n\t  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n\t  if (isStreamLike) {\n\t    if (!(stream instanceof DelayedStream)) {\n\t      var newStream = DelayedStream.create(stream, {\n\t        maxDataSize: Infinity,\n\t        pauseStream: this.pauseStreams,\n\t      });\n\t      stream.on('data', this._checkDataSize.bind(this));\n\t      stream = newStream;\n\t    }\n\n\t    this._handleErrors(stream);\n\n\t    if (this.pauseStreams) {\n\t      stream.pause();\n\t    }\n\t  }\n\n\t  this._streams.push(stream);\n\t  return this;\n\t};\n\n\tCombinedStream.prototype.pipe = function(dest, options) {\n\t  Stream.prototype.pipe.call(this, dest, options);\n\t  this.resume();\n\t  return dest;\n\t};\n\n\tCombinedStream.prototype._getNext = function() {\n\t  this._currentStream = null;\n\n\t  if (this._insideLoop) {\n\t    this._pendingNext = true;\n\t    return; // defer call\n\t  }\n\n\t  this._insideLoop = true;\n\t  try {\n\t    do {\n\t      this._pendingNext = false;\n\t      this._realGetNext();\n\t    } while (this._pendingNext);\n\t  } finally {\n\t    this._insideLoop = false;\n\t  }\n\t};\n\n\tCombinedStream.prototype._realGetNext = function() {\n\t  var stream = this._streams.shift();\n\n\n\t  if (typeof stream == 'undefined') {\n\t    this.end();\n\t    return;\n\t  }\n\n\t  if (typeof stream !== 'function') {\n\t    this._pipeNext(stream);\n\t    return;\n\t  }\n\n\t  var getStream = stream;\n\t  getStream(function(stream) {\n\t    var isStreamLike = CombinedStream.isStreamLike(stream);\n\t    if (isStreamLike) {\n\t      stream.on('data', this._checkDataSize.bind(this));\n\t      this._handleErrors(stream);\n\t    }\n\n\t    this._pipeNext(stream);\n\t  }.bind(this));\n\t};\n\n\tCombinedStream.prototype._pipeNext = function(stream) {\n\t  this._currentStream = stream;\n\n\t  var isStreamLike = CombinedStream.isStreamLike(stream);\n\t  if (isStreamLike) {\n\t    stream.on('end', this._getNext.bind(this));\n\t    stream.pipe(this, {end: false});\n\t    return;\n\t  }\n\n\t  var value = stream;\n\t  this.write(value);\n\t  this._getNext();\n\t};\n\n\tCombinedStream.prototype._handleErrors = function(stream) {\n\t  var self = this;\n\t  stream.on('error', function(err) {\n\t    self._emitError(err);\n\t  });\n\t};\n\n\tCombinedStream.prototype.write = function(data) {\n\t  this.emit('data', data);\n\t};\n\n\tCombinedStream.prototype.pause = function() {\n\t  if (!this.pauseStreams) {\n\t    return;\n\t  }\n\n\t  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n\t  this.emit('pause');\n\t};\n\n\tCombinedStream.prototype.resume = function() {\n\t  if (!this._released) {\n\t    this._released = true;\n\t    this.writable = true;\n\t    this._getNext();\n\t  }\n\n\t  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n\t  this.emit('resume');\n\t};\n\n\tCombinedStream.prototype.end = function() {\n\t  this._reset();\n\t  this.emit('end');\n\t};\n\n\tCombinedStream.prototype.destroy = function() {\n\t  this._reset();\n\t  this.emit('close');\n\t};\n\n\tCombinedStream.prototype._reset = function() {\n\t  this.writable = false;\n\t  this._streams = [];\n\t  this._currentStream = null;\n\t};\n\n\tCombinedStream.prototype._checkDataSize = function() {\n\t  this._updateDataSize();\n\t  if (this.dataSize <= this.maxDataSize) {\n\t    return;\n\t  }\n\n\t  var message =\n\t    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n\t  this._emitError(new Error(message));\n\t};\n\n\tCombinedStream.prototype._updateDataSize = function() {\n\t  this.dataSize = 0;\n\n\t  var self = this;\n\t  this._streams.forEach(function(stream) {\n\t    if (!stream.dataSize) {\n\t      return;\n\t    }\n\n\t    self.dataSize += stream.dataSize;\n\t  });\n\n\t  if (this._currentStream && this._currentStream.dataSize) {\n\t    this.dataSize += this._currentStream.dataSize;\n\t  }\n\t};\n\n\tCombinedStream.prototype._emitError = function(err) {\n\t  this._reset();\n\t  this.emit('error', err);\n\t};\n\treturn combined_stream;\n}\n\nexport { requireCombined_stream as __require };","start":1667202707559,"end":1667202707589,"order":"normal"}]}
