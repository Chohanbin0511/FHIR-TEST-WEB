{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/which-typed-array/index.js","transforms":[{"name":"vite:load-fallback","result":"'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof g[typedArray] === 'function') {\n\t\t\tvar arr = new g[typedArray]();\n\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\tif (!descriptor) {\n\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t}\n\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t}\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n","start":1667202982691,"end":1667202983059},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/for-each/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/available-typed-arrays/index.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/call-bind/callBound.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/has-tostringtag/shams.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/is-typed-array/index.js?commonjs-wrapped\";\n\nvar whichTypedArray;\nvar hasRequiredWhichTypedArray;\n\nfunction requireWhichTypedArray () {\n\tif (hasRequiredWhichTypedArray) return whichTypedArray;\n\thasRequiredWhichTypedArray = 1;\n\t'use strict';\n\n\tvar forEach = require$$0();\n\tvar availableTypedArrays = require$$1();\n\tvar callBound = require$$2();\n\n\tvar $toString = callBound('Object.prototype.toString');\n\tvar hasToStringTag = require$$3()();\n\n\tvar g = typeof globalThis === 'undefined' ? commonjsHelpers.commonjsGlobal : globalThis;\n\tvar typedArrays = availableTypedArrays();\n\n\tvar $slice = callBound('String.prototype.slice');\n\tvar toStrTags = {};\n\tvar gOPD = require$$4();\n\tvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\tif (hasToStringTag && gOPD && getPrototypeOf) {\n\t\tforEach(typedArrays, function (typedArray) {\n\t\t\tif (typeof g[typedArray] === 'function') {\n\t\t\t\tvar arr = new g[typedArray]();\n\t\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\t\tif (!descriptor) {\n\t\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t\t}\n\t\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tvar tryTypedArrays = function tryAllTypedArrays(value) {\n\t\tvar foundName = false;\n\t\tforEach(toStrTags, function (getter, typedArray) {\n\t\t\tif (!foundName) {\n\t\t\t\ttry {\n\t\t\t\t\tvar name = getter.call(value);\n\t\t\t\t\tif (name === typedArray) {\n\t\t\t\t\t\tfoundName = name;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\t\t});\n\t\treturn foundName;\n\t};\n\n\tvar isTypedArray = require$$5();\n\n\twhichTypedArray = function whichTypedArray(value) {\n\t\tif (!isTypedArray(value)) { return false; }\n\t\tif (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }\n\t\treturn tryTypedArrays(value);\n\t};\n\treturn whichTypedArray;\n}\n\nexport { requireWhichTypedArray as __require };","start":1667202983062,"end":1667202984784,"order":"normal"}]}
