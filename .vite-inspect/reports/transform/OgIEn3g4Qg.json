{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/lib/getProxyFromURI.js","transforms":[{"name":"vite:load-fallback","result":"'use strict'\n\nfunction formatHostname (hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone (zone) {\n  zone = zone.trim().toLowerCase()\n\n  var zoneParts = zone.split(':', 2)\n  var zoneHost = formatHostname(zoneParts[0])\n  var zonePort = zoneParts[1]\n  var hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy (uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  var hostname = formatHostname(uri.hostname)\n  var noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    var hostnameMatched = (\n      isMatchedAt > -1 &&\n        (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n    )\n\n    if (noProxyZone.hasPort) {\n      return (port === noProxyZone.port) && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromURI (uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: https://lynx.invisible-island.net/lynx2.8.7/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY ||\n      process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return process.env.HTTPS_PROXY ||\n      process.env.https_proxy ||\n      process.env.HTTP_PROXY ||\n      process.env.http_proxy || null\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null\n}\n\nmodule.exports = getProxyFromURI\n","start":1667202704646,"end":1667202704909},{"name":"vite:define","result":"'use strict'\n\nfunction formatHostname (hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone (zone) {\n  zone = zone.trim().toLowerCase()\n\n  var zoneParts = zone.split(':', 2)\n  var zoneHost = formatHostname(zoneParts[0])\n  var zonePort = zoneParts[1]\n  var hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy (uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  var hostname = formatHostname(uri.hostname)\n  var noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    var hostnameMatched = (\n      isMatchedAt > -1 &&\n        (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n    )\n\n    if (noProxyZone.hasPort) {\n      return (port === noProxyZone.port) && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromURI (uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: https://lynx.invisible-island.net/lynx2.8.7/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = {}.NO_PROXY || {}.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return {}.HTTP_PROXY ||\n      {}.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return {}.HTTPS_PROXY ||\n      {}.https_proxy ||\n      {}.HTTP_PROXY ||\n      {}.http_proxy || null\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null\n}\n\nmodule.exports = getProxyFromURI\n","start":1667202704909,"end":1667202704909,"order":"normal"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar getProxyFromURI_1;\nvar hasRequiredGetProxyFromURI;\n\nfunction requireGetProxyFromURI () {\n\tif (hasRequiredGetProxyFromURI) return getProxyFromURI_1;\n\thasRequiredGetProxyFromURI = 1;\n\t'use strict'\n\n\tfunction formatHostname (hostname) {\n\t  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n\t  return hostname.replace(/^\\.*/, '.').toLowerCase()\n\t}\n\n\tfunction parseNoProxyZone (zone) {\n\t  zone = zone.trim().toLowerCase()\n\n\t  var zoneParts = zone.split(':', 2)\n\t  var zoneHost = formatHostname(zoneParts[0])\n\t  var zonePort = zoneParts[1]\n\t  var hasPort = zone.indexOf(':') > -1\n\n\t  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n\t}\n\n\tfunction uriInNoProxy (uri, noProxy) {\n\t  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n\t  var hostname = formatHostname(uri.hostname)\n\t  var noProxyList = noProxy.split(',')\n\n\t  // iterate through the noProxyList until it finds a match.\n\t  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {\n\t    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n\t    var hostnameMatched = (\n\t      isMatchedAt > -1 &&\n\t        (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n\t    )\n\n\t    if (noProxyZone.hasPort) {\n\t      return (port === noProxyZone.port) && hostnameMatched\n\t    }\n\n\t    return hostnameMatched\n\t  })\n\t}\n\n\tfunction getProxyFromURI (uri) {\n\t  // Decide the proper request proxy to use based on the request URI object and the\n\t  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n\t  // respect NO_PROXY environment variables (see: https://lynx.invisible-island.net/lynx2.8.7/breakout/lynx_help/keystrokes/environments.html)\n\n\t  var noProxy = {}.NO_PROXY || {}.no_proxy || ''\n\n\t  // if the noProxy is a wildcard then return null\n\n\t  if (noProxy === '*') {\n\t    return null\n\t  }\n\n\t  // if the noProxy is not empty and the uri is found return null\n\n\t  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n\t    return null\n\t  }\n\n\t  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n\t  if (uri.protocol === 'http:') {\n\t    return {}.HTTP_PROXY ||\n\t      {}.http_proxy || null\n\t  }\n\n\t  if (uri.protocol === 'https:') {\n\t    return {}.HTTPS_PROXY ||\n\t      {}.https_proxy ||\n\t      {}.HTTP_PROXY ||\n\t      {}.http_proxy || null\n\t  }\n\n\t  // if none of that works, return null\n\t  // (What uri protocol are you using then?)\n\n\t  return null\n\t}\n\n\tgetProxyFromURI_1 = getProxyFromURI\n\treturn getProxyFromURI_1;\n}\n\nexport { requireGetProxyFromURI as __require };","start":1667202704909,"end":1667202704910,"order":"normal"}]}
