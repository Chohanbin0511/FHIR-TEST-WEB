{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/auth.js","transforms":[{"name":"vite:load-fallback","result":"(function() {\n    var mw = require('./core');\n\n    var btoa = require('Base64').btoa;\n\n    exports.$Basic = mw.$$Attr('headers.Authorization', function(args){\n        if(args.auth && args.auth.user && args.auth.pass){\n            return \"Basic \" + btoa(args.auth.user + \":\" + args.auth.pass);\n        }\n    });\n\n    exports.$Bearer = mw.$$Attr('headers.Authorization', function(args){\n        if(args.auth && args.auth.bearer){\n            return \"Bearer \" + args.auth.bearer;\n        }\n    });\n\n    var credentials;\n    // this first middleware sets the credentials attribute to empty, so\n    // adapters cannot use it directly, thus enforcing a valid value to be parsed in.\n    exports.$Credentials = mw.Middleware(mw.$$Attr('credentials', function(args){\n      // Assign value for later checking\n      credentials = args.credentials\n\n      // Needs to return non-null and not-undefined\n      // in order for value to be (un)set\n      return '';\n    })).and(mw.$$Attr('credentials', function(args){\n        // check credentials for valid options, valid for fetch\n        if(['same-origin', 'include'].indexOf(credentials) > -1 ){\n            return credentials;\n        }\n    }));\n\n}).call(this);\n","start":1667202704262,"end":1667202704346},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as auth } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/auth.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/Base64/base64.js?commonjs-wrapped\";\n\nvar hasRequiredAuth;\n\nfunction requireAuth () {\n\tif (hasRequiredAuth) return auth;\n\thasRequiredAuth = 1;\n\t(function() {\n\t    var mw = require$$0();\n\n\t    var btoa = require$$1().btoa;\n\n\t    auth.$Basic = mw.$$Attr('headers.Authorization', function(args){\n\t        if(args.auth && args.auth.user && args.auth.pass){\n\t            return \"Basic \" + btoa(args.auth.user + \":\" + args.auth.pass);\n\t        }\n\t    });\n\n\t    auth.$Bearer = mw.$$Attr('headers.Authorization', function(args){\n\t        if(args.auth && args.auth.bearer){\n\t            return \"Bearer \" + args.auth.bearer;\n\t        }\n\t    });\n\n\t    var credentials;\n\t    // this first middleware sets the credentials attribute to empty, so\n\t    // adapters cannot use it directly, thus enforcing a valid value to be parsed in.\n\t    auth.$Credentials = mw.Middleware(mw.$$Attr('credentials', function(args){\n\t      // Assign value for later checking\n\t      credentials = args.credentials\n\n\t      // Needs to return non-null and not-undefined\n\t      // in order for value to be (un)set\n\t      return '';\n\t    })).and(mw.$$Attr('credentials', function(args){\n\t        // check credentials for valid options, valid for fetch\n\t        if(['same-origin', 'include'].indexOf(credentials) > -1 ){\n\t            return credentials;\n\t        }\n\t    }));\n\n\t}).call(commonjsHelpers.commonjsGlobal);\n\treturn auth;\n}\n\nexport { requireAuth as __require };","start":1667202704346,"end":1667202704706,"order":"normal"}]}
