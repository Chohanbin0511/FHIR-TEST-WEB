{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/vuetify/lib/components/VOverlay/useActivator.mjs","transforms":[{"name":"vite:load-fallback","result":"// Composables\nimport { makeDelayProps, useDelay } from \"../../composables/delay.mjs\";\nimport { VMenuSymbol } from \"../VMenu/shared.mjs\"; // Utilities\n\nimport { getCurrentInstance, IN_BROWSER, isComponentInstance, propsFactory, SUPPORTS_FOCUS_VISIBLE } from \"../../util/index.mjs\";\nimport { computed, effectScope, inject, nextTick, onScopeDispose, ref, watch, watchEffect } from 'vue'; // Types\n\nexport const makeActivatorProps = propsFactory({\n  activator: [String, Object],\n  activatorProps: {\n    type: Object,\n    default: () => ({})\n  },\n  openOnClick: {\n    type: Boolean,\n    default: undefined\n  },\n  openOnHover: Boolean,\n  openOnFocus: {\n    type: Boolean,\n    default: undefined\n  },\n  closeOnContentClick: Boolean,\n  ...makeDelayProps()\n});\nexport function useActivator(props, _ref) {\n  let {\n    isActive,\n    isTop\n  } = _ref;\n  const activatorEl = ref();\n  let isHovered = false;\n  let isFocused = false;\n  let firstEnter = true;\n  const openOnFocus = computed(() => props.openOnFocus || props.openOnFocus == null && props.openOnHover);\n  const openOnClick = computed(() => props.openOnClick || props.openOnClick == null && !props.openOnHover && !openOnFocus.value);\n  const {\n    runOpenDelay,\n    runCloseDelay\n  } = useDelay(props, value => {\n    if (value === (props.openOnHover && isHovered || openOnFocus.value && isFocused) && !(props.openOnHover && isActive.value && !isTop.value)) {\n      if (isActive.value !== value) {\n        firstEnter = true;\n      }\n\n      isActive.value = value;\n    }\n  });\n  const availableEvents = {\n    click: e => {\n      e.stopPropagation();\n      activatorEl.value = e.currentTarget || e.target;\n      isActive.value = !isActive.value;\n    },\n    mouseenter: e => {\n      isHovered = true;\n      activatorEl.value = e.currentTarget || e.target;\n      runOpenDelay();\n    },\n    mouseleave: e => {\n      isHovered = false;\n      runCloseDelay();\n    },\n    focus: e => {\n      if (SUPPORTS_FOCUS_VISIBLE && !e.target.matches(':focus-visible')) return;\n      isFocused = true;\n      e.stopPropagation();\n      activatorEl.value = e.currentTarget || e.target;\n      runOpenDelay();\n    },\n    blur: e => {\n      isFocused = false;\n      e.stopPropagation();\n      runCloseDelay();\n    }\n  };\n  const activatorEvents = computed(() => {\n    const events = {};\n\n    if (openOnClick.value) {\n      events.click = availableEvents.click;\n    }\n\n    if (props.openOnHover) {\n      events.mouseenter = availableEvents.mouseenter;\n      events.mouseleave = availableEvents.mouseleave;\n    }\n\n    if (openOnFocus.value) {\n      events.focus = availableEvents.focus;\n      events.blur = availableEvents.blur;\n    }\n\n    return events;\n  });\n  const contentEvents = computed(() => {\n    const events = {};\n\n    if (props.openOnHover) {\n      events.mouseenter = () => {\n        isHovered = true;\n        runOpenDelay();\n      };\n\n      events.mouseleave = () => {\n        isHovered = false;\n        runCloseDelay();\n      };\n    }\n\n    if (props.closeOnContentClick) {\n      const menu = inject(VMenuSymbol, null);\n\n      events.click = () => {\n        isActive.value = false;\n        menu == null ? void 0 : menu.closeParents();\n      };\n    }\n\n    return events;\n  });\n  const scrimEvents = computed(() => {\n    const events = {};\n\n    if (props.openOnHover) {\n      events.mouseenter = () => {\n        if (firstEnter) {\n          isHovered = true;\n          firstEnter = false;\n          runOpenDelay();\n        }\n      };\n\n      events.mouseleave = () => {\n        isHovered = false;\n        runCloseDelay();\n      };\n    }\n\n    return events;\n  });\n  watch(isTop, val => {\n    if (val && (props.openOnHover && !isHovered && (!openOnFocus.value || !isFocused) || openOnFocus.value && !isFocused && (!props.openOnHover || !isHovered))) {\n      isActive.value = false;\n    }\n  });\n  const activatorRef = ref();\n  watchEffect(() => {\n    if (!activatorRef.value) return;\n    nextTick(() => {\n      const activator = activatorRef.value;\n      activatorEl.value = isComponentInstance(activator) ? activator.$el : activator;\n    });\n  });\n  const vm = getCurrentInstance('useActivator');\n  let scope;\n  watch(() => !!props.activator, val => {\n    if (val && IN_BROWSER) {\n      scope = effectScope();\n      scope.run(() => {\n        _useActivator(props, vm, {\n          activatorEl,\n          activatorEvents\n        });\n      });\n    } else if (scope) {\n      scope.stop();\n    }\n  }, {\n    flush: 'post',\n    immediate: true\n  });\n  return {\n    activatorEl,\n    activatorRef,\n    activatorEvents,\n    contentEvents,\n    scrimEvents\n  };\n}\n\nfunction _useActivator(props, vm, _ref2) {\n  let {\n    activatorEl,\n    activatorEvents\n  } = _ref2;\n  watch(() => props.activator, (val, oldVal) => {\n    if (oldVal && val !== oldVal) {\n      const activator = getActivator(oldVal);\n      activator && unbindActivatorProps(activator);\n    }\n\n    if (val) {\n      nextTick(() => bindActivatorProps());\n    }\n  }, {\n    immediate: true\n  });\n  watch(() => props.activatorProps, () => {\n    bindActivatorProps();\n  });\n  onScopeDispose(() => {\n    unbindActivatorProps();\n  });\n\n  function bindActivatorProps() {\n    let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getActivator();\n\n    let _props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.activatorProps;\n\n    if (!el) return;\n    Object.entries(activatorEvents.value).forEach(_ref3 => {\n      let [name, cb] = _ref3;\n      el.addEventListener(name, cb);\n    });\n    Object.keys(_props).forEach(k => {\n      if (_props[k] == null) {\n        el.removeAttribute(k);\n      } else {\n        el.setAttribute(k, _props[k]);\n      }\n    });\n  }\n\n  function unbindActivatorProps() {\n    let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getActivator();\n\n    let _props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.activatorProps;\n\n    if (!el) return;\n    Object.entries(activatorEvents.value).forEach(_ref4 => {\n      let [name, cb] = _ref4;\n      el.removeEventListener(name, cb);\n    });\n    Object.keys(_props).forEach(k => {\n      el.removeAttribute(k);\n    });\n  }\n\n  function getActivator() {\n    var _activator;\n\n    let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : props.activator;\n    let activator;\n\n    if (selector) {\n      if (selector === 'parent') {\n        var _vm$proxy, _vm$proxy$$el;\n\n        let el = vm == null ? void 0 : (_vm$proxy = vm.proxy) == null ? void 0 : (_vm$proxy$$el = _vm$proxy.$el) == null ? void 0 : _vm$proxy$$el.parentNode;\n\n        while (el.hasAttribute('data-no-activator')) {\n          el = el.parentNode;\n        }\n\n        activator = el;\n      } else if (typeof selector === 'string') {\n        // Selector\n        activator = document.querySelector(selector);\n      } else if ('$el' in selector) {\n        // Component (ref)\n        activator = selector.$el;\n      } else {\n        // HTMLElement | Element\n        activator = selector;\n      }\n    } // The activator should only be a valid element (Ignore comments and text nodes)\n\n\n    activatorEl.value = ((_activator = activator) == null ? void 0 : _activator.nodeType) === Node.ELEMENT_NODE ? activator : null;\n    return activatorEl.value;\n  }\n}\n//# sourceMappingURL=useActivator.mjs.map","start":1667202982190,"end":1667202982391}]}
