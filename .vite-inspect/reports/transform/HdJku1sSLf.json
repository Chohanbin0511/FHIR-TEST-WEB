{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/aws-sign2/index.js","transforms":[{"name":"vite:load-fallback","result":"\n/*!\n *  Copyright 2010 LearnBoost <dev@learnboost.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto')\n  , parse = require('url').parse\n  ;\n\n/**\n * Valid keys.\n */\n\nvar keys = \n  [ 'acl'\n  , 'location'\n  , 'logging'\n  , 'notification'\n  , 'partNumber'\n  , 'policy'\n  , 'requestPayment'\n  , 'torrent'\n  , 'uploadId'\n  , 'uploads'\n  , 'versionId'\n  , 'versioning'\n  , 'versions'\n  , 'website'\n  ]\n\n/**\n * Return an \"Authorization\" header value with the given `options`\n * in the form of \"AWS <key>:<signature>\"\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction authorization (options) {\n  return 'AWS ' + options.key + ':' + sign(options)\n}\n\nmodule.exports = authorization\nmodule.exports.authorization = authorization\n\n/**\n * Simple HMAC-SHA1 Wrapper\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */ \n\nfunction hmacSha1 (options) {\n  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64')\n}\n\nmodule.exports.hmacSha1 = hmacSha1\n\n/**\n * Create a base64 sha1 HMAC for `options`. \n * \n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction sign (options) {\n  options.message = stringToSign(options)\n  return hmacSha1(options)\n}\nmodule.exports.sign = sign\n\n/**\n * Create a base64 sha1 HMAC for `options`. \n *\n * Specifically to be used with S3 presigned URLs\n * \n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction signQuery (options) {\n  options.message = queryStringToSign(options)\n  return hmacSha1(options)\n}\nmodule.exports.signQuery= signQuery\n\n/**\n * Return a string for sign() with the given `options`.\n *\n * Spec:\n * \n *    <verb>\\n\n *    <md5>\\n\n *    <content-type>\\n\n *    <date>\\n\n *    [headers\\n]\n *    <resource>\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction stringToSign (options) {\n  var headers = options.amazonHeaders || ''\n  if (headers) headers += '\\n'\n  var r = \n    [ options.verb\n    , options.md5\n    , options.contentType\n    , options.date ? options.date.toUTCString() : ''\n    , headers + options.resource\n    ]\n  return r.join('\\n')\n}\nmodule.exports.stringToSign = stringToSign\n\n/**\n * Return a string for sign() with the given `options`, but is meant exclusively\n * for S3 presigned URLs\n *\n * Spec:\n * \n *    <date>\\n\n *    <resource>\n *\n * @param {Object} options\n * @return {String}\n * @api private\n */\n\nfunction queryStringToSign (options){\n  return 'GET\\n\\n\\n' + options.date + '\\n' + options.resource\n}\nmodule.exports.queryStringToSign = queryStringToSign\n\n/**\n * Perform the following:\n *\n *  - ignore non-amazon headers\n *  - lowercase fields\n *  - sort lexicographically\n *  - trim whitespace between \":\"\n *  - join with newline\n *\n * @param {Object} headers\n * @return {String}\n * @api private\n */\n\nfunction canonicalizeHeaders (headers) {\n  var buf = []\n    , fields = Object.keys(headers)\n    ;\n  for (var i = 0, len = fields.length; i < len; ++i) {\n    var field = fields[i]\n      , val = headers[field]\n      , field = field.toLowerCase()\n      ;\n    if (0 !== field.indexOf('x-amz')) continue\n    buf.push(field + ':' + val)\n  }\n  return buf.sort().join('\\n')\n}\nmodule.exports.canonicalizeHeaders = canonicalizeHeaders\n\n/**\n * Perform the following:\n *\n *  - ignore non sub-resources\n *  - sort lexicographically\n *\n * @param {String} resource\n * @return {String}\n * @api private\n */\n\nfunction canonicalizeResource (resource) {\n  var url = parse(resource, true)\n    , path = url.pathname\n    , buf = []\n    ;\n\n  Object.keys(url.query).forEach(function(key){\n    if (!~keys.indexOf(key)) return\n    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key])\n    buf.push(key + val)\n  })\n\n  return path + (buf.length ? '?' + buf.sort().join('&') : '')\n}\nmodule.exports.canonicalizeResource = canonicalizeResource\n","start":1667202981692,"end":1667202982023},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as awsSign2Module, exports as awsSign2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/aws-sign2/index.js?commonjs-module\"\nimport require$$0 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\n\nvar hasRequiredAwsSign2;\n\nfunction requireAwsSign2 () {\n\tif (hasRequiredAwsSign2) return awsSign2;\n\thasRequiredAwsSign2 = 1;\n\t/*!\n\t *  Copyright 2010 LearnBoost <dev@learnboost.com>\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\t/**\n\t * Module dependencies.\n\t */\n\n\tvar crypto = require$$0\n\t  , parse = require$$1.parse\n\t  ;\n\n\t/**\n\t * Valid keys.\n\t */\n\n\tvar keys = \n\t  [ 'acl'\n\t  , 'location'\n\t  , 'logging'\n\t  , 'notification'\n\t  , 'partNumber'\n\t  , 'policy'\n\t  , 'requestPayment'\n\t  , 'torrent'\n\t  , 'uploadId'\n\t  , 'uploads'\n\t  , 'versionId'\n\t  , 'versioning'\n\t  , 'versions'\n\t  , 'website'\n\t  ]\n\n\t/**\n\t * Return an \"Authorization\" header value with the given `options`\n\t * in the form of \"AWS <key>:<signature>\"\n\t *\n\t * @param {Object} options\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction authorization (options) {\n\t  return 'AWS ' + options.key + ':' + sign(options)\n\t}\n\n\tawsSign2Module.exports = authorization\n\tawsSign2.authorization = authorization\n\n\t/**\n\t * Simple HMAC-SHA1 Wrapper\n\t *\n\t * @param {Object} options\n\t * @return {String}\n\t * @api private\n\t */ \n\n\tfunction hmacSha1 (options) {\n\t  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64')\n\t}\n\n\tawsSign2.hmacSha1 = hmacSha1\n\n\t/**\n\t * Create a base64 sha1 HMAC for `options`. \n\t * \n\t * @param {Object} options\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction sign (options) {\n\t  options.message = stringToSign(options)\n\t  return hmacSha1(options)\n\t}\n\tawsSign2.sign = sign\n\n\t/**\n\t * Create a base64 sha1 HMAC for `options`. \n\t *\n\t * Specifically to be used with S3 presigned URLs\n\t * \n\t * @param {Object} options\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction signQuery (options) {\n\t  options.message = queryStringToSign(options)\n\t  return hmacSha1(options)\n\t}\n\tawsSign2.signQuery= signQuery\n\n\t/**\n\t * Return a string for sign() with the given `options`.\n\t *\n\t * Spec:\n\t * \n\t *    <verb>\\n\n\t *    <md5>\\n\n\t *    <content-type>\\n\n\t *    <date>\\n\n\t *    [headers\\n]\n\t *    <resource>\n\t *\n\t * @param {Object} options\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction stringToSign (options) {\n\t  var headers = options.amazonHeaders || ''\n\t  if (headers) headers += '\\n'\n\t  var r = \n\t    [ options.verb\n\t    , options.md5\n\t    , options.contentType\n\t    , options.date ? options.date.toUTCString() : ''\n\t    , headers + options.resource\n\t    ]\n\t  return r.join('\\n')\n\t}\n\tawsSign2.stringToSign = stringToSign\n\n\t/**\n\t * Return a string for sign() with the given `options`, but is meant exclusively\n\t * for S3 presigned URLs\n\t *\n\t * Spec:\n\t * \n\t *    <date>\\n\n\t *    <resource>\n\t *\n\t * @param {Object} options\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction queryStringToSign (options){\n\t  return 'GET\\n\\n\\n' + options.date + '\\n' + options.resource\n\t}\n\tawsSign2.queryStringToSign = queryStringToSign\n\n\t/**\n\t * Perform the following:\n\t *\n\t *  - ignore non-amazon headers\n\t *  - lowercase fields\n\t *  - sort lexicographically\n\t *  - trim whitespace between \":\"\n\t *  - join with newline\n\t *\n\t * @param {Object} headers\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction canonicalizeHeaders (headers) {\n\t  var buf = []\n\t    , fields = Object.keys(headers)\n\t    ;\n\t  for (var i = 0, len = fields.length; i < len; ++i) {\n\t    var field = fields[i]\n\t      , val = headers[field]\n\t      , field = field.toLowerCase()\n\t      ;\n\t    if (0 !== field.indexOf('x-amz')) continue\n\t    buf.push(field + ':' + val)\n\t  }\n\t  return buf.sort().join('\\n')\n\t}\n\tawsSign2.canonicalizeHeaders = canonicalizeHeaders\n\n\t/**\n\t * Perform the following:\n\t *\n\t *  - ignore non sub-resources\n\t *  - sort lexicographically\n\t *\n\t * @param {String} resource\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction canonicalizeResource (resource) {\n\t  var url = parse(resource, true)\n\t    , path = url.pathname\n\t    , buf = []\n\t    ;\n\n\t  Object.keys(url.query).forEach(function(key){\n\t    if (!~keys.indexOf(key)) return\n\t    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key])\n\t    buf.push(key + val)\n\t  })\n\n\t  return path + (buf.length ? '?' + buf.sort().join('&') : '')\n\t}\n\tawsSign2.canonicalizeResource = canonicalizeResource\n\treturn awsSign2;\n}\n\nexport { requireAwsSign2 as __require };","start":1667202982024,"end":1667202982028,"order":"normal"}]}
