{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/index.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2010-2012 Mikeal Rogers\n//\n//    Licensed under the Apache License, Version 2.0 (the \"License\");\n//    you may not use this file except in compliance with the License.\n//    You may obtain a copy of the License at\n//\n//        http://www.apache.org/licenses/LICENSE-2.0\n//\n//    Unless required by applicable law or agreed to in writing, software\n//    distributed under the License is distributed on an \"AS IS\" BASIS,\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//    See the License for the specific language governing permissions and\n//    limitations under the License.\n\n'use strict'\n\nvar extend = require('extend')\nvar cookies = require('./lib/cookies')\nvar helpers = require('./lib/helpers')\n\nvar paramsHaveRequestBody = helpers.paramsHaveRequestBody\n\n// organize params for patch, post, put, head, del\nfunction initParams (uri, options, callback) {\n  if (typeof options === 'function') {\n    callback = options\n  }\n\n  var params = {}\n  if (options !== null && typeof options === 'object') {\n    extend(params, options, {uri: uri})\n  } else if (typeof uri === 'string') {\n    extend(params, {uri: uri})\n  } else {\n    extend(params, uri)\n  }\n\n  params.callback = callback || params.callback\n  return params\n}\n\nfunction request (uri, options, callback) {\n  if (typeof uri === 'undefined') {\n    throw new Error('undefined is not a valid uri or options object.')\n  }\n\n  var params = initParams(uri, options, callback)\n\n  if (params.method === 'HEAD' && paramsHaveRequestBody(params)) {\n    throw new Error('HTTP HEAD requests MUST NOT include a request body.')\n  }\n\n  return new request.Request(params)\n}\n\nfunction verbFunc (verb) {\n  var method = verb.toUpperCase()\n  return function (uri, options, callback) {\n    var params = initParams(uri, options, callback)\n    params.method = method\n    return request(params, params.callback)\n  }\n}\n\n// define like this to please codeintel/intellisense IDEs\nrequest.get = verbFunc('get')\nrequest.head = verbFunc('head')\nrequest.options = verbFunc('options')\nrequest.post = verbFunc('post')\nrequest.put = verbFunc('put')\nrequest.patch = verbFunc('patch')\nrequest.del = verbFunc('delete')\nrequest['delete'] = verbFunc('delete')\n\nrequest.jar = function (store) {\n  return cookies.jar(store)\n}\n\nrequest.cookie = function (str) {\n  return cookies.parse(str)\n}\n\nfunction wrapRequestMethod (method, options, requester, verb) {\n  return function (uri, opts, callback) {\n    var params = initParams(uri, opts, callback)\n\n    var target = {}\n    extend(true, target, options, params)\n\n    target.pool = params.pool || options.pool\n\n    if (verb) {\n      target.method = verb.toUpperCase()\n    }\n\n    if (typeof requester === 'function') {\n      method = requester\n    }\n\n    return method(target, target.callback)\n  }\n}\n\nrequest.defaults = function (options, requester) {\n  var self = this\n\n  options = options || {}\n\n  if (typeof options === 'function') {\n    requester = options\n    options = {}\n  }\n\n  var defaults = wrapRequestMethod(self, options, requester)\n\n  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete']\n  verbs.forEach(function (verb) {\n    defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb)\n  })\n\n  defaults.cookie = wrapRequestMethod(self.cookie, options, requester)\n  defaults.jar = self.jar\n  defaults.defaults = self.defaults\n  return defaults\n}\n\nrequest.forever = function (agentOptions, optionsArg) {\n  var options = {}\n  if (optionsArg) {\n    extend(options, optionsArg)\n  }\n  if (agentOptions) {\n    options.agentOptions = agentOptions\n  }\n\n  options.forever = true\n  return request.defaults(options)\n}\n\n// Exports\n\nmodule.exports = request\nrequest.Request = require('./request')\nrequest.initParams = initParams\n\n// Backwards compatibility for request.debug\nObject.defineProperty(request, 'debug', {\n  enumerable: true,\n  get: function () {\n    return request.Request.debug\n  },\n  set: function (debug) {\n    request.Request.debug = debug\n  }\n})\n","start":1667202980158,"end":1667202980493},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/extend/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/lib/cookies.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/lib/helpers.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/request.js?commonjs-wrapped\";\n\nvar request_1;\nvar hasRequiredRequest;\n\nfunction requireRequest () {\n\tif (hasRequiredRequest) return request_1;\n\thasRequiredRequest = 1;\n\t// Copyright 2010-2012 Mikeal Rogers\n\t//\n\t//    Licensed under the Apache License, Version 2.0 (the \"License\");\n\t//    you may not use this file except in compliance with the License.\n\t//    You may obtain a copy of the License at\n\t//\n\t//        http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t//    Unless required by applicable law or agreed to in writing, software\n\t//    distributed under the License is distributed on an \"AS IS\" BASIS,\n\t//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t//    See the License for the specific language governing permissions and\n\t//    limitations under the License.\n\n\t'use strict'\n\n\tvar extend = require$$0()\n\tvar cookies = require$$1()\n\tvar helpers = require$$2()\n\n\tvar paramsHaveRequestBody = helpers.paramsHaveRequestBody\n\n\t// organize params for patch, post, put, head, del\n\tfunction initParams (uri, options, callback) {\n\t  if (typeof options === 'function') {\n\t    callback = options\n\t  }\n\n\t  var params = {}\n\t  if (options !== null && typeof options === 'object') {\n\t    extend(params, options, {uri: uri})\n\t  } else if (typeof uri === 'string') {\n\t    extend(params, {uri: uri})\n\t  } else {\n\t    extend(params, uri)\n\t  }\n\n\t  params.callback = callback || params.callback\n\t  return params\n\t}\n\n\tfunction request (uri, options, callback) {\n\t  if (typeof uri === 'undefined') {\n\t    throw new Error('undefined is not a valid uri or options object.')\n\t  }\n\n\t  var params = initParams(uri, options, callback)\n\n\t  if (params.method === 'HEAD' && paramsHaveRequestBody(params)) {\n\t    throw new Error('HTTP HEAD requests MUST NOT include a request body.')\n\t  }\n\n\t  return new request.Request(params)\n\t}\n\n\tfunction verbFunc (verb) {\n\t  var method = verb.toUpperCase()\n\t  return function (uri, options, callback) {\n\t    var params = initParams(uri, options, callback)\n\t    params.method = method\n\t    return request(params, params.callback)\n\t  }\n\t}\n\n\t// define like this to please codeintel/intellisense IDEs\n\trequest.get = verbFunc('get')\n\trequest.head = verbFunc('head')\n\trequest.options = verbFunc('options')\n\trequest.post = verbFunc('post')\n\trequest.put = verbFunc('put')\n\trequest.patch = verbFunc('patch')\n\trequest.del = verbFunc('delete')\n\trequest['delete'] = verbFunc('delete')\n\n\trequest.jar = function (store) {\n\t  return cookies.jar(store)\n\t}\n\n\trequest.cookie = function (str) {\n\t  return cookies.parse(str)\n\t}\n\n\tfunction wrapRequestMethod (method, options, requester, verb) {\n\t  return function (uri, opts, callback) {\n\t    var params = initParams(uri, opts, callback)\n\n\t    var target = {}\n\t    extend(true, target, options, params)\n\n\t    target.pool = params.pool || options.pool\n\n\t    if (verb) {\n\t      target.method = verb.toUpperCase()\n\t    }\n\n\t    if (typeof requester === 'function') {\n\t      method = requester\n\t    }\n\n\t    return method(target, target.callback)\n\t  }\n\t}\n\n\trequest.defaults = function (options, requester) {\n\t  var self = this\n\n\t  options = options || {}\n\n\t  if (typeof options === 'function') {\n\t    requester = options\n\t    options = {}\n\t  }\n\n\t  var defaults = wrapRequestMethod(self, options, requester)\n\n\t  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete']\n\t  verbs.forEach(function (verb) {\n\t    defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb)\n\t  })\n\n\t  defaults.cookie = wrapRequestMethod(self.cookie, options, requester)\n\t  defaults.jar = self.jar\n\t  defaults.defaults = self.defaults\n\t  return defaults\n\t}\n\n\trequest.forever = function (agentOptions, optionsArg) {\n\t  var options = {}\n\t  if (optionsArg) {\n\t    extend(options, optionsArg)\n\t  }\n\t  if (agentOptions) {\n\t    options.agentOptions = agentOptions\n\t  }\n\n\t  options.forever = true\n\t  return request.defaults(options)\n\t}\n\n\t// Exports\n\n\trequest_1 = request\n\trequest.Request = require$$3()\n\trequest.initParams = initParams\n\n\t// Backwards compatibility for request.debug\n\tObject.defineProperty(request, 'debug', {\n\t  enumerable: true,\n\t  get: function () {\n\t    return request.Request.debug\n\t  },\n\t  set: function (debug) {\n\t    request.Request.debug = debug\n\t  }\n\t})\n\treturn request_1;\n}\n\nexport { requireRequest as __require };","start":1667202980494,"end":1667202985201,"order":"normal"}]}
