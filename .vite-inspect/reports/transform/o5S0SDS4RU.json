{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/vuetify/lib/composables/forwardRefs.mjs","transforms":[{"name":"vite:load-fallback","result":"const Refs = Symbol('Forwarded refs');\n/** Omit properties starting with P */\n\nexport function forwardRefs(target) {\n  for (var _len = arguments.length, refs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    refs[_key - 1] = arguments[_key];\n  }\n\n  target[Refs] = refs;\n  return new Proxy(target, {\n    get(target, key) {\n      if (Reflect.has(target, key)) {\n        return Reflect.get(target, key);\n      }\n\n      for (const ref of refs) {\n        if (ref.value && Reflect.has(ref.value, key)) {\n          const val = Reflect.get(ref.value, key);\n          return typeof val === 'function' ? val.bind(ref.value) : val;\n        }\n      }\n    },\n\n    getOwnPropertyDescriptor(target, key) {\n      const descriptor = Reflect.getOwnPropertyDescriptor(target, key);\n      if (descriptor) return descriptor; // Skip internal properties\n\n      if (typeof key === 'symbol' || key.startsWith('__')) return; // Check each ref's own properties\n\n      for (const ref of refs) {\n        if (!ref.value) continue;\n        const descriptor = Reflect.getOwnPropertyDescriptor(ref.value, key);\n        if (descriptor) return descriptor;\n\n        if ('_' in ref.value && 'setupState' in ref.value._) {\n          const descriptor = Reflect.getOwnPropertyDescriptor(ref.value._.setupState, key);\n          if (descriptor) return descriptor;\n        }\n      } // Recursive search up each ref's prototype\n\n\n      for (const ref of refs) {\n        let obj = ref.value && Object.getPrototypeOf(ref.value);\n\n        while (obj) {\n          const descriptor = Reflect.getOwnPropertyDescriptor(obj, key);\n          if (descriptor) return descriptor;\n          obj = Object.getPrototypeOf(obj);\n        }\n      } // Call forwarded refs' proxies\n\n\n      for (const ref of refs) {\n        const childRefs = ref.value && ref.value[Refs];\n        if (!childRefs) continue;\n        const queue = childRefs.slice();\n\n        while (queue.length) {\n          const ref = queue.shift();\n          const descriptor = Reflect.getOwnPropertyDescriptor(ref.value, key);\n          if (descriptor) return descriptor;\n          const childRefs = ref.value && ref.value[Refs];\n          if (childRefs) queue.push(...childRefs);\n        }\n      }\n\n      return undefined;\n    }\n\n  });\n}\n//# sourceMappingURL=forwardRefs.mjs.map","start":1667202980958,"end":1667202981206}]}
