{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/fhir.js","transforms":[{"name":"vite:load-fallback","result":"(function() {\n    var utils = require(\"./utils\");\n    var M = require('./middlewares/core');\n    var query = require('./middlewares/search');\n    var auth = require('./middlewares/auth');\n    var transport = require('./middlewares/http');\n    var errors = require('./middlewares/errors');\n    var config = require('./middlewares/config');\n    var bundle = require('./middlewares/bundle');\n    var pt = require('./middlewares/patient');\n    var refs = require('./middlewares/references');\n    var url = require('./middlewares/url');\n    var decorate = require('./decorate');\n\n    var cache = {};\n\n\n    var fhir = function(cfg, adapter){\n        var Middleware = M.Middleware;\n        var $$Attr = M.$$Attr;\n\n        var $$Method = function(m){ return $$Attr('method', m);};\n        var $$Header = function(h,v) {return $$Attr('headers.' + h, v);};\n\n        var $Errors = Middleware(errors);\n        var Defaults = Middleware(config(cfg, adapter))\n                .and($Errors)\n                .and(auth.$Basic)\n                .and(auth.$Bearer)\n                .and(auth.$Credentials)\n                .and(transport.$JsonData)\n                .and($$Header('Accept', (cfg.headers && cfg.headers['Accept']) ? cfg.headers['Accept'] : 'application/json'))\n                .and($$Header('Content-Type', (cfg.headers && cfg.headers['Content-Type']) ? cfg.headers['Content-Type'] : 'application/json'));\n\n        var GET = Defaults.and($$Method('GET'));\n        var POST = Defaults.and($$Method('POST'));\n        var PUT = Defaults.and($$Method('PUT'));\n        var DELETE = Defaults.and($$Method('DELETE'));\n        var PATCH = Defaults.and($$Method('PATCH'));\n\n        var http = transport.Http(cfg, adapter);\n\n        var Path = url.Path;\n        var BaseUrl = Path(cfg.baseUrl);\n        var resourceTypePath = BaseUrl.slash(\":type || :resource.resourceType\");\n        var searchPath = resourceTypePath;\n        var resourceTypeHxPath = resourceTypePath.slash(\"_history\");\n        var resourcePath = resourceTypePath.slash(\":id || :resource.id\");\n        var resourceHxPath = resourcePath.slash(\"_history\");\n        var vreadPath =  resourcePath.slash(\":versionId || :resource.meta.versionId\");\n        var metaTarget = BaseUrl.slash(\":target.resourceType || :target.type\").slash(\":target.id\").slash(':target.versionId');\n\n        var ReturnHeader = $$Header('Prefer', 'return=representation');\n\n        var $Paging = Middleware(query.$Paging);\n\n        return decorate({\n            conformance: GET.and(BaseUrl.slash(\"metadata\")).end(http),\n            document: POST.and(BaseUrl.slash(\"Document\")).end(http),\n            profile:  GET.and(BaseUrl.slash(\"Profile\").slash(\":type\")).end(http),\n            transaction: POST.and(BaseUrl).end(http),\n            history: GET.and(BaseUrl.slash(\"_history\")).and($Paging).end(http),\n            typeHistory: GET.and(resourceTypeHxPath).and($Paging).end(http),\n            resourceHistory: GET.and(resourceHxPath).and($Paging).end(http),\n            read: GET.and(pt.$WithPatient).and(resourcePath).end(http),\n            vread: GET.and(vreadPath).end(http),\n            \"delete\": DELETE.and(resourcePath).and(ReturnHeader).end(http),\n            create: POST.and(resourceTypePath).and(ReturnHeader).end(http),\n            validate: POST.and(resourceTypePath.slash(\"_validate\")).end(http),\n            meta: {\n                add: POST.and(metaTarget.slash(\"$meta-add\")).end(http),\n                delete: POST.and(metaTarget.slash(\"$meta-delete\")).end(http),\n                read: GET.and(metaTarget.slash(\"$meta\")).end(http)\n            },\n            search: GET.and(resourceTypePath).and(pt.$WithPatient).and(query.$SearchParams).and($Paging).end(http),\n            update: PUT.and(resourcePath).and(ReturnHeader).end(http),\n            conditionalUpdate: PUT.and(resourceTypePath).and(query.$SearchParams).and(ReturnHeader).end(http),\n            conditionalDelete: DELETE.and(resourceTypePath).and(query.$SearchParams).and(ReturnHeader).end(http),\n            nextPage: GET.and(bundle.$$BundleLinkUrl(\"next\")).end(http),\n            // For previous page, bundle.link.relation can either have 'previous' or 'prev' values\n            prevPage: GET.and(bundle.$$BundleLinkUrl(\"previous\")).and(bundle.$$BundleLinkUrl(\"prev\")).end(http),\n            getBundleByUrl: GET.and(Path(\":url\")).end(http),\n            resolve: GET.and(refs.resolve).end(http),\n            patch: PATCH.and(resourcePath).and($$Header('Content-Type', 'application/json-patch+json')).end(http)\n        }, adapter);\n    };\n    module.exports = fhir;\n}).call(this);\n","start":1667202703393,"end":1667202703607},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as fhirModule, exports as fhir } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/fhir.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/utils.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/core.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/search.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/auth.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/http.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/errors.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/config.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/bundle.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/patient.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/references.js?commonjs-wrapped\";\nimport { __require as require$$10 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/url.js?commonjs-wrapped\";\nimport { __require as require$$11 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/decorate.js?commonjs-wrapped\";\n\nvar hasRequiredFhir;\n\nfunction requireFhir () {\n\tif (hasRequiredFhir) return fhir;\n\thasRequiredFhir = 1;\n\t(function() {\n\t    var utils = require$$0();\n\t    var M = require$$1();\n\t    var query = require$$2();\n\t    var auth = require$$3();\n\t    var transport = require$$4();\n\t    var errors = require$$5();\n\t    var config = require$$6();\n\t    var bundle = require$$7();\n\t    var pt = require$$8();\n\t    var refs = require$$9();\n\t    var url = require$$10();\n\t    var decorate = require$$11();\n\n\t    var cache = {};\n\n\n\t    var fhir = function(cfg, adapter){\n\t        var Middleware = M.Middleware;\n\t        var $$Attr = M.$$Attr;\n\n\t        var $$Method = function(m){ return $$Attr('method', m);};\n\t        var $$Header = function(h,v) {return $$Attr('headers.' + h, v);};\n\n\t        var $Errors = Middleware(errors);\n\t        var Defaults = Middleware(config(cfg, adapter))\n\t                .and($Errors)\n\t                .and(auth.$Basic)\n\t                .and(auth.$Bearer)\n\t                .and(auth.$Credentials)\n\t                .and(transport.$JsonData)\n\t                .and($$Header('Accept', (cfg.headers && cfg.headers['Accept']) ? cfg.headers['Accept'] : 'application/json'))\n\t                .and($$Header('Content-Type', (cfg.headers && cfg.headers['Content-Type']) ? cfg.headers['Content-Type'] : 'application/json'));\n\n\t        var GET = Defaults.and($$Method('GET'));\n\t        var POST = Defaults.and($$Method('POST'));\n\t        var PUT = Defaults.and($$Method('PUT'));\n\t        var DELETE = Defaults.and($$Method('DELETE'));\n\t        var PATCH = Defaults.and($$Method('PATCH'));\n\n\t        var http = transport.Http(cfg, adapter);\n\n\t        var Path = url.Path;\n\t        var BaseUrl = Path(cfg.baseUrl);\n\t        var resourceTypePath = BaseUrl.slash(\":type || :resource.resourceType\");\n\t        var searchPath = resourceTypePath;\n\t        var resourceTypeHxPath = resourceTypePath.slash(\"_history\");\n\t        var resourcePath = resourceTypePath.slash(\":id || :resource.id\");\n\t        var resourceHxPath = resourcePath.slash(\"_history\");\n\t        var vreadPath =  resourcePath.slash(\":versionId || :resource.meta.versionId\");\n\t        var metaTarget = BaseUrl.slash(\":target.resourceType || :target.type\").slash(\":target.id\").slash(':target.versionId');\n\n\t        var ReturnHeader = $$Header('Prefer', 'return=representation');\n\n\t        var $Paging = Middleware(query.$Paging);\n\n\t        return decorate({\n\t            conformance: GET.and(BaseUrl.slash(\"metadata\")).end(http),\n\t            document: POST.and(BaseUrl.slash(\"Document\")).end(http),\n\t            profile:  GET.and(BaseUrl.slash(\"Profile\").slash(\":type\")).end(http),\n\t            transaction: POST.and(BaseUrl).end(http),\n\t            history: GET.and(BaseUrl.slash(\"_history\")).and($Paging).end(http),\n\t            typeHistory: GET.and(resourceTypeHxPath).and($Paging).end(http),\n\t            resourceHistory: GET.and(resourceHxPath).and($Paging).end(http),\n\t            read: GET.and(pt.$WithPatient).and(resourcePath).end(http),\n\t            vread: GET.and(vreadPath).end(http),\n\t            \"delete\": DELETE.and(resourcePath).and(ReturnHeader).end(http),\n\t            create: POST.and(resourceTypePath).and(ReturnHeader).end(http),\n\t            validate: POST.and(resourceTypePath.slash(\"_validate\")).end(http),\n\t            meta: {\n\t                add: POST.and(metaTarget.slash(\"$meta-add\")).end(http),\n\t                delete: POST.and(metaTarget.slash(\"$meta-delete\")).end(http),\n\t                read: GET.and(metaTarget.slash(\"$meta\")).end(http)\n\t            },\n\t            search: GET.and(resourceTypePath).and(pt.$WithPatient).and(query.$SearchParams).and($Paging).end(http),\n\t            update: PUT.and(resourcePath).and(ReturnHeader).end(http),\n\t            conditionalUpdate: PUT.and(resourceTypePath).and(query.$SearchParams).and(ReturnHeader).end(http),\n\t            conditionalDelete: DELETE.and(resourceTypePath).and(query.$SearchParams).and(ReturnHeader).end(http),\n\t            nextPage: GET.and(bundle.$$BundleLinkUrl(\"next\")).end(http),\n\t            // For previous page, bundle.link.relation can either have 'previous' or 'prev' values\n\t            prevPage: GET.and(bundle.$$BundleLinkUrl(\"previous\")).and(bundle.$$BundleLinkUrl(\"prev\")).end(http),\n\t            getBundleByUrl: GET.and(Path(\":url\")).end(http),\n\t            resolve: GET.and(refs.resolve).end(http),\n\t            patch: PATCH.and(resourcePath).and($$Header('Content-Type', 'application/json-patch+json')).end(http)\n\t        }, adapter);\n\t    };\n\t    fhirModule.exports = fhir;\n\t}).call(commonjsHelpers.commonjsGlobal);\n\treturn fhir;\n}\n\nexport { requireFhir as __require };","start":1667202703608,"end":1667202704708,"order":"normal"}]}
