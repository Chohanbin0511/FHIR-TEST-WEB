{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/dotjs/validate.js","transforms":[{"name":"vite:load-fallback","result":"'use strict';\nmodule.exports = function generate_validate(it, $keyword, $ruleType) {\n  var out = '';\n  var $async = it.schema.$async === true,\n    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\n    $id = it.self._getId(it.schema);\n  if (it.opts.strictKeywords) {\n    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\n    if ($unknownKwd) {\n      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;\n      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);\n      else throw new Error($keywordsMsg);\n    }\n  }\n  if (it.isTop) {\n    out += ' var validate = ';\n    if ($async) {\n      it.async = true;\n      out += 'async ';\n    }\n    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\n    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\n    }\n  }\n  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\n    var $keyword = 'false schema';\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = 'data' + ($dataLvl || '');\n    var $valid = 'valid' + $lvl;\n    if (it.schema === false) {\n      if (it.isTop) {\n        $breakOnError = true;\n      } else {\n        out += ' var ' + ($valid) + ' = false; ';\n      }\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = ''; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'boolean schema is false\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + (__err) + ']); ';\n        } else {\n          out += ' validate.errors = [' + (__err) + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n    } else {\n      if (it.isTop) {\n        if ($async) {\n          out += ' return data; ';\n        } else {\n          out += ' validate.errors = null; return true; ';\n        }\n      } else {\n        out += ' var ' + ($valid) + ' = true; ';\n      }\n    }\n    if (it.isTop) {\n      out += ' }; return validate; ';\n    }\n    return out;\n  }\n  if (it.isTop) {\n    var $top = it.isTop,\n      $lvl = it.level = 0,\n      $dataLvl = it.dataLevel = 0,\n      $data = 'data';\n    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n    it.baseId = it.baseId || it.rootId;\n    delete it.isTop;\n    it.dataPathArr = [\"\"];\n    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\n      var $defaultMsg = 'default is ignored in the schema root';\n      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n      else throw new Error($defaultMsg);\n    }\n    out += ' var vErrors = null; ';\n    out += ' var errors = 0;     ';\n    out += ' if (rootData === undefined) rootData = data; ';\n  } else {\n    var $lvl = it.level,\n      $dataLvl = it.dataLevel,\n      $data = 'data' + ($dataLvl || '');\n    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\n    if ($async && !it.async) throw new Error('async schema in sync schema');\n    out += ' var errs_' + ($lvl) + ' = errors;';\n  }\n  var $valid = 'valid' + $lvl,\n    $breakOnError = !it.opts.allErrors,\n    $closingBraces1 = '',\n    $closingBraces2 = '';\n  var $errorKeyword;\n  var $typeSchema = it.schema.type,\n    $typeIsArray = Array.isArray($typeSchema);\n  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\n    if ($typeIsArray) {\n      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');\n    } else if ($typeSchema != 'null') {\n      $typeSchema = [$typeSchema, 'null'];\n      $typeIsArray = true;\n    }\n  }\n  if ($typeIsArray && $typeSchema.length == 1) {\n    $typeSchema = $typeSchema[0];\n    $typeIsArray = false;\n  }\n  if (it.schema.$ref && $refKeywords) {\n    if (it.opts.extendRefs == 'fail') {\n      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n    } else if (it.opts.extendRefs !== true) {\n      $refKeywords = false;\n      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n    }\n  }\n  if (it.schema.$comment && it.opts.$comment) {\n    out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));\n  }\n  if ($typeSchema) {\n    if (it.opts.coerceTypes) {\n      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n    }\n    var $rulesGroup = it.RULES.types[$typeSchema];\n    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type';\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type',\n        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\n      out += ' if (' + (it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true)) + ') { ';\n      if ($coerceToTypes) {\n        var $dataType = 'dataType' + $lvl,\n          $coerced = 'coerced' + $lvl;\n        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; var ' + ($coerced) + ' = undefined; ';\n        if (it.opts.coerceTypes == 'array') {\n          out += ' if (' + ($dataType) + ' == \\'object\\' && Array.isArray(' + ($data) + ') && ' + ($data) + '.length == 1) { ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + '; if (' + (it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers)) + ') ' + ($coerced) + ' = ' + ($data) + '; } ';\n        }\n        out += ' if (' + ($coerced) + ' !== undefined) ; ';\n        var arr1 = $coerceToTypes;\n        if (arr1) {\n          var $type, $i = -1,\n            l1 = arr1.length - 1;\n          while ($i < l1) {\n            $type = arr1[$i += 1];\n            if ($type == 'string') {\n              out += ' else if (' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\') ' + ($coerced) + ' = \\'\\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \\'\\'; ';\n            } else if ($type == 'number' || $type == 'integer') {\n              out += ' else if (' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \\'string\\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';\n              if ($type == 'integer') {\n                out += ' && !(' + ($data) + ' % 1)';\n              }\n              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';\n            } else if ($type == 'boolean') {\n              out += ' else if (' + ($data) + ' === \\'false\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \\'true\\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';\n            } else if ($type == 'null') {\n              out += ' else if (' + ($data) + ' === \\'\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';\n            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\n              out += ' else if (' + ($dataType) + ' == \\'string\\' || ' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';\n            }\n          }\n        }\n        out += ' else {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + ($typeSchema.join(\",\"));\n          } else {\n            out += '' + ($typeSchema);\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + ($typeSchema.join(\",\"));\n            } else {\n              out += '' + ($typeSchema);\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } if (' + ($coerced) + ' !== undefined) {  ';\n        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';\n        if (!$dataLvl) {\n          out += 'if (' + ($parentData) + ' !== undefined)';\n        }\n        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';\n      } else {\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + ($typeSchema.join(\",\"));\n          } else {\n            out += '' + ($typeSchema);\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + ($typeSchema.join(\",\"));\n            } else {\n              out += '' + ($typeSchema);\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      }\n      out += ' } ';\n    }\n  }\n  if (it.schema.$ref && !$refKeywords) {\n    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';\n    if ($breakOnError) {\n      out += ' } if (errors === ';\n      if ($top) {\n        out += '0';\n      } else {\n        out += 'errs_' + ($lvl);\n      }\n      out += ') { ';\n      $closingBraces2 += '}';\n    }\n  } else {\n    var arr2 = it.RULES;\n    if (arr2) {\n      var $rulesGroup, i2 = -1,\n        l2 = arr2.length - 1;\n      while (i2 < l2) {\n        $rulesGroup = arr2[i2 += 1];\n        if ($shouldUseGroup($rulesGroup)) {\n          if ($rulesGroup.type) {\n            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers)) + ') { ';\n          }\n          if (it.opts.useDefaults) {\n            if ($rulesGroup.type == 'object' && it.schema.properties) {\n              var $schema = it.schema.properties,\n                $schemaKeys = Object.keys($schema);\n              var arr3 = $schemaKeys;\n              if (arr3) {\n                var $propertyKey, i3 = -1,\n                  l3 = arr3.length - 1;\n                while (i3 < l3) {\n                  $propertyKey = arr3[i3 += 1];\n                  var $sch = $schema[$propertyKey];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + it.util.getProperty($propertyKey);\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n                        else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + ($passData) + ' === undefined ';\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n                      }\n                      out += ' ) ' + ($passData) + ' = ';\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n                      } else {\n                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n                      }\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\n              var arr4 = it.schema.items;\n              if (arr4) {\n                var $sch, $i = -1,\n                  l4 = arr4.length - 1;\n                while ($i < l4) {\n                  $sch = arr4[$i += 1];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + '[' + $i + ']';\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n                        else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + ($passData) + ' === undefined ';\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n                      }\n                      out += ' ) ' + ($passData) + ' = ';\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n                      } else {\n                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n                      }\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            }\n          }\n          var arr5 = $rulesGroup.rules;\n          if (arr5) {\n            var $rule, i5 = -1,\n              l5 = arr5.length - 1;\n            while (i5 < l5) {\n              $rule = arr5[i5 += 1];\n              if ($shouldUseRule($rule)) {\n                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n                if ($code) {\n                  out += ' ' + ($code) + ' ';\n                  if ($breakOnError) {\n                    $closingBraces1 += '}';\n                  }\n                }\n              }\n            }\n          }\n          if ($breakOnError) {\n            out += ' ' + ($closingBraces1) + ' ';\n            $closingBraces1 = '';\n          }\n          if ($rulesGroup.type) {\n            out += ' } ';\n            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n              out += ' else { ';\n              var $schemaPath = it.schemaPath + '.type',\n                $errSchemaPath = it.errSchemaPath + '/type';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n                if ($typeIsArray) {\n                  out += '' + ($typeSchema.join(\",\"));\n                } else {\n                  out += '' + ($typeSchema);\n                }\n                out += '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should be ';\n                  if ($typeIsArray) {\n                    out += '' + ($typeSchema.join(\",\"));\n                  } else {\n                    out += '' + ($typeSchema);\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n            }\n          }\n          if ($breakOnError) {\n            out += ' if (errors === ';\n            if ($top) {\n              out += '0';\n            } else {\n              out += 'errs_' + ($lvl);\n            }\n            out += ') { ';\n            $closingBraces2 += '}';\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces2) + ' ';\n  }\n  if ($top) {\n    if ($async) {\n      out += ' if (errors === 0) return data;           ';\n      out += ' else throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; ';\n      out += ' return errors === 0;       ';\n    }\n    out += ' }; return validate;';\n  } else {\n    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';\n  }\n\n  function $shouldUseGroup($rulesGroup) {\n    var rules = $rulesGroup.rules;\n    for (var i = 0; i < rules.length; i++)\n      if ($shouldUseRule(rules[i])) return true;\n  }\n\n  function $shouldUseRule($rule) {\n    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));\n  }\n\n  function $ruleImplementsSomeKeyword($rule) {\n    var impl = $rule.implements;\n    for (var i = 0; i < impl.length; i++)\n      if (it.schema[impl[i]] !== undefined) return true;\n  }\n  return out;\n}\n","start":1667202706676,"end":1667202707007},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar validate;\nvar hasRequiredValidate;\n\nfunction requireValidate () {\n\tif (hasRequiredValidate) return validate;\n\thasRequiredValidate = 1;\n\t'use strict';\n\tvalidate = function generate_validate(it, $keyword, $ruleType) {\n\t  var out = '';\n\t  var $async = it.schema.$async === true,\n\t    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\n\t    $id = it.self._getId(it.schema);\n\t  if (it.opts.strictKeywords) {\n\t    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\n\t    if ($unknownKwd) {\n\t      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;\n\t      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);\n\t      else throw new Error($keywordsMsg);\n\t    }\n\t  }\n\t  if (it.isTop) {\n\t    out += ' var validate = ';\n\t    if ($async) {\n\t      it.async = true;\n\t      out += 'async ';\n\t    }\n\t    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\n\t    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n\t      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\n\t    }\n\t  }\n\t  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\n\t    var $keyword = 'false schema';\n\t    var $lvl = it.level;\n\t    var $dataLvl = it.dataLevel;\n\t    var $schema = it.schema[$keyword];\n\t    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n\t    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n\t    var $breakOnError = !it.opts.allErrors;\n\t    var $errorKeyword;\n\t    var $data = 'data' + ($dataLvl || '');\n\t    var $valid = 'valid' + $lvl;\n\t    if (it.schema === false) {\n\t      if (it.isTop) {\n\t        $breakOnError = true;\n\t      } else {\n\t        out += ' var ' + ($valid) + ' = false; ';\n\t      }\n\t      var $$outStack = $$outStack || [];\n\t      $$outStack.push(out);\n\t      out = ''; /* istanbul ignore else */\n\t      if (it.createErrors !== false) {\n\t        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n\t        if (it.opts.messages !== false) {\n\t          out += ' , message: \\'boolean schema is false\\' ';\n\t        }\n\t        if (it.opts.verbose) {\n\t          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t        }\n\t        out += ' } ';\n\t      } else {\n\t        out += ' {} ';\n\t      }\n\t      var __err = out;\n\t      out = $$outStack.pop();\n\t      if (!it.compositeRule && $breakOnError) {\n\t        /* istanbul ignore if */\n\t        if (it.async) {\n\t          out += ' throw new ValidationError([' + (__err) + ']); ';\n\t        } else {\n\t          out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t        }\n\t      } else {\n\t        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t      }\n\t    } else {\n\t      if (it.isTop) {\n\t        if ($async) {\n\t          out += ' return data; ';\n\t        } else {\n\t          out += ' validate.errors = null; return true; ';\n\t        }\n\t      } else {\n\t        out += ' var ' + ($valid) + ' = true; ';\n\t      }\n\t    }\n\t    if (it.isTop) {\n\t      out += ' }; return validate; ';\n\t    }\n\t    return out;\n\t  }\n\t  if (it.isTop) {\n\t    var $top = it.isTop,\n\t      $lvl = it.level = 0,\n\t      $dataLvl = it.dataLevel = 0,\n\t      $data = 'data';\n\t    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n\t    it.baseId = it.baseId || it.rootId;\n\t    delete it.isTop;\n\t    it.dataPathArr = [\"\"];\n\t    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\n\t      var $defaultMsg = 'default is ignored in the schema root';\n\t      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n\t      else throw new Error($defaultMsg);\n\t    }\n\t    out += ' var vErrors = null; ';\n\t    out += ' var errors = 0;     ';\n\t    out += ' if (rootData === undefined) rootData = data; ';\n\t  } else {\n\t    var $lvl = it.level,\n\t      $dataLvl = it.dataLevel,\n\t      $data = 'data' + ($dataLvl || '');\n\t    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\n\t    if ($async && !it.async) throw new Error('async schema in sync schema');\n\t    out += ' var errs_' + ($lvl) + ' = errors;';\n\t  }\n\t  var $valid = 'valid' + $lvl,\n\t    $breakOnError = !it.opts.allErrors,\n\t    $closingBraces1 = '',\n\t    $closingBraces2 = '';\n\t  var $errorKeyword;\n\t  var $typeSchema = it.schema.type,\n\t    $typeIsArray = Array.isArray($typeSchema);\n\t  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\n\t    if ($typeIsArray) {\n\t      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');\n\t    } else if ($typeSchema != 'null') {\n\t      $typeSchema = [$typeSchema, 'null'];\n\t      $typeIsArray = true;\n\t    }\n\t  }\n\t  if ($typeIsArray && $typeSchema.length == 1) {\n\t    $typeSchema = $typeSchema[0];\n\t    $typeIsArray = false;\n\t  }\n\t  if (it.schema.$ref && $refKeywords) {\n\t    if (it.opts.extendRefs == 'fail') {\n\t      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n\t    } else if (it.opts.extendRefs !== true) {\n\t      $refKeywords = false;\n\t      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n\t    }\n\t  }\n\t  if (it.schema.$comment && it.opts.$comment) {\n\t    out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));\n\t  }\n\t  if ($typeSchema) {\n\t    if (it.opts.coerceTypes) {\n\t      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n\t    }\n\t    var $rulesGroup = it.RULES.types[$typeSchema];\n\t    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {\n\t      var $schemaPath = it.schemaPath + '.type',\n\t        $errSchemaPath = it.errSchemaPath + '/type';\n\t      var $schemaPath = it.schemaPath + '.type',\n\t        $errSchemaPath = it.errSchemaPath + '/type',\n\t        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\n\t      out += ' if (' + (it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true)) + ') { ';\n\t      if ($coerceToTypes) {\n\t        var $dataType = 'dataType' + $lvl,\n\t          $coerced = 'coerced' + $lvl;\n\t        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; var ' + ($coerced) + ' = undefined; ';\n\t        if (it.opts.coerceTypes == 'array') {\n\t          out += ' if (' + ($dataType) + ' == \\'object\\' && Array.isArray(' + ($data) + ') && ' + ($data) + '.length == 1) { ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + '; if (' + (it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers)) + ') ' + ($coerced) + ' = ' + ($data) + '; } ';\n\t        }\n\t        out += ' if (' + ($coerced) + ' !== undefined) ; ';\n\t        var arr1 = $coerceToTypes;\n\t        if (arr1) {\n\t          var $type, $i = -1,\n\t            l1 = arr1.length - 1;\n\t          while ($i < l1) {\n\t            $type = arr1[$i += 1];\n\t            if ($type == 'string') {\n\t              out += ' else if (' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\') ' + ($coerced) + ' = \\'\\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \\'\\'; ';\n\t            } else if ($type == 'number' || $type == 'integer') {\n\t              out += ' else if (' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \\'string\\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';\n\t              if ($type == 'integer') {\n\t                out += ' && !(' + ($data) + ' % 1)';\n\t              }\n\t              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';\n\t            } else if ($type == 'boolean') {\n\t              out += ' else if (' + ($data) + ' === \\'false\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \\'true\\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';\n\t            } else if ($type == 'null') {\n\t              out += ' else if (' + ($data) + ' === \\'\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';\n\t            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\n\t              out += ' else if (' + ($dataType) + ' == \\'string\\' || ' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';\n\t            }\n\t          }\n\t        }\n\t        out += ' else {   ';\n\t        var $$outStack = $$outStack || [];\n\t        $$outStack.push(out);\n\t        out = ''; /* istanbul ignore else */\n\t        if (it.createErrors !== false) {\n\t          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n\t          if ($typeIsArray) {\n\t            out += '' + ($typeSchema.join(\",\"));\n\t          } else {\n\t            out += '' + ($typeSchema);\n\t          }\n\t          out += '\\' } ';\n\t          if (it.opts.messages !== false) {\n\t            out += ' , message: \\'should be ';\n\t            if ($typeIsArray) {\n\t              out += '' + ($typeSchema.join(\",\"));\n\t            } else {\n\t              out += '' + ($typeSchema);\n\t            }\n\t            out += '\\' ';\n\t          }\n\t          if (it.opts.verbose) {\n\t            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t          }\n\t          out += ' } ';\n\t        } else {\n\t          out += ' {} ';\n\t        }\n\t        var __err = out;\n\t        out = $$outStack.pop();\n\t        if (!it.compositeRule && $breakOnError) {\n\t          /* istanbul ignore if */\n\t          if (it.async) {\n\t            out += ' throw new ValidationError([' + (__err) + ']); ';\n\t          } else {\n\t            out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t          }\n\t        } else {\n\t          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t        }\n\t        out += ' } if (' + ($coerced) + ' !== undefined) {  ';\n\t        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n\t          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n\t        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';\n\t        if (!$dataLvl) {\n\t          out += 'if (' + ($parentData) + ' !== undefined)';\n\t        }\n\t        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';\n\t      } else {\n\t        var $$outStack = $$outStack || [];\n\t        $$outStack.push(out);\n\t        out = ''; /* istanbul ignore else */\n\t        if (it.createErrors !== false) {\n\t          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n\t          if ($typeIsArray) {\n\t            out += '' + ($typeSchema.join(\",\"));\n\t          } else {\n\t            out += '' + ($typeSchema);\n\t          }\n\t          out += '\\' } ';\n\t          if (it.opts.messages !== false) {\n\t            out += ' , message: \\'should be ';\n\t            if ($typeIsArray) {\n\t              out += '' + ($typeSchema.join(\",\"));\n\t            } else {\n\t              out += '' + ($typeSchema);\n\t            }\n\t            out += '\\' ';\n\t          }\n\t          if (it.opts.verbose) {\n\t            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t          }\n\t          out += ' } ';\n\t        } else {\n\t          out += ' {} ';\n\t        }\n\t        var __err = out;\n\t        out = $$outStack.pop();\n\t        if (!it.compositeRule && $breakOnError) {\n\t          /* istanbul ignore if */\n\t          if (it.async) {\n\t            out += ' throw new ValidationError([' + (__err) + ']); ';\n\t          } else {\n\t            out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t          }\n\t        } else {\n\t          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t        }\n\t      }\n\t      out += ' } ';\n\t    }\n\t  }\n\t  if (it.schema.$ref && !$refKeywords) {\n\t    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';\n\t    if ($breakOnError) {\n\t      out += ' } if (errors === ';\n\t      if ($top) {\n\t        out += '0';\n\t      } else {\n\t        out += 'errs_' + ($lvl);\n\t      }\n\t      out += ') { ';\n\t      $closingBraces2 += '}';\n\t    }\n\t  } else {\n\t    var arr2 = it.RULES;\n\t    if (arr2) {\n\t      var $rulesGroup, i2 = -1,\n\t        l2 = arr2.length - 1;\n\t      while (i2 < l2) {\n\t        $rulesGroup = arr2[i2 += 1];\n\t        if ($shouldUseGroup($rulesGroup)) {\n\t          if ($rulesGroup.type) {\n\t            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers)) + ') { ';\n\t          }\n\t          if (it.opts.useDefaults) {\n\t            if ($rulesGroup.type == 'object' && it.schema.properties) {\n\t              var $schema = it.schema.properties,\n\t                $schemaKeys = Object.keys($schema);\n\t              var arr3 = $schemaKeys;\n\t              if (arr3) {\n\t                var $propertyKey, i3 = -1,\n\t                  l3 = arr3.length - 1;\n\t                while (i3 < l3) {\n\t                  $propertyKey = arr3[i3 += 1];\n\t                  var $sch = $schema[$propertyKey];\n\t                  if ($sch.default !== undefined) {\n\t                    var $passData = $data + it.util.getProperty($propertyKey);\n\t                    if (it.compositeRule) {\n\t                      if (it.opts.strictDefaults) {\n\t                        var $defaultMsg = 'default is ignored for: ' + $passData;\n\t                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n\t                        else throw new Error($defaultMsg);\n\t                      }\n\t                    } else {\n\t                      out += ' if (' + ($passData) + ' === undefined ';\n\t                      if (it.opts.useDefaults == 'empty') {\n\t                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n\t                      }\n\t                      out += ' ) ' + ($passData) + ' = ';\n\t                      if (it.opts.useDefaults == 'shared') {\n\t                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n\t                      } else {\n\t                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n\t                      }\n\t                      out += '; ';\n\t                    }\n\t                  }\n\t                }\n\t              }\n\t            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\n\t              var arr4 = it.schema.items;\n\t              if (arr4) {\n\t                var $sch, $i = -1,\n\t                  l4 = arr4.length - 1;\n\t                while ($i < l4) {\n\t                  $sch = arr4[$i += 1];\n\t                  if ($sch.default !== undefined) {\n\t                    var $passData = $data + '[' + $i + ']';\n\t                    if (it.compositeRule) {\n\t                      if (it.opts.strictDefaults) {\n\t                        var $defaultMsg = 'default is ignored for: ' + $passData;\n\t                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n\t                        else throw new Error($defaultMsg);\n\t                      }\n\t                    } else {\n\t                      out += ' if (' + ($passData) + ' === undefined ';\n\t                      if (it.opts.useDefaults == 'empty') {\n\t                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n\t                      }\n\t                      out += ' ) ' + ($passData) + ' = ';\n\t                      if (it.opts.useDefaults == 'shared') {\n\t                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n\t                      } else {\n\t                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n\t                      }\n\t                      out += '; ';\n\t                    }\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t          var arr5 = $rulesGroup.rules;\n\t          if (arr5) {\n\t            var $rule, i5 = -1,\n\t              l5 = arr5.length - 1;\n\t            while (i5 < l5) {\n\t              $rule = arr5[i5 += 1];\n\t              if ($shouldUseRule($rule)) {\n\t                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n\t                if ($code) {\n\t                  out += ' ' + ($code) + ' ';\n\t                  if ($breakOnError) {\n\t                    $closingBraces1 += '}';\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t          if ($breakOnError) {\n\t            out += ' ' + ($closingBraces1) + ' ';\n\t            $closingBraces1 = '';\n\t          }\n\t          if ($rulesGroup.type) {\n\t            out += ' } ';\n\t            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n\t              out += ' else { ';\n\t              var $schemaPath = it.schemaPath + '.type',\n\t                $errSchemaPath = it.errSchemaPath + '/type';\n\t              var $$outStack = $$outStack || [];\n\t              $$outStack.push(out);\n\t              out = ''; /* istanbul ignore else */\n\t              if (it.createErrors !== false) {\n\t                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n\t                if ($typeIsArray) {\n\t                  out += '' + ($typeSchema.join(\",\"));\n\t                } else {\n\t                  out += '' + ($typeSchema);\n\t                }\n\t                out += '\\' } ';\n\t                if (it.opts.messages !== false) {\n\t                  out += ' , message: \\'should be ';\n\t                  if ($typeIsArray) {\n\t                    out += '' + ($typeSchema.join(\",\"));\n\t                  } else {\n\t                    out += '' + ($typeSchema);\n\t                  }\n\t                  out += '\\' ';\n\t                }\n\t                if (it.opts.verbose) {\n\t                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t                }\n\t                out += ' } ';\n\t              } else {\n\t                out += ' {} ';\n\t              }\n\t              var __err = out;\n\t              out = $$outStack.pop();\n\t              if (!it.compositeRule && $breakOnError) {\n\t                /* istanbul ignore if */\n\t                if (it.async) {\n\t                  out += ' throw new ValidationError([' + (__err) + ']); ';\n\t                } else {\n\t                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t                }\n\t              } else {\n\t                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t              }\n\t              out += ' } ';\n\t            }\n\t          }\n\t          if ($breakOnError) {\n\t            out += ' if (errors === ';\n\t            if ($top) {\n\t              out += '0';\n\t            } else {\n\t              out += 'errs_' + ($lvl);\n\t            }\n\t            out += ') { ';\n\t            $closingBraces2 += '}';\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  if ($breakOnError) {\n\t    out += ' ' + ($closingBraces2) + ' ';\n\t  }\n\t  if ($top) {\n\t    if ($async) {\n\t      out += ' if (errors === 0) return data;           ';\n\t      out += ' else throw new ValidationError(vErrors); ';\n\t    } else {\n\t      out += ' validate.errors = vErrors; ';\n\t      out += ' return errors === 0;       ';\n\t    }\n\t    out += ' }; return validate;';\n\t  } else {\n\t    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';\n\t  }\n\n\t  function $shouldUseGroup($rulesGroup) {\n\t    var rules = $rulesGroup.rules;\n\t    for (var i = 0; i < rules.length; i++)\n\t      if ($shouldUseRule(rules[i])) return true;\n\t  }\n\n\t  function $shouldUseRule($rule) {\n\t    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));\n\t  }\n\n\t  function $ruleImplementsSomeKeyword($rule) {\n\t    var impl = $rule.implements;\n\t    for (var i = 0; i < impl.length; i++)\n\t      if (it.schema[impl[i]] !== undefined) return true;\n\t  }\n\t  return out;\n\t}\n\treturn validate;\n}\n\nexport { requireValidate as __require };","start":1667202707007,"end":1667202707012,"order":"normal"},{"name":"node-polyfills","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar validate;\nvar hasRequiredValidate;\n\nfunction requireValidate () {\n\tif (hasRequiredValidate) return validate;\n\thasRequiredValidate = 1;\n\t'use strict';\n\tvalidate = function generate_validate(it, $keyword, $ruleType) {\n\t  var out = '';\n\t  var $async = it.schema.$async === true,\n\t    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\n\t    $id = it.self._getId(it.schema);\n\t  if (it.opts.strictKeywords) {\n\t    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\n\t    if ($unknownKwd) {\n\t      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;\n\t      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);\n\t      else throw new Error($keywordsMsg);\n\t    }\n\t  }\n\t  if (it.isTop) {\n\t    out += ' var validate = ';\n\t    if ($async) {\n\t      it.async = true;\n\t      out += 'async ';\n\t    }\n\t    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\n\t    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n\t      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\n\t    }\n\t  }\n\t  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\n\t    var $keyword = 'false schema';\n\t    var $lvl = it.level;\n\t    var $dataLvl = it.dataLevel;\n\t    var $schema = it.schema[$keyword];\n\t    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n\t    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n\t    var $breakOnError = !it.opts.allErrors;\n\t    var $errorKeyword;\n\t    var $data = 'data' + ($dataLvl || '');\n\t    var $valid = 'valid' + $lvl;\n\t    if (it.schema === false) {\n\t      if (it.isTop) {\n\t        $breakOnError = true;\n\t      } else {\n\t        out += ' var ' + ($valid) + ' = false; ';\n\t      }\n\t      var $$outStack = $$outStack || [];\n\t      $$outStack.push(out);\n\t      out = ''; /* istanbul ignore else */\n\t      if (it.createErrors !== false) {\n\t        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n\t        if (it.opts.messages !== false) {\n\t          out += ' , message: \\'boolean schema is false\\' ';\n\t        }\n\t        if (it.opts.verbose) {\n\t          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t        }\n\t        out += ' } ';\n\t      } else {\n\t        out += ' {} ';\n\t      }\n\t      var __err = out;\n\t      out = $$outStack.pop();\n\t      if (!it.compositeRule && $breakOnError) {\n\t        /* istanbul ignore if */\n\t        if (it.async) {\n\t          out += ' throw new ValidationError([' + (__err) + ']); ';\n\t        } else {\n\t          out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t        }\n\t      } else {\n\t        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t      }\n\t    } else {\n\t      if (it.isTop) {\n\t        if ($async) {\n\t          out += ' return data; ';\n\t        } else {\n\t          out += ' validate.errors = null; return true; ';\n\t        }\n\t      } else {\n\t        out += ' var ' + ($valid) + ' = true; ';\n\t      }\n\t    }\n\t    if (it.isTop) {\n\t      out += ' }; return validate; ';\n\t    }\n\t    return out;\n\t  }\n\t  if (it.isTop) {\n\t    var $top = it.isTop,\n\t      $lvl = it.level = 0,\n\t      $dataLvl = it.dataLevel = 0,\n\t      $data = 'data';\n\t    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n\t    it.baseId = it.baseId || it.rootId;\n\t    delete it.isTop;\n\t    it.dataPathArr = [\"\"];\n\t    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\n\t      var $defaultMsg = 'default is ignored in the schema root';\n\t      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n\t      else throw new Error($defaultMsg);\n\t    }\n\t    out += ' var vErrors = null; ';\n\t    out += ' var errors = 0;     ';\n\t    out += ' if (rootData === undefined) rootData = data; ';\n\t  } else {\n\t    var $lvl = it.level,\n\t      $dataLvl = it.dataLevel,\n\t      $data = 'data' + ($dataLvl || '');\n\t    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\n\t    if ($async && !it.async) throw new Error('async schema in sync schema');\n\t    out += ' var errs_' + ($lvl) + ' = errors;';\n\t  }\n\t  var $valid = 'valid' + $lvl,\n\t    $breakOnError = !it.opts.allErrors,\n\t    $closingBraces1 = '',\n\t    $closingBraces2 = '';\n\t  var $errorKeyword;\n\t  var $typeSchema = it.schema.type,\n\t    $typeIsArray = Array.isArray($typeSchema);\n\t  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\n\t    if ($typeIsArray) {\n\t      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');\n\t    } else if ($typeSchema != 'null') {\n\t      $typeSchema = [$typeSchema, 'null'];\n\t      $typeIsArray = true;\n\t    }\n\t  }\n\t  if ($typeIsArray && $typeSchema.length == 1) {\n\t    $typeSchema = $typeSchema[0];\n\t    $typeIsArray = false;\n\t  }\n\t  if (it.schema.$ref && $refKeywords) {\n\t    if (it.opts.extendRefs == 'fail') {\n\t      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n\t    } else if (it.opts.extendRefs !== true) {\n\t      $refKeywords = false;\n\t      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n\t    }\n\t  }\n\t  if (it.schema.$comment && it.opts.$comment) {\n\t    out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));\n\t  }\n\t  if ($typeSchema) {\n\t    if (it.opts.coerceTypes) {\n\t      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n\t    }\n\t    var $rulesGroup = it.RULES.types[$typeSchema];\n\t    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {\n\t      var $schemaPath = it.schemaPath + '.type',\n\t        $errSchemaPath = it.errSchemaPath + '/type';\n\t      var $schemaPath = it.schemaPath + '.type',\n\t        $errSchemaPath = it.errSchemaPath + '/type',\n\t        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\n\t      out += ' if (' + (it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true)) + ') { ';\n\t      if ($coerceToTypes) {\n\t        var $dataType = 'dataType' + $lvl,\n\t          $coerced = 'coerced' + $lvl;\n\t        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; var ' + ($coerced) + ' = undefined; ';\n\t        if (it.opts.coerceTypes == 'array') {\n\t          out += ' if (' + ($dataType) + ' == \\'object\\' && Array.isArray(' + ($data) + ') && ' + ($data) + '.length == 1) { ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + '; if (' + (it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers)) + ') ' + ($coerced) + ' = ' + ($data) + '; } ';\n\t        }\n\t        out += ' if (' + ($coerced) + ' !== undefined) ; ';\n\t        var arr1 = $coerceToTypes;\n\t        if (arr1) {\n\t          var $type, $i = -1,\n\t            l1 = arr1.length - 1;\n\t          while ($i < l1) {\n\t            $type = arr1[$i += 1];\n\t            if ($type == 'string') {\n\t              out += ' else if (' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\') ' + ($coerced) + ' = \\'\\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \\'\\'; ';\n\t            } else if ($type == 'number' || $type == 'integer') {\n\t              out += ' else if (' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \\'string\\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';\n\t              if ($type == 'integer') {\n\t                out += ' && !(' + ($data) + ' % 1)';\n\t              }\n\t              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';\n\t            } else if ($type == 'boolean') {\n\t              out += ' else if (' + ($data) + ' === \\'false\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \\'true\\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';\n\t            } else if ($type == 'null') {\n\t              out += ' else if (' + ($data) + ' === \\'\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';\n\t            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\n\t              out += ' else if (' + ($dataType) + ' == \\'string\\' || ' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';\n\t            }\n\t          }\n\t        }\n\t        out += ' else {   ';\n\t        var $$outStack = $$outStack || [];\n\t        $$outStack.push(out);\n\t        out = ''; /* istanbul ignore else */\n\t        if (it.createErrors !== false) {\n\t          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n\t          if ($typeIsArray) {\n\t            out += '' + ($typeSchema.join(\",\"));\n\t          } else {\n\t            out += '' + ($typeSchema);\n\t          }\n\t          out += '\\' } ';\n\t          if (it.opts.messages !== false) {\n\t            out += ' , message: \\'should be ';\n\t            if ($typeIsArray) {\n\t              out += '' + ($typeSchema.join(\",\"));\n\t            } else {\n\t              out += '' + ($typeSchema);\n\t            }\n\t            out += '\\' ';\n\t          }\n\t          if (it.opts.verbose) {\n\t            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t          }\n\t          out += ' } ';\n\t        } else {\n\t          out += ' {} ';\n\t        }\n\t        var __err = out;\n\t        out = $$outStack.pop();\n\t        if (!it.compositeRule && $breakOnError) {\n\t          /* istanbul ignore if */\n\t          if (it.async) {\n\t            out += ' throw new ValidationError([' + (__err) + ']); ';\n\t          } else {\n\t            out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t          }\n\t        } else {\n\t          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t        }\n\t        out += ' } if (' + ($coerced) + ' !== undefined) {  ';\n\t        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n\t          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n\t        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';\n\t        if (!$dataLvl) {\n\t          out += 'if (' + ($parentData) + ' !== undefined)';\n\t        }\n\t        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';\n\t      } else {\n\t        var $$outStack = $$outStack || [];\n\t        $$outStack.push(out);\n\t        out = ''; /* istanbul ignore else */\n\t        if (it.createErrors !== false) {\n\t          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n\t          if ($typeIsArray) {\n\t            out += '' + ($typeSchema.join(\",\"));\n\t          } else {\n\t            out += '' + ($typeSchema);\n\t          }\n\t          out += '\\' } ';\n\t          if (it.opts.messages !== false) {\n\t            out += ' , message: \\'should be ';\n\t            if ($typeIsArray) {\n\t              out += '' + ($typeSchema.join(\",\"));\n\t            } else {\n\t              out += '' + ($typeSchema);\n\t            }\n\t            out += '\\' ';\n\t          }\n\t          if (it.opts.verbose) {\n\t            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t          }\n\t          out += ' } ';\n\t        } else {\n\t          out += ' {} ';\n\t        }\n\t        var __err = out;\n\t        out = $$outStack.pop();\n\t        if (!it.compositeRule && $breakOnError) {\n\t          /* istanbul ignore if */\n\t          if (it.async) {\n\t            out += ' throw new ValidationError([' + (__err) + ']); ';\n\t          } else {\n\t            out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t          }\n\t        } else {\n\t          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t        }\n\t      }\n\t      out += ' } ';\n\t    }\n\t  }\n\t  if (it.schema.$ref && !$refKeywords) {\n\t    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';\n\t    if ($breakOnError) {\n\t      out += ' } if (errors === ';\n\t      if ($top) {\n\t        out += '0';\n\t      } else {\n\t        out += 'errs_' + ($lvl);\n\t      }\n\t      out += ') { ';\n\t      $closingBraces2 += '}';\n\t    }\n\t  } else {\n\t    var arr2 = it.RULES;\n\t    if (arr2) {\n\t      var $rulesGroup, i2 = -1,\n\t        l2 = arr2.length - 1;\n\t      while (i2 < l2) {\n\t        $rulesGroup = arr2[i2 += 1];\n\t        if ($shouldUseGroup($rulesGroup)) {\n\t          if ($rulesGroup.type) {\n\t            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers)) + ') { ';\n\t          }\n\t          if (it.opts.useDefaults) {\n\t            if ($rulesGroup.type == 'object' && it.schema.properties) {\n\t              var $schema = it.schema.properties,\n\t                $schemaKeys = Object.keys($schema);\n\t              var arr3 = $schemaKeys;\n\t              if (arr3) {\n\t                var $propertyKey, i3 = -1,\n\t                  l3 = arr3.length - 1;\n\t                while (i3 < l3) {\n\t                  $propertyKey = arr3[i3 += 1];\n\t                  var $sch = $schema[$propertyKey];\n\t                  if ($sch.default !== undefined) {\n\t                    var $passData = $data + it.util.getProperty($propertyKey);\n\t                    if (it.compositeRule) {\n\t                      if (it.opts.strictDefaults) {\n\t                        var $defaultMsg = 'default is ignored for: ' + $passData;\n\t                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n\t                        else throw new Error($defaultMsg);\n\t                      }\n\t                    } else {\n\t                      out += ' if (' + ($passData) + ' === undefined ';\n\t                      if (it.opts.useDefaults == 'empty') {\n\t                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n\t                      }\n\t                      out += ' ) ' + ($passData) + ' = ';\n\t                      if (it.opts.useDefaults == 'shared') {\n\t                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n\t                      } else {\n\t                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n\t                      }\n\t                      out += '; ';\n\t                    }\n\t                  }\n\t                }\n\t              }\n\t            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\n\t              var arr4 = it.schema.items;\n\t              if (arr4) {\n\t                var $sch, $i = -1,\n\t                  l4 = arr4.length - 1;\n\t                while ($i < l4) {\n\t                  $sch = arr4[$i += 1];\n\t                  if ($sch.default !== undefined) {\n\t                    var $passData = $data + '[' + $i + ']';\n\t                    if (it.compositeRule) {\n\t                      if (it.opts.strictDefaults) {\n\t                        var $defaultMsg = 'default is ignored for: ' + $passData;\n\t                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n\t                        else throw new Error($defaultMsg);\n\t                      }\n\t                    } else {\n\t                      out += ' if (' + ($passData) + ' === undefined ';\n\t                      if (it.opts.useDefaults == 'empty') {\n\t                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n\t                      }\n\t                      out += ' ) ' + ($passData) + ' = ';\n\t                      if (it.opts.useDefaults == 'shared') {\n\t                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n\t                      } else {\n\t                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n\t                      }\n\t                      out += '; ';\n\t                    }\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t          var arr5 = $rulesGroup.rules;\n\t          if (arr5) {\n\t            var $rule, i5 = -1,\n\t              l5 = arr5.length - 1;\n\t            while (i5 < l5) {\n\t              $rule = arr5[i5 += 1];\n\t              if ($shouldUseRule($rule)) {\n\t                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n\t                if ($code) {\n\t                  out += ' ' + ($code) + ' ';\n\t                  if ($breakOnError) {\n\t                    $closingBraces1 += '}';\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t          if ($breakOnError) {\n\t            out += ' ' + ($closingBraces1) + ' ';\n\t            $closingBraces1 = '';\n\t          }\n\t          if ($rulesGroup.type) {\n\t            out += ' } ';\n\t            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n\t              out += ' else { ';\n\t              var $schemaPath = it.schemaPath + '.type',\n\t                $errSchemaPath = it.errSchemaPath + '/type';\n\t              var $$outStack = $$outStack || [];\n\t              $$outStack.push(out);\n\t              out = ''; /* istanbul ignore else */\n\t              if (it.createErrors !== false) {\n\t                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n\t                if ($typeIsArray) {\n\t                  out += '' + ($typeSchema.join(\",\"));\n\t                } else {\n\t                  out += '' + ($typeSchema);\n\t                }\n\t                out += '\\' } ';\n\t                if (it.opts.messages !== false) {\n\t                  out += ' , message: \\'should be ';\n\t                  if ($typeIsArray) {\n\t                    out += '' + ($typeSchema.join(\",\"));\n\t                  } else {\n\t                    out += '' + ($typeSchema);\n\t                  }\n\t                  out += '\\' ';\n\t                }\n\t                if (it.opts.verbose) {\n\t                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t                }\n\t                out += ' } ';\n\t              } else {\n\t                out += ' {} ';\n\t              }\n\t              var __err = out;\n\t              out = $$outStack.pop();\n\t              if (!it.compositeRule && $breakOnError) {\n\t                /* istanbul ignore if */\n\t                if (it.async) {\n\t                  out += ' throw new ValidationError([' + (__err) + ']); ';\n\t                } else {\n\t                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t                }\n\t              } else {\n\t                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t              }\n\t              out += ' } ';\n\t            }\n\t          }\n\t          if ($breakOnError) {\n\t            out += ' if (errors === ';\n\t            if ($top) {\n\t              out += '0';\n\t            } else {\n\t              out += 'errs_' + ($lvl);\n\t            }\n\t            out += ') { ';\n\t            $closingBraces2 += '}';\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  if ($breakOnError) {\n\t    out += ' ' + ($closingBraces2) + ' ';\n\t  }\n\t  if ($top) {\n\t    if ($async) {\n\t      out += ' if (errors === 0) return data;           ';\n\t      out += ' else throw new ValidationError(vErrors); ';\n\t    } else {\n\t      out += ' validate.errors = vErrors; ';\n\t      out += ' return errors === 0;       ';\n\t    }\n\t    out += ' }; return validate;';\n\t  } else {\n\t    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';\n\t  }\n\n\t  function $shouldUseGroup($rulesGroup) {\n\t    var rules = $rulesGroup.rules;\n\t    for (var i = 0; i < rules.length; i++)\n\t      if ($shouldUseRule(rules[i])) return true;\n\t  }\n\n\t  function $shouldUseRule($rule) {\n\t    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));\n\t  }\n\n\t  function $ruleImplementsSomeKeyword($rule) {\n\t    var impl = $rule.implements;\n\t    for (var i = 0; i < impl.length; i++)\n\t      if (it.schema[impl[i]] !== undefined) return true;\n\t  }\n\t  return out;\n\t}\n\treturn validate;\n}\n\nexport { requireValidate as __require };","start":1667202707013,"end":1667202707023,"order":"normal"}]}
