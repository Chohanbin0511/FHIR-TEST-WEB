{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/dnssec.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar utils = require('../utils');\nvar SSHBuffer = require('../ssh-buffer');\nvar Dhe = require('../dhe');\n\nvar supportedAlgos = {\n\t'rsa-sha1' : 5,\n\t'rsa-sha256' : 8,\n\t'rsa-sha512' : 10,\n\t'ecdsa-p256-sha256' : 13,\n\t'ecdsa-p384-sha384' : 14\n\t/*\n\t * ed25519 is hypothetically supported with id 15\n\t * but the common tools available don't appear to be\n\t * capable of generating/using ed25519 keys\n\t */\n};\n\nvar supportedAlgosById = {};\nObject.keys(supportedAlgos).forEach(function (k) {\n\tsupportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n});\n\nfunction read(buf, options) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\tvar lines = buf.split('\\n');\n\tif (lines[0].match(/^Private-key-format\\: v1/)) {\n\t\tvar algElems = lines[1].split(' ');\n\t\tvar algoNum = parseInt(algElems[1], 10);\n\t\tvar algoName = algElems[2];\n\t\tif (!supportedAlgosById[algoNum])\n\t\t\tthrow (new Error('Unsupported algorithm: ' + algoName));\n\t\treturn (readDNSSECPrivateKey(algoNum, lines.slice(2)));\n\t}\n\n\t// skip any comment-lines\n\tvar line = 0;\n\t/* JSSTYLED */\n\twhile (lines[line].match(/^\\;/))\n\t\tline++;\n\t// we should now have *one single* line left with our KEY on it.\n\tif ((lines[line].match(/\\. IN KEY /) ||\n\t    lines[line].match(/\\. IN DNSKEY /)) && lines[line+1].length === 0) {\n\t\treturn (readRFC3110(lines[line]));\n\t}\n\tthrow (new Error('Cannot parse dnssec key'));\n}\n\nfunction readRFC3110(keyString) {\n\tvar elems = keyString.split(' ');\n\t//unused var flags = parseInt(elems[3], 10);\n\t//unused var protocol = parseInt(elems[4], 10);\n\tvar algorithm = parseInt(elems[5], 10);\n\tif (!supportedAlgosById[algorithm])\n\t\tthrow (new Error('Unsupported algorithm: ' + algorithm));\n\tvar base64key = elems.slice(6, elems.length).join();\n\tvar keyBuffer = Buffer.from(base64key, 'base64');\n\tif (supportedAlgosById[algorithm].match(/^RSA-/)) {\n\t\t// join the rest of the body into a single base64-blob\n\t\tvar publicExponentLen = keyBuffer.readUInt8(0);\n\t\tif (publicExponentLen != 3 && publicExponentLen != 1)\n\t\t\tthrow (new Error('Cannot parse dnssec key: ' +\n\t\t\t    'unsupported exponent length'));\n\n\t\tvar publicExponent = keyBuffer.slice(1, publicExponentLen+1);\n\t\tpublicExponent = utils.mpNormalize(publicExponent);\n\t\tvar modulus = keyBuffer.slice(1+publicExponentLen);\n\t\tmodulus = utils.mpNormalize(modulus);\n\t\t// now, make the key\n\t\tvar rsaKey = {\n\t\t\ttype: 'rsa',\n\t\t\tparts: []\n\t\t};\n\t\trsaKey.parts.push({ name: 'e', data: publicExponent});\n\t\trsaKey.parts.push({ name: 'n', data: modulus});\n\t\treturn (new Key(rsaKey));\n\t}\n\tif (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' ||\n\t    supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {\n\t\tvar curve = 'nistp384';\n\t\tvar size = 384;\n\t\tif (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n\t\t\tcurve = 'nistp256';\n\t\t\tsize = 256;\n\t\t}\n\n\t\tvar ecdsaKey = {\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tsize: size,\n\t\t\tparts: [\n\t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n\t\t\t\t{name: 'Q', data: utils.ecNormalize(keyBuffer) }\n\t\t\t]\n\t\t};\n\t\treturn (new Key(ecdsaKey));\n\t}\n\tthrow (new Error('Unsupported algorithm: ' +\n\t    supportedAlgosById[algorithm]));\n}\n\nfunction elementToBuf(e) {\n\treturn (Buffer.from(e.split(' ')[1], 'base64'));\n}\n\nfunction readDNSSECRSAPrivateKey(elements) {\n\tvar rsaParams = {};\n\telements.forEach(function (element) {\n\t\tif (element.split(' ')[0] === 'Modulus:')\n\t\t\trsaParams['n'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'PublicExponent:')\n\t\t\trsaParams['e'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'PrivateExponent:')\n\t\t\trsaParams['d'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Prime1:')\n\t\t\trsaParams['p'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Prime2:')\n\t\t\trsaParams['q'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Exponent1:')\n\t\t\trsaParams['dmodp'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Exponent2:')\n\t\t\trsaParams['dmodq'] = elementToBuf(element);\n\t\telse if (element.split(' ')[0] === 'Coefficient:')\n\t\t\trsaParams['iqmp'] = elementToBuf(element);\n\t});\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: utils.mpNormalize(rsaParams['e'])},\n\t\t\t{ name: 'n', data: utils.mpNormalize(rsaParams['n'])},\n\t\t\t{ name: 'd', data: utils.mpNormalize(rsaParams['d'])},\n\t\t\t{ name: 'p', data: utils.mpNormalize(rsaParams['p'])},\n\t\t\t{ name: 'q', data: utils.mpNormalize(rsaParams['q'])},\n\t\t\t{ name: 'dmodp',\n\t\t\t    data: utils.mpNormalize(rsaParams['dmodp'])},\n\t\t\t{ name: 'dmodq',\n\t\t\t    data: utils.mpNormalize(rsaParams['dmodq'])},\n\t\t\t{ name: 'iqmp',\n\t\t\t    data: utils.mpNormalize(rsaParams['iqmp'])}\n\t\t]\n\t};\n\treturn (new PrivateKey(key));\n}\n\nfunction readDNSSECPrivateKey(alg, elements) {\n\tif (supportedAlgosById[alg].match(/^RSA-/)) {\n\t\treturn (readDNSSECRSAPrivateKey(elements));\n\t}\n\tif (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' ||\n\t    supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\tvar d = Buffer.from(elements[0].split(' ')[1], 'base64');\n\t\tvar curve = 'nistp384';\n\t\tvar size = 384;\n\t\tif (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\t\tcurve = 'nistp256';\n\t\t\tsize = 256;\n\t\t}\n\t\t// DNSSEC generates the public-key on the fly (go calculate it)\n\t\tvar publicKey = utils.publicFromPrivateECDSA(curve, d);\n\t\tvar Q = publicKey.part['Q'].data;\n\t\tvar ecdsaKey = {\n\t\t\ttype: 'ecdsa',\n\t\t\tcurve: curve,\n\t\t\tsize: size,\n\t\t\tparts: [\n\t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n\t\t\t\t{name: 'd', data: d },\n\t\t\t\t{name: 'Q', data: Q }\n\t\t\t]\n\t\t};\n\t\treturn (new PrivateKey(ecdsaKey));\n\t}\n\tthrow (new Error('Unsupported algorithm: ' + supportedAlgosById[alg]));\n}\n\nfunction dnssecTimestamp(date) {\n\tvar year = date.getFullYear() + ''; //stringify\n\tvar month = (date.getMonth() + 1);\n\tvar timestampStr = year + month + date.getUTCDate();\n\ttimestampStr += '' + date.getUTCHours() + date.getUTCMinutes();\n\ttimestampStr += date.getUTCSeconds();\n\treturn (timestampStr);\n}\n\nfunction rsaAlgFromOptions(opts) {\n\tif (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1')\n\t\treturn ('5 (RSASHA1)');\n\telse if (opts.hashAlgo === 'sha256')\n\t\treturn ('8 (RSASHA256)');\n\telse if (opts.hashAlgo === 'sha512')\n\t\treturn ('10 (RSASHA512)');\n\telse\n\t\tthrow (new Error('Unknown or unsupported hash: ' +\n\t\t    opts.hashAlgo));\n}\n\nfunction writeRSA(key, options) {\n\t// if we're missing parts, add them.\n\tif (!key.part.dmodp || !key.part.dmodq) {\n\t\tutils.addRSAMissing(key);\n\t}\n\n\tvar out = '';\n\tout += 'Private-key-format: v1.3\\n';\n\tout += 'Algorithm: ' + rsaAlgFromOptions(options) + '\\n';\n\tvar n = utils.mpDenormalize(key.part['n'].data);\n\tout += 'Modulus: ' + n.toString('base64') + '\\n';\n\tvar e = utils.mpDenormalize(key.part['e'].data);\n\tout += 'PublicExponent: ' + e.toString('base64') + '\\n';\n\tvar d = utils.mpDenormalize(key.part['d'].data);\n\tout += 'PrivateExponent: ' + d.toString('base64') + '\\n';\n\tvar p = utils.mpDenormalize(key.part['p'].data);\n\tout += 'Prime1: ' + p.toString('base64') + '\\n';\n\tvar q = utils.mpDenormalize(key.part['q'].data);\n\tout += 'Prime2: ' + q.toString('base64') + '\\n';\n\tvar dmodp = utils.mpDenormalize(key.part['dmodp'].data);\n\tout += 'Exponent1: ' + dmodp.toString('base64') + '\\n';\n\tvar dmodq = utils.mpDenormalize(key.part['dmodq'].data);\n\tout += 'Exponent2: ' + dmodq.toString('base64') + '\\n';\n\tvar iqmp = utils.mpDenormalize(key.part['iqmp'].data);\n\tout += 'Coefficient: ' + iqmp.toString('base64') + '\\n';\n\t// Assume that we're valid as-of now\n\tvar timestamp = new Date();\n\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\treturn (Buffer.from(out, 'ascii'));\n}\n\nfunction writeECDSA(key, options) {\n\tvar out = '';\n\tout += 'Private-key-format: v1.3\\n';\n\n\tif (key.curve === 'nistp256') {\n\t\tout += 'Algorithm: 13 (ECDSAP256SHA256)\\n';\n\t} else if (key.curve === 'nistp384') {\n\t\tout += 'Algorithm: 14 (ECDSAP384SHA384)\\n';\n\t} else {\n\t\tthrow (new Error('Unsupported curve'));\n\t}\n\tvar base64Key = key.part['d'].data.toString('base64');\n\tout += 'PrivateKey: ' + base64Key + '\\n';\n\n\t// Assume that we're valid as-of now\n\tvar timestamp = new Date();\n\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\n\treturn (Buffer.from(out, 'ascii'));\n}\n\nfunction write(key, options) {\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (key.type === 'rsa') {\n\t\t\treturn (writeRSA(key, options));\n\t\t} else if (key.type === 'ecdsa') {\n\t\t\treturn (writeECDSA(key, options));\n\t\t} else {\n\t\t\tthrow (new Error('Unsupported algorithm: ' + key.type));\n\t\t}\n\t} else if (Key.isKey(key)) {\n\t\t/*\n\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t * don't really have a mechanism for specifying such\n\t\t * additional metadata.\n\t\t */\n\t\tthrow (new Error('Format \"dnssec\" only supports ' +\n\t\t    'writing private keys'));\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n}\n","start":1667202983842,"end":1667202984053},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/ssh-buffer.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/dhe.js?commonjs-wrapped\";\n\nvar dnssec;\nvar hasRequiredDnssec;\n\nfunction requireDnssec () {\n\tif (hasRequiredDnssec) return dnssec;\n\thasRequiredDnssec = 1;\n\t// Copyright 2017 Joyent, Inc.\n\n\tdnssec = {\n\t\tread: read,\n\t\twrite: write\n\t};\n\n\tvar assert = require$$0();\n\tvar Buffer = require$$1().Buffer;\n\tvar Key = require$$2();\n\tvar PrivateKey = require$$3();\n\tvar utils = require$$4();\n\tvar SSHBuffer = require$$5();\n\tvar Dhe = require$$6();\n\n\tvar supportedAlgos = {\n\t\t'rsa-sha1' : 5,\n\t\t'rsa-sha256' : 8,\n\t\t'rsa-sha512' : 10,\n\t\t'ecdsa-p256-sha256' : 13,\n\t\t'ecdsa-p384-sha384' : 14\n\t\t/*\n\t\t * ed25519 is hypothetically supported with id 15\n\t\t * but the common tools available don't appear to be\n\t\t * capable of generating/using ed25519 keys\n\t\t */\n\t};\n\n\tvar supportedAlgosById = {};\n\tObject.keys(supportedAlgos).forEach(function (k) {\n\t\tsupportedAlgosById[supportedAlgos[k]] = k.toUpperCase();\n\t});\n\n\tfunction read(buf, options) {\n\t\tif (typeof (buf) !== 'string') {\n\t\t\tassert.buffer(buf, 'buf');\n\t\t\tbuf = buf.toString('ascii');\n\t\t}\n\t\tvar lines = buf.split('\\n');\n\t\tif (lines[0].match(/^Private-key-format\\: v1/)) {\n\t\t\tvar algElems = lines[1].split(' ');\n\t\t\tvar algoNum = parseInt(algElems[1], 10);\n\t\t\tvar algoName = algElems[2];\n\t\t\tif (!supportedAlgosById[algoNum])\n\t\t\t\tthrow (new Error('Unsupported algorithm: ' + algoName));\n\t\t\treturn (readDNSSECPrivateKey(algoNum, lines.slice(2)));\n\t\t}\n\n\t\t// skip any comment-lines\n\t\tvar line = 0;\n\t\t/* JSSTYLED */\n\t\twhile (lines[line].match(/^\\;/))\n\t\t\tline++;\n\t\t// we should now have *one single* line left with our KEY on it.\n\t\tif ((lines[line].match(/\\. IN KEY /) ||\n\t\t    lines[line].match(/\\. IN DNSKEY /)) && lines[line+1].length === 0) {\n\t\t\treturn (readRFC3110(lines[line]));\n\t\t}\n\t\tthrow (new Error('Cannot parse dnssec key'));\n\t}\n\n\tfunction readRFC3110(keyString) {\n\t\tvar elems = keyString.split(' ');\n\t\t//unused var flags = parseInt(elems[3], 10);\n\t\t//unused var protocol = parseInt(elems[4], 10);\n\t\tvar algorithm = parseInt(elems[5], 10);\n\t\tif (!supportedAlgosById[algorithm])\n\t\t\tthrow (new Error('Unsupported algorithm: ' + algorithm));\n\t\tvar base64key = elems.slice(6, elems.length).join();\n\t\tvar keyBuffer = Buffer.from(base64key, 'base64');\n\t\tif (supportedAlgosById[algorithm].match(/^RSA-/)) {\n\t\t\t// join the rest of the body into a single base64-blob\n\t\t\tvar publicExponentLen = keyBuffer.readUInt8(0);\n\t\t\tif (publicExponentLen != 3 && publicExponentLen != 1)\n\t\t\t\tthrow (new Error('Cannot parse dnssec key: ' +\n\t\t\t\t    'unsupported exponent length'));\n\n\t\t\tvar publicExponent = keyBuffer.slice(1, publicExponentLen+1);\n\t\t\tpublicExponent = utils.mpNormalize(publicExponent);\n\t\t\tvar modulus = keyBuffer.slice(1+publicExponentLen);\n\t\t\tmodulus = utils.mpNormalize(modulus);\n\t\t\t// now, make the key\n\t\t\tvar rsaKey = {\n\t\t\t\ttype: 'rsa',\n\t\t\t\tparts: []\n\t\t\t};\n\t\t\trsaKey.parts.push({ name: 'e', data: publicExponent});\n\t\t\trsaKey.parts.push({ name: 'n', data: modulus});\n\t\t\treturn (new Key(rsaKey));\n\t\t}\n\t\tif (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' ||\n\t\t    supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {\n\t\t\tvar curve = 'nistp384';\n\t\t\tvar size = 384;\n\t\t\tif (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {\n\t\t\t\tcurve = 'nistp256';\n\t\t\t\tsize = 256;\n\t\t\t}\n\n\t\t\tvar ecdsaKey = {\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: curve,\n\t\t\t\tsize: size,\n\t\t\t\tparts: [\n\t\t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n\t\t\t\t\t{name: 'Q', data: utils.ecNormalize(keyBuffer) }\n\t\t\t\t]\n\t\t\t};\n\t\t\treturn (new Key(ecdsaKey));\n\t\t}\n\t\tthrow (new Error('Unsupported algorithm: ' +\n\t\t    supportedAlgosById[algorithm]));\n\t}\n\n\tfunction elementToBuf(e) {\n\t\treturn (Buffer.from(e.split(' ')[1], 'base64'));\n\t}\n\n\tfunction readDNSSECRSAPrivateKey(elements) {\n\t\tvar rsaParams = {};\n\t\telements.forEach(function (element) {\n\t\t\tif (element.split(' ')[0] === 'Modulus:')\n\t\t\t\trsaParams['n'] = elementToBuf(element);\n\t\t\telse if (element.split(' ')[0] === 'PublicExponent:')\n\t\t\t\trsaParams['e'] = elementToBuf(element);\n\t\t\telse if (element.split(' ')[0] === 'PrivateExponent:')\n\t\t\t\trsaParams['d'] = elementToBuf(element);\n\t\t\telse if (element.split(' ')[0] === 'Prime1:')\n\t\t\t\trsaParams['p'] = elementToBuf(element);\n\t\t\telse if (element.split(' ')[0] === 'Prime2:')\n\t\t\t\trsaParams['q'] = elementToBuf(element);\n\t\t\telse if (element.split(' ')[0] === 'Exponent1:')\n\t\t\t\trsaParams['dmodp'] = elementToBuf(element);\n\t\t\telse if (element.split(' ')[0] === 'Exponent2:')\n\t\t\t\trsaParams['dmodq'] = elementToBuf(element);\n\t\t\telse if (element.split(' ')[0] === 'Coefficient:')\n\t\t\t\trsaParams['iqmp'] = elementToBuf(element);\n\t\t});\n\t\t// now, make the key\n\t\tvar key = {\n\t\t\ttype: 'rsa',\n\t\t\tparts: [\n\t\t\t\t{ name: 'e', data: utils.mpNormalize(rsaParams['e'])},\n\t\t\t\t{ name: 'n', data: utils.mpNormalize(rsaParams['n'])},\n\t\t\t\t{ name: 'd', data: utils.mpNormalize(rsaParams['d'])},\n\t\t\t\t{ name: 'p', data: utils.mpNormalize(rsaParams['p'])},\n\t\t\t\t{ name: 'q', data: utils.mpNormalize(rsaParams['q'])},\n\t\t\t\t{ name: 'dmodp',\n\t\t\t\t    data: utils.mpNormalize(rsaParams['dmodp'])},\n\t\t\t\t{ name: 'dmodq',\n\t\t\t\t    data: utils.mpNormalize(rsaParams['dmodq'])},\n\t\t\t\t{ name: 'iqmp',\n\t\t\t\t    data: utils.mpNormalize(rsaParams['iqmp'])}\n\t\t\t]\n\t\t};\n\t\treturn (new PrivateKey(key));\n\t}\n\n\tfunction readDNSSECPrivateKey(alg, elements) {\n\t\tif (supportedAlgosById[alg].match(/^RSA-/)) {\n\t\t\treturn (readDNSSECRSAPrivateKey(elements));\n\t\t}\n\t\tif (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' ||\n\t\t    supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\t\tvar d = Buffer.from(elements[0].split(' ')[1], 'base64');\n\t\t\tvar curve = 'nistp384';\n\t\t\tvar size = 384;\n\t\t\tif (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {\n\t\t\t\tcurve = 'nistp256';\n\t\t\t\tsize = 256;\n\t\t\t}\n\t\t\t// DNSSEC generates the public-key on the fly (go calculate it)\n\t\t\tvar publicKey = utils.publicFromPrivateECDSA(curve, d);\n\t\t\tvar Q = publicKey.part['Q'].data;\n\t\t\tvar ecdsaKey = {\n\t\t\t\ttype: 'ecdsa',\n\t\t\t\tcurve: curve,\n\t\t\t\tsize: size,\n\t\t\t\tparts: [\n\t\t\t\t\t{name: 'curve', data: Buffer.from(curve) },\n\t\t\t\t\t{name: 'd', data: d },\n\t\t\t\t\t{name: 'Q', data: Q }\n\t\t\t\t]\n\t\t\t};\n\t\t\treturn (new PrivateKey(ecdsaKey));\n\t\t}\n\t\tthrow (new Error('Unsupported algorithm: ' + supportedAlgosById[alg]));\n\t}\n\n\tfunction dnssecTimestamp(date) {\n\t\tvar year = date.getFullYear() + ''; //stringify\n\t\tvar month = (date.getMonth() + 1);\n\t\tvar timestampStr = year + month + date.getUTCDate();\n\t\ttimestampStr += '' + date.getUTCHours() + date.getUTCMinutes();\n\t\ttimestampStr += date.getUTCSeconds();\n\t\treturn (timestampStr);\n\t}\n\n\tfunction rsaAlgFromOptions(opts) {\n\t\tif (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1')\n\t\t\treturn ('5 (RSASHA1)');\n\t\telse if (opts.hashAlgo === 'sha256')\n\t\t\treturn ('8 (RSASHA256)');\n\t\telse if (opts.hashAlgo === 'sha512')\n\t\t\treturn ('10 (RSASHA512)');\n\t\telse\n\t\t\tthrow (new Error('Unknown or unsupported hash: ' +\n\t\t\t    opts.hashAlgo));\n\t}\n\n\tfunction writeRSA(key, options) {\n\t\t// if we're missing parts, add them.\n\t\tif (!key.part.dmodp || !key.part.dmodq) {\n\t\t\tutils.addRSAMissing(key);\n\t\t}\n\n\t\tvar out = '';\n\t\tout += 'Private-key-format: v1.3\\n';\n\t\tout += 'Algorithm: ' + rsaAlgFromOptions(options) + '\\n';\n\t\tvar n = utils.mpDenormalize(key.part['n'].data);\n\t\tout += 'Modulus: ' + n.toString('base64') + '\\n';\n\t\tvar e = utils.mpDenormalize(key.part['e'].data);\n\t\tout += 'PublicExponent: ' + e.toString('base64') + '\\n';\n\t\tvar d = utils.mpDenormalize(key.part['d'].data);\n\t\tout += 'PrivateExponent: ' + d.toString('base64') + '\\n';\n\t\tvar p = utils.mpDenormalize(key.part['p'].data);\n\t\tout += 'Prime1: ' + p.toString('base64') + '\\n';\n\t\tvar q = utils.mpDenormalize(key.part['q'].data);\n\t\tout += 'Prime2: ' + q.toString('base64') + '\\n';\n\t\tvar dmodp = utils.mpDenormalize(key.part['dmodp'].data);\n\t\tout += 'Exponent1: ' + dmodp.toString('base64') + '\\n';\n\t\tvar dmodq = utils.mpDenormalize(key.part['dmodq'].data);\n\t\tout += 'Exponent2: ' + dmodq.toString('base64') + '\\n';\n\t\tvar iqmp = utils.mpDenormalize(key.part['iqmp'].data);\n\t\tout += 'Coefficient: ' + iqmp.toString('base64') + '\\n';\n\t\t// Assume that we're valid as-of now\n\t\tvar timestamp = new Date();\n\t\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\t\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\t\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\t\treturn (Buffer.from(out, 'ascii'));\n\t}\n\n\tfunction writeECDSA(key, options) {\n\t\tvar out = '';\n\t\tout += 'Private-key-format: v1.3\\n';\n\n\t\tif (key.curve === 'nistp256') {\n\t\t\tout += 'Algorithm: 13 (ECDSAP256SHA256)\\n';\n\t\t} else if (key.curve === 'nistp384') {\n\t\t\tout += 'Algorithm: 14 (ECDSAP384SHA384)\\n';\n\t\t} else {\n\t\t\tthrow (new Error('Unsupported curve'));\n\t\t}\n\t\tvar base64Key = key.part['d'].data.toString('base64');\n\t\tout += 'PrivateKey: ' + base64Key + '\\n';\n\n\t\t// Assume that we're valid as-of now\n\t\tvar timestamp = new Date();\n\t\tout += 'Created: ' + dnssecTimestamp(timestamp) + '\\n';\n\t\tout += 'Publish: ' + dnssecTimestamp(timestamp) + '\\n';\n\t\tout += 'Activate: ' + dnssecTimestamp(timestamp) + '\\n';\n\n\t\treturn (Buffer.from(out, 'ascii'));\n\t}\n\n\tfunction write(key, options) {\n\t\tif (PrivateKey.isPrivateKey(key)) {\n\t\t\tif (key.type === 'rsa') {\n\t\t\t\treturn (writeRSA(key, options));\n\t\t\t} else if (key.type === 'ecdsa') {\n\t\t\t\treturn (writeECDSA(key, options));\n\t\t\t} else {\n\t\t\t\tthrow (new Error('Unsupported algorithm: ' + key.type));\n\t\t\t}\n\t\t} else if (Key.isKey(key)) {\n\t\t\t/*\n\t\t\t * RFC3110 requires a keyname, and a keytype, which we\n\t\t\t * don't really have a mechanism for specifying such\n\t\t\t * additional metadata.\n\t\t\t */\n\t\t\tthrow (new Error('Format \"dnssec\" only supports ' +\n\t\t\t    'writing private keys'));\n\t\t} else {\n\t\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t\t}\n\t}\n\treturn dnssec;\n}\n\nexport { requireDnssec as __require };","start":1667202984053,"end":1667202984904,"order":"normal"}]}
