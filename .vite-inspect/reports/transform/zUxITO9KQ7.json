{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/x509.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2017 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\tverify: verify,\n\tsign: sign,\n\tsignAsync: signAsync,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar Identity = require('../identity');\nvar Signature = require('../signature');\nvar Certificate = require('../certificate');\nvar pkcs8 = require('./pkcs8');\n\n/*\n * This file is based on RFC5280 (X.509).\n */\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction verify(cert, key) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tvar algParts = sig.algo.split('-');\n\tif (algParts[0] !== key.type)\n\t\treturn (false);\n\n\tvar blob = sig.cache;\n\tif (blob === undefined) {\n\t\tvar der = new asn1.BerWriter();\n\t\twriteTBSCert(cert, der);\n\t\tblob = der.buffer;\n\t}\n\n\tvar verifier = key.createVerify(algParts[1]);\n\tverifier.write(blob);\n\treturn (verifier.verify(sig.signature));\n}\n\nfunction Local(i) {\n\treturn (asn1.Ber.Context | asn1.Ber.Constructor | i);\n}\n\nfunction Context(i) {\n\treturn (asn1.Ber.Context | i);\n}\n\nvar SIGN_ALGS = {\n\t'rsa-md5': '1.2.840.113549.1.1.4',\n\t'rsa-sha1': '1.2.840.113549.1.1.5',\n\t'rsa-sha256': '1.2.840.113549.1.1.11',\n\t'rsa-sha384': '1.2.840.113549.1.1.12',\n\t'rsa-sha512': '1.2.840.113549.1.1.13',\n\t'dsa-sha1': '1.2.840.10040.4.3',\n\t'dsa-sha256': '2.16.840.1.101.3.4.3.2',\n\t'ecdsa-sha1': '1.2.840.10045.4.1',\n\t'ecdsa-sha256': '1.2.840.10045.4.3.2',\n\t'ecdsa-sha384': '1.2.840.10045.4.3.3',\n\t'ecdsa-sha512': '1.2.840.10045.4.3.4',\n\t'ed25519-sha512': '1.3.101.112'\n};\nObject.keys(SIGN_ALGS).forEach(function (k) {\n\tSIGN_ALGS[SIGN_ALGS[k]] = k;\n});\nSIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';\nSIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';\n\nvar EXTS = {\n\t'issuerKeyId': '2.5.29.35',\n\t'altName': '2.5.29.17',\n\t'basicConstraints': '2.5.29.19',\n\t'keyUsage': '2.5.29.15',\n\t'extKeyUsage': '2.5.29.37'\n};\n\nfunction read(buf, options) {\n\tif (typeof (buf) === 'string') {\n\t\tbuf = Buffer.from(buf, 'binary');\n\t}\n\tassert.buffer(buf, 'buf');\n\n\tvar der = new asn1.BerReader(buf);\n\n\tder.readSequence();\n\tif (Math.abs(der.length - der.remain) > 1) {\n\t\tthrow (new Error('DER sequence does not contain whole byte ' +\n\t\t    'stream'));\n\t}\n\n\tvar tbsStart = der.offset;\n\tder.readSequence();\n\tvar sigOffset = der.offset + der.length;\n\tvar tbsEnd = sigOffset;\n\n\tif (der.peek() === Local(0)) {\n\t\tder.readSequence(Local(0));\n\t\tvar version = der.readInt();\n\t\tassert.ok(version <= 3,\n\t\t    'only x.509 versions up to v3 supported');\n\t}\n\n\tvar cert = {};\n\tcert.signatures = {};\n\tvar sig = (cert.signatures.x509 = {});\n\tsig.extras = {};\n\n\tcert.serial = readMPInt(der, 'serial');\n\n\tder.readSequence();\n\tvar after = der.offset + der.length;\n\tvar certAlgOid = der.readOID();\n\tvar certAlg = SIGN_ALGS[certAlgOid];\n\tif (certAlg === undefined)\n\t\tthrow (new Error('unknown signature algorithm ' + certAlgOid));\n\n\tder._offset = after;\n\tcert.issuer = Identity.parseAsn1(der);\n\n\tder.readSequence();\n\tcert.validFrom = readDate(der);\n\tcert.validUntil = readDate(der);\n\n\tcert.subjects = [Identity.parseAsn1(der)];\n\n\tder.readSequence();\n\tafter = der.offset + der.length;\n\tcert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);\n\tder._offset = after;\n\n\t/* issuerUniqueID */\n\tif (der.peek() === Local(1)) {\n\t\tder.readSequence(Local(1));\n\t\tsig.extras.issuerUniqueID =\n\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\tder._offset += der.length;\n\t}\n\n\t/* subjectUniqueID */\n\tif (der.peek() === Local(2)) {\n\t\tder.readSequence(Local(2));\n\t\tsig.extras.subjectUniqueID =\n\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\tder._offset += der.length;\n\t}\n\n\t/* extensions */\n\tif (der.peek() === Local(3)) {\n\t\tder.readSequence(Local(3));\n\t\tvar extEnd = der.offset + der.length;\n\t\tder.readSequence();\n\n\t\twhile (der.offset < extEnd)\n\t\t\treadExtension(cert, buf, der);\n\n\t\tassert.strictEqual(der.offset, extEnd);\n\t}\n\n\tassert.strictEqual(der.offset, sigOffset);\n\n\tder.readSequence();\n\tafter = der.offset + der.length;\n\tvar sigAlgOid = der.readOID();\n\tvar sigAlg = SIGN_ALGS[sigAlgOid];\n\tif (sigAlg === undefined)\n\t\tthrow (new Error('unknown signature algorithm ' + sigAlgOid));\n\tder._offset = after;\n\n\tvar sigData = der.readString(asn1.Ber.BitString, true);\n\tif (sigData[0] === 0)\n\t\tsigData = sigData.slice(1);\n\tvar algParts = sigAlg.split('-');\n\n\tsig.signature = Signature.parse(sigData, algParts[0], 'asn1');\n\tsig.signature.hashAlgorithm = algParts[1];\n\tsig.algo = sigAlg;\n\tsig.cache = buf.slice(tbsStart, tbsEnd);\n\n\treturn (new Certificate(cert));\n}\n\nfunction readDate(der) {\n\tif (der.peek() === asn1.Ber.UTCTime) {\n\t\treturn (utcTimeToDate(der.readString(asn1.Ber.UTCTime)));\n\t} else if (der.peek() === asn1.Ber.GeneralizedTime) {\n\t\treturn (gTimeToDate(der.readString(asn1.Ber.GeneralizedTime)));\n\t} else {\n\t\tthrow (new Error('Unsupported date format'));\n\t}\n}\n\nfunction writeDate(der, date) {\n\tif (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {\n\t\tder.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);\n\t} else {\n\t\tder.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);\n\t}\n}\n\n/* RFC5280, section 4.2.1.6 (GeneralName type) */\nvar ALTNAME = {\n\tOtherName: Local(0),\n\tRFC822Name: Context(1),\n\tDNSName: Context(2),\n\tX400Address: Local(3),\n\tDirectoryName: Local(4),\n\tEDIPartyName: Local(5),\n\tURI: Context(6),\n\tIPAddress: Context(7),\n\tOID: Context(8)\n};\n\n/* RFC5280, section 4.2.1.12 (KeyPurposeId) */\nvar EXTPURPOSE = {\n\t'serverAuth': '1.3.6.1.5.5.7.3.1',\n\t'clientAuth': '1.3.6.1.5.5.7.3.2',\n\t'codeSigning': '1.3.6.1.5.5.7.3.3',\n\n\t/* See https://github.com/joyent/oid-docs/blob/master/root.md */\n\t'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',\n\t'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'\n};\nvar EXTPURPOSE_REV = {};\nObject.keys(EXTPURPOSE).forEach(function (k) {\n\tEXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n});\n\nvar KEYUSEBITS = [\n\t'signature', 'identity', 'keyEncryption',\n\t'encryption', 'keyAgreement', 'ca', 'crl'\n];\n\nfunction readExtension(cert, buf, der) {\n\tder.readSequence();\n\tvar after = der.offset + der.length;\n\tvar extId = der.readOID();\n\tvar id;\n\tvar sig = cert.signatures.x509;\n\tif (!sig.extras.exts)\n\t\tsig.extras.exts = [];\n\n\tvar critical;\n\tif (der.peek() === asn1.Ber.Boolean)\n\t\tcritical = der.readBoolean();\n\n\tswitch (extId) {\n\tcase (EXTS.basicConstraints):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tvar bcEnd = der.offset + der.length;\n\t\tvar ca = false;\n\t\tif (der.peek() === asn1.Ber.Boolean)\n\t\t\tca = der.readBoolean();\n\t\tif (cert.purposes === undefined)\n\t\t\tcert.purposes = [];\n\t\tif (ca === true)\n\t\t\tcert.purposes.push('ca');\n\t\tvar bc = { oid: extId, critical: critical };\n\t\tif (der.offset < bcEnd && der.peek() === asn1.Ber.Integer)\n\t\t\tbc.pathLen = der.readInt();\n\t\tsig.extras.exts.push(bc);\n\t\tbreak;\n\tcase (EXTS.extKeyUsage):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tif (cert.purposes === undefined)\n\t\t\tcert.purposes = [];\n\t\tvar ekEnd = der.offset + der.length;\n\t\twhile (der.offset < ekEnd) {\n\t\t\tvar oid = der.readOID();\n\t\t\tcert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n\t\t}\n\t\t/*\n\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t * the other), we want to make sure all our Subjects are of\n\t\t * the right type. But we already parsed our Subjects and\n\t\t * decided if they were hosts or users earlier (since it appears\n\t\t * first in the cert).\n\t\t *\n\t\t * So we go through and mutate them into the right kind here if\n\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t * seems that single-purpose certs are not often seen in the\n\t\t * wild.\n\t\t */\n\t\tif (cert.purposes.indexOf('serverAuth') !== -1 &&\n\t\t    cert.purposes.indexOf('clientAuth') === -1) {\n\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\tif (ide.type !== 'host') {\n\t\t\t\t\tide.type = 'host';\n\t\t\t\t\tide.hostname = ide.uid ||\n\t\t\t\t\t    ide.email ||\n\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (cert.purposes.indexOf('clientAuth') !== -1 &&\n\t\t    cert.purposes.indexOf('serverAuth') === -1) {\n\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\tif (ide.type !== 'user') {\n\t\t\t\t\tide.type = 'user';\n\t\t\t\t\tide.uid = ide.hostname ||\n\t\t\t\t\t    ide.email ||\n\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\tbreak;\n\tcase (EXTS.keyUsage):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tvar bits = der.readString(asn1.Ber.BitString, true);\n\t\tvar setBits = readBitField(bits, KEYUSEBITS);\n\t\tsetBits.forEach(function (bit) {\n\t\t\tif (cert.purposes === undefined)\n\t\t\t\tcert.purposes = [];\n\t\t\tif (cert.purposes.indexOf(bit) === -1)\n\t\t\t\tcert.purposes.push(bit);\n\t\t});\n\t\tsig.extras.exts.push({ oid: extId, critical: critical,\n\t\t    bits: bits });\n\t\tbreak;\n\tcase (EXTS.altName):\n\t\tder.readSequence(asn1.Ber.OctetString);\n\t\tder.readSequence();\n\t\tvar aeEnd = der.offset + der.length;\n\t\twhile (der.offset < aeEnd) {\n\t\t\tswitch (der.peek()) {\n\t\t\tcase ALTNAME.OtherName:\n\t\t\tcase ALTNAME.EDIPartyName:\n\t\t\t\tder.readSequence();\n\t\t\t\tder._offset += der.length;\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.OID:\n\t\t\t\tder.readOID(ALTNAME.OID);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.RFC822Name:\n\t\t\t\t/* RFC822 specifies email addresses */\n\t\t\t\tvar email = der.readString(ALTNAME.RFC822Name);\n\t\t\t\tid = Identity.forEmail(email);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.DirectoryName:\n\t\t\t\tder.readSequence(ALTNAME.DirectoryName);\n\t\t\t\tid = Identity.parseAsn1(der);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tcase ALTNAME.DNSName:\n\t\t\t\tvar host = der.readString(\n\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\tid = Identity.forHost(host);\n\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tder.readString(der.peek());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\tbreak;\n\tdefault:\n\t\tsig.extras.exts.push({\n\t\t\toid: extId,\n\t\t\tcritical: critical,\n\t\t\tdata: der.readString(asn1.Ber.OctetString, true)\n\t\t});\n\t\tbreak;\n\t}\n\n\tder._offset = after;\n}\n\nvar UTCTIME_RE =\n    /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction utcTimeToDate(t) {\n\tvar m = t.match(UTCTIME_RE);\n\tassert.ok(m, 'timestamps must be in UTC');\n\tvar d = new Date();\n\n\tvar thisYear = d.getUTCFullYear();\n\tvar century = Math.floor(thisYear / 100) * 100;\n\n\tvar year = parseInt(m[1], 10);\n\tif (thisYear % 100 < 50 && year >= 60)\n\t\tyear += (century - 1);\n\telse\n\t\tyear += century;\n\td.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\tif (m[6] && m[6].length > 0)\n\t\td.setUTCSeconds(parseInt(m[6], 10));\n\treturn (d);\n}\n\nvar GTIME_RE =\n    /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\nfunction gTimeToDate(t) {\n\tvar m = t.match(GTIME_RE);\n\tassert.ok(m);\n\tvar d = new Date();\n\n\td.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,\n\t    parseInt(m[3], 10));\n\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\tif (m[6] && m[6].length > 0)\n\t\td.setUTCSeconds(parseInt(m[6], 10));\n\treturn (d);\n}\n\nfunction zeroPad(n, m) {\n\tif (m === undefined)\n\t\tm = 2;\n\tvar s = '' + n;\n\twhile (s.length < m)\n\t\ts = '0' + s;\n\treturn (s);\n}\n\nfunction dateToUTCTime(d) {\n\tvar s = '';\n\ts += zeroPad(d.getUTCFullYear() % 100);\n\ts += zeroPad(d.getUTCMonth() + 1);\n\ts += zeroPad(d.getUTCDate());\n\ts += zeroPad(d.getUTCHours());\n\ts += zeroPad(d.getUTCMinutes());\n\ts += zeroPad(d.getUTCSeconds());\n\ts += 'Z';\n\treturn (s);\n}\n\nfunction dateToGTime(d) {\n\tvar s = '';\n\ts += zeroPad(d.getUTCFullYear(), 4);\n\ts += zeroPad(d.getUTCMonth() + 1);\n\ts += zeroPad(d.getUTCDate());\n\ts += zeroPad(d.getUTCHours());\n\ts += zeroPad(d.getUTCMinutes());\n\ts += zeroPad(d.getUTCSeconds());\n\ts += 'Z';\n\treturn (s);\n}\n\nfunction sign(cert, key) {\n\tif (cert.signatures.x509 === undefined)\n\t\tcert.signatures.x509 = {};\n\tvar sig = cert.signatures.x509;\n\n\tsig.algo = key.type + '-' + key.defaultHashAlgorithm();\n\tif (SIGN_ALGS[sig.algo] === undefined)\n\t\treturn (false);\n\n\tvar der = new asn1.BerWriter();\n\twriteTBSCert(cert, der);\n\tvar blob = der.buffer;\n\tsig.cache = blob;\n\n\tvar signer = key.createSign();\n\tsigner.write(blob);\n\tcert.signatures.x509.signature = signer.sign();\n\n\treturn (true);\n}\n\nfunction signAsync(cert, signer, done) {\n\tif (cert.signatures.x509 === undefined)\n\t\tcert.signatures.x509 = {};\n\tvar sig = cert.signatures.x509;\n\n\tvar der = new asn1.BerWriter();\n\twriteTBSCert(cert, der);\n\tvar blob = der.buffer;\n\tsig.cache = blob;\n\n\tsigner(blob, function (err, signature) {\n\t\tif (err) {\n\t\t\tdone(err);\n\t\t\treturn;\n\t\t}\n\t\tsig.algo = signature.type + '-' + signature.hashAlgorithm;\n\t\tif (SIGN_ALGS[sig.algo] === undefined) {\n\t\t\tdone(new Error('Invalid signing algorithm \"' +\n\t\t\t    sig.algo + '\"'));\n\t\t\treturn;\n\t\t}\n\t\tsig.signature = signature;\n\t\tdone();\n\t});\n}\n\nfunction write(cert, options) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tvar der = new asn1.BerWriter();\n\tder.startSequence();\n\tif (sig.cache) {\n\t\tder._ensure(sig.cache.length);\n\t\tsig.cache.copy(der._buf, der._offset);\n\t\tder._offset += sig.cache.length;\n\t} else {\n\t\twriteTBSCert(cert, der);\n\t}\n\n\tder.startSequence();\n\tder.writeOID(SIGN_ALGS[sig.algo]);\n\tif (sig.algo.match(/^rsa-/))\n\t\tder.writeNull();\n\tder.endSequence();\n\n\tvar sigData = sig.signature.toBuffer('asn1');\n\tvar data = Buffer.alloc(sigData.length + 1);\n\tdata[0] = 0;\n\tsigData.copy(data, 1);\n\tder.writeBuffer(data, asn1.Ber.BitString);\n\tder.endSequence();\n\n\treturn (der.buffer);\n}\n\nfunction writeTBSCert(cert, der) {\n\tvar sig = cert.signatures.x509;\n\tassert.object(sig, 'x509 signature');\n\n\tder.startSequence();\n\n\tder.startSequence(Local(0));\n\tder.writeInt(2);\n\tder.endSequence();\n\n\tder.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n\n\tder.startSequence();\n\tder.writeOID(SIGN_ALGS[sig.algo]);\n\tif (sig.algo.match(/^rsa-/))\n\t\tder.writeNull();\n\tder.endSequence();\n\n\tcert.issuer.toAsn1(der);\n\n\tder.startSequence();\n\twriteDate(der, cert.validFrom);\n\twriteDate(der, cert.validUntil);\n\tder.endSequence();\n\n\tvar subject = cert.subjects[0];\n\tvar altNames = cert.subjects.slice(1);\n\tsubject.toAsn1(der);\n\n\tpkcs8.writePkcs8(der, cert.subjectKey);\n\n\tif (sig.extras && sig.extras.issuerUniqueID) {\n\t\tder.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n\t}\n\n\tif (sig.extras && sig.extras.subjectUniqueID) {\n\t\tder.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n\t}\n\n\tif (altNames.length > 0 || subject.type === 'host' ||\n\t    (cert.purposes !== undefined && cert.purposes.length > 0) ||\n\t    (sig.extras && sig.extras.exts)) {\n\t\tder.startSequence(Local(3));\n\t\tder.startSequence();\n\n\t\tvar exts = [];\n\t\tif (cert.purposes !== undefined && cert.purposes.length > 0) {\n\t\t\texts.push({\n\t\t\t\toid: EXTS.basicConstraints,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t\texts.push({\n\t\t\t\toid: EXTS.keyUsage,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t\texts.push({\n\t\t\t\toid: EXTS.extKeyUsage,\n\t\t\t\tcritical: true\n\t\t\t});\n\t\t}\n\t\texts.push({ oid: EXTS.altName });\n\t\tif (sig.extras && sig.extras.exts)\n\t\t\texts = sig.extras.exts;\n\n\t\tfor (var i = 0; i < exts.length; ++i) {\n\t\t\tder.startSequence();\n\t\t\tder.writeOID(exts[i].oid);\n\n\t\t\tif (exts[i].critical !== undefined)\n\t\t\t\tder.writeBoolean(exts[i].critical);\n\n\t\t\tif (exts[i].oid === EXTS.altName) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tif (subject.type === 'host') {\n\t\t\t\t\tder.writeString(subject.hostname,\n\t\t\t\t\t    Context(2));\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < altNames.length; ++j) {\n\t\t\t\t\tif (altNames[j].type === 'host') {\n\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t    altNames[j].hostname,\n\t\t\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\t\t} else if (altNames[j].type ===\n\t\t\t\t\t    'email') {\n\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t    altNames[j].email,\n\t\t\t\t\t\t    ALTNAME.RFC822Name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tder.startSequence(\n\t\t\t\t\t\t    ALTNAME.DirectoryName);\n\t\t\t\t\t\taltNames[j].toAsn1(der);\n\t\t\t\t\t\tder.endSequence();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.basicConstraints) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tvar ca = (cert.purposes.indexOf('ca') !== -1);\n\t\t\t\tvar pathLen = exts[i].pathLen;\n\t\t\t\tder.writeBoolean(ca);\n\t\t\t\tif (pathLen !== undefined)\n\t\t\t\t\tder.writeInt(pathLen);\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.extKeyUsage) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\tder.startSequence();\n\t\t\t\tcert.purposes.forEach(function (purpose) {\n\t\t\t\t\tif (purpose === 'ca')\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif (KEYUSEBITS.indexOf(purpose) !== -1)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tvar oid = purpose;\n\t\t\t\t\tif (EXTPURPOSE[purpose] !== undefined)\n\t\t\t\t\t\toid = EXTPURPOSE[purpose];\n\t\t\t\t\tder.writeOID(oid);\n\t\t\t\t});\n\t\t\t\tder.endSequence();\n\t\t\t\tder.endSequence();\n\t\t\t} else if (exts[i].oid === EXTS.keyUsage) {\n\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\t/*\n\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t *\n\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t * validate.\n\t\t\t\t */\n\t\t\t\tif (exts[i].bits !== undefined) {\n\t\t\t\t\tder.writeBuffer(exts[i].bits,\n\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t} else {\n\t\t\t\t\tvar bits = writeBitField(cert.purposes,\n\t\t\t\t\t    KEYUSEBITS);\n\t\t\t\t\tder.writeBuffer(bits,\n\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t}\n\t\t\t\tder.endSequence();\n\t\t\t} else {\n\t\t\t\tder.writeBuffer(exts[i].data,\n\t\t\t\t    asn1.Ber.OctetString);\n\t\t\t}\n\n\t\t\tder.endSequence();\n\t\t}\n\n\t\tder.endSequence();\n\t\tder.endSequence();\n\t}\n\n\tder.endSequence();\n}\n\n/*\n * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n * contents of the BitString tag, which is a count of unused bits followed by\n * the bits as a right-padded byte string.\n *\n * `bits` is the Buffer, `bitIndex` should contain an array of string names\n * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n *\n * Returns an array of Strings, the names of the bits that were set to 1.\n */\nfunction readBitField(bits, bitIndex) {\n\tvar bitLen = 8 * (bits.length - 1) - bits[0];\n\tvar setBits = {};\n\tfor (var i = 0; i < bitLen; ++i) {\n\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\tvar bit = 7 - (i % 8);\n\t\tvar mask = 1 << bit;\n\t\tvar bitVal = ((bits[byteN] & mask) !== 0);\n\t\tvar name = bitIndex[i];\n\t\tif (bitVal && typeof (name) === 'string') {\n\t\t\tsetBits[name] = true;\n\t\t}\n\t}\n\treturn (Object.keys(setBits));\n}\n\n/*\n * `setBits` is an array of strings, containing the names for each bit that\n * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n *\n * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n */\nfunction writeBitField(setBits, bitIndex) {\n\tvar bitLen = bitIndex.length;\n\tvar blen = Math.ceil(bitLen / 8);\n\tvar unused = blen * 8 - bitLen;\n\tvar bits = Buffer.alloc(1 + blen); // zero-filled\n\tbits[0] = unused;\n\tfor (var i = 0; i < bitLen; ++i) {\n\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\tvar bit = 7 - (i % 8);\n\t\tvar mask = 1 << bit;\n\t\tvar name = bitIndex[i];\n\t\tif (name === undefined)\n\t\t\tcontinue;\n\t\tvar bitVal = (setBits.indexOf(name) !== -1);\n\t\tif (bitVal) {\n\t\t\tbits[byteN] |= mask;\n\t\t}\n\t}\n\treturn (bits);\n}\n","start":1667202983879,"end":1667202984177},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/asn1/lib/index.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/algs.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/pem.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/identity.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/signature.js?commonjs-wrapped\";\nimport { __require as require$$10 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/certificate.js?commonjs-wrapped\";\nimport { __require as require$$11 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/pkcs8.js?commonjs-wrapped\";\n\nvar x509;\nvar hasRequiredX509;\n\nfunction requireX509 () {\n\tif (hasRequiredX509) return x509;\n\thasRequiredX509 = 1;\n\t// Copyright 2017 Joyent, Inc.\n\n\tx509 = {\n\t\tread: read,\n\t\tverify: verify,\n\t\tsign: sign,\n\t\tsignAsync: signAsync,\n\t\twrite: write\n\t};\n\n\tvar assert = require$$0();\n\tvar asn1 = require$$1();\n\tvar Buffer = require$$2().Buffer;\n\tvar algs = require$$3();\n\tvar utils = require$$4();\n\tvar Key = require$$5();\n\tvar PrivateKey = require$$6();\n\tvar pem = require$$7();\n\tvar Identity = require$$8();\n\tvar Signature = require$$9();\n\tvar Certificate = require$$10();\n\tvar pkcs8 = require$$11();\n\n\t/*\n\t * This file is based on RFC5280 (X.509).\n\t */\n\n\t/* Helper to read in a single mpint */\n\tfunction readMPInt(der, nm) {\n\t\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t\t    nm + ' is not an Integer');\n\t\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n\t}\n\n\tfunction verify(cert, key) {\n\t\tvar sig = cert.signatures.x509;\n\t\tassert.object(sig, 'x509 signature');\n\n\t\tvar algParts = sig.algo.split('-');\n\t\tif (algParts[0] !== key.type)\n\t\t\treturn (false);\n\n\t\tvar blob = sig.cache;\n\t\tif (blob === undefined) {\n\t\t\tvar der = new asn1.BerWriter();\n\t\t\twriteTBSCert(cert, der);\n\t\t\tblob = der.buffer;\n\t\t}\n\n\t\tvar verifier = key.createVerify(algParts[1]);\n\t\tverifier.write(blob);\n\t\treturn (verifier.verify(sig.signature));\n\t}\n\n\tfunction Local(i) {\n\t\treturn (asn1.Ber.Context | asn1.Ber.Constructor | i);\n\t}\n\n\tfunction Context(i) {\n\t\treturn (asn1.Ber.Context | i);\n\t}\n\n\tvar SIGN_ALGS = {\n\t\t'rsa-md5': '1.2.840.113549.1.1.4',\n\t\t'rsa-sha1': '1.2.840.113549.1.1.5',\n\t\t'rsa-sha256': '1.2.840.113549.1.1.11',\n\t\t'rsa-sha384': '1.2.840.113549.1.1.12',\n\t\t'rsa-sha512': '1.2.840.113549.1.1.13',\n\t\t'dsa-sha1': '1.2.840.10040.4.3',\n\t\t'dsa-sha256': '2.16.840.1.101.3.4.3.2',\n\t\t'ecdsa-sha1': '1.2.840.10045.4.1',\n\t\t'ecdsa-sha256': '1.2.840.10045.4.3.2',\n\t\t'ecdsa-sha384': '1.2.840.10045.4.3.3',\n\t\t'ecdsa-sha512': '1.2.840.10045.4.3.4',\n\t\t'ed25519-sha512': '1.3.101.112'\n\t};\n\tObject.keys(SIGN_ALGS).forEach(function (k) {\n\t\tSIGN_ALGS[SIGN_ALGS[k]] = k;\n\t});\n\tSIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';\n\tSIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';\n\n\tvar EXTS = {\n\t\t'issuerKeyId': '2.5.29.35',\n\t\t'altName': '2.5.29.17',\n\t\t'basicConstraints': '2.5.29.19',\n\t\t'keyUsage': '2.5.29.15',\n\t\t'extKeyUsage': '2.5.29.37'\n\t};\n\n\tfunction read(buf, options) {\n\t\tif (typeof (buf) === 'string') {\n\t\t\tbuf = Buffer.from(buf, 'binary');\n\t\t}\n\t\tassert.buffer(buf, 'buf');\n\n\t\tvar der = new asn1.BerReader(buf);\n\n\t\tder.readSequence();\n\t\tif (Math.abs(der.length - der.remain) > 1) {\n\t\t\tthrow (new Error('DER sequence does not contain whole byte ' +\n\t\t\t    'stream'));\n\t\t}\n\n\t\tvar tbsStart = der.offset;\n\t\tder.readSequence();\n\t\tvar sigOffset = der.offset + der.length;\n\t\tvar tbsEnd = sigOffset;\n\n\t\tif (der.peek() === Local(0)) {\n\t\t\tder.readSequence(Local(0));\n\t\t\tvar version = der.readInt();\n\t\t\tassert.ok(version <= 3,\n\t\t\t    'only x.509 versions up to v3 supported');\n\t\t}\n\n\t\tvar cert = {};\n\t\tcert.signatures = {};\n\t\tvar sig = (cert.signatures.x509 = {});\n\t\tsig.extras = {};\n\n\t\tcert.serial = readMPInt(der, 'serial');\n\n\t\tder.readSequence();\n\t\tvar after = der.offset + der.length;\n\t\tvar certAlgOid = der.readOID();\n\t\tvar certAlg = SIGN_ALGS[certAlgOid];\n\t\tif (certAlg === undefined)\n\t\t\tthrow (new Error('unknown signature algorithm ' + certAlgOid));\n\n\t\tder._offset = after;\n\t\tcert.issuer = Identity.parseAsn1(der);\n\n\t\tder.readSequence();\n\t\tcert.validFrom = readDate(der);\n\t\tcert.validUntil = readDate(der);\n\n\t\tcert.subjects = [Identity.parseAsn1(der)];\n\n\t\tder.readSequence();\n\t\tafter = der.offset + der.length;\n\t\tcert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);\n\t\tder._offset = after;\n\n\t\t/* issuerUniqueID */\n\t\tif (der.peek() === Local(1)) {\n\t\t\tder.readSequence(Local(1));\n\t\t\tsig.extras.issuerUniqueID =\n\t\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\t\tder._offset += der.length;\n\t\t}\n\n\t\t/* subjectUniqueID */\n\t\tif (der.peek() === Local(2)) {\n\t\t\tder.readSequence(Local(2));\n\t\t\tsig.extras.subjectUniqueID =\n\t\t\t    buf.slice(der.offset, der.offset + der.length);\n\t\t\tder._offset += der.length;\n\t\t}\n\n\t\t/* extensions */\n\t\tif (der.peek() === Local(3)) {\n\t\t\tder.readSequence(Local(3));\n\t\t\tvar extEnd = der.offset + der.length;\n\t\t\tder.readSequence();\n\n\t\t\twhile (der.offset < extEnd)\n\t\t\t\treadExtension(cert, buf, der);\n\n\t\t\tassert.strictEqual(der.offset, extEnd);\n\t\t}\n\n\t\tassert.strictEqual(der.offset, sigOffset);\n\n\t\tder.readSequence();\n\t\tafter = der.offset + der.length;\n\t\tvar sigAlgOid = der.readOID();\n\t\tvar sigAlg = SIGN_ALGS[sigAlgOid];\n\t\tif (sigAlg === undefined)\n\t\t\tthrow (new Error('unknown signature algorithm ' + sigAlgOid));\n\t\tder._offset = after;\n\n\t\tvar sigData = der.readString(asn1.Ber.BitString, true);\n\t\tif (sigData[0] === 0)\n\t\t\tsigData = sigData.slice(1);\n\t\tvar algParts = sigAlg.split('-');\n\n\t\tsig.signature = Signature.parse(sigData, algParts[0], 'asn1');\n\t\tsig.signature.hashAlgorithm = algParts[1];\n\t\tsig.algo = sigAlg;\n\t\tsig.cache = buf.slice(tbsStart, tbsEnd);\n\n\t\treturn (new Certificate(cert));\n\t}\n\n\tfunction readDate(der) {\n\t\tif (der.peek() === asn1.Ber.UTCTime) {\n\t\t\treturn (utcTimeToDate(der.readString(asn1.Ber.UTCTime)));\n\t\t} else if (der.peek() === asn1.Ber.GeneralizedTime) {\n\t\t\treturn (gTimeToDate(der.readString(asn1.Ber.GeneralizedTime)));\n\t\t} else {\n\t\t\tthrow (new Error('Unsupported date format'));\n\t\t}\n\t}\n\n\tfunction writeDate(der, date) {\n\t\tif (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {\n\t\t\tder.writeString(dateToGTime(date), asn1.Ber.GeneralizedTime);\n\t\t} else {\n\t\t\tder.writeString(dateToUTCTime(date), asn1.Ber.UTCTime);\n\t\t}\n\t}\n\n\t/* RFC5280, section 4.2.1.6 (GeneralName type) */\n\tvar ALTNAME = {\n\t\tOtherName: Local(0),\n\t\tRFC822Name: Context(1),\n\t\tDNSName: Context(2),\n\t\tX400Address: Local(3),\n\t\tDirectoryName: Local(4),\n\t\tEDIPartyName: Local(5),\n\t\tURI: Context(6),\n\t\tIPAddress: Context(7),\n\t\tOID: Context(8)\n\t};\n\n\t/* RFC5280, section 4.2.1.12 (KeyPurposeId) */\n\tvar EXTPURPOSE = {\n\t\t'serverAuth': '1.3.6.1.5.5.7.3.1',\n\t\t'clientAuth': '1.3.6.1.5.5.7.3.2',\n\t\t'codeSigning': '1.3.6.1.5.5.7.3.3',\n\n\t\t/* See https://github.com/joyent/oid-docs/blob/master/root.md */\n\t\t'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',\n\t\t'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'\n\t};\n\tvar EXTPURPOSE_REV = {};\n\tObject.keys(EXTPURPOSE).forEach(function (k) {\n\t\tEXTPURPOSE_REV[EXTPURPOSE[k]] = k;\n\t});\n\n\tvar KEYUSEBITS = [\n\t\t'signature', 'identity', 'keyEncryption',\n\t\t'encryption', 'keyAgreement', 'ca', 'crl'\n\t];\n\n\tfunction readExtension(cert, buf, der) {\n\t\tder.readSequence();\n\t\tvar after = der.offset + der.length;\n\t\tvar extId = der.readOID();\n\t\tvar id;\n\t\tvar sig = cert.signatures.x509;\n\t\tif (!sig.extras.exts)\n\t\t\tsig.extras.exts = [];\n\n\t\tvar critical;\n\t\tif (der.peek() === asn1.Ber.Boolean)\n\t\t\tcritical = der.readBoolean();\n\n\t\tswitch (extId) {\n\t\tcase (EXTS.basicConstraints):\n\t\t\tder.readSequence(asn1.Ber.OctetString);\n\t\t\tder.readSequence();\n\t\t\tvar bcEnd = der.offset + der.length;\n\t\t\tvar ca = false;\n\t\t\tif (der.peek() === asn1.Ber.Boolean)\n\t\t\t\tca = der.readBoolean();\n\t\t\tif (cert.purposes === undefined)\n\t\t\t\tcert.purposes = [];\n\t\t\tif (ca === true)\n\t\t\t\tcert.purposes.push('ca');\n\t\t\tvar bc = { oid: extId, critical: critical };\n\t\t\tif (der.offset < bcEnd && der.peek() === asn1.Ber.Integer)\n\t\t\t\tbc.pathLen = der.readInt();\n\t\t\tsig.extras.exts.push(bc);\n\t\t\tbreak;\n\t\tcase (EXTS.extKeyUsage):\n\t\t\tder.readSequence(asn1.Ber.OctetString);\n\t\t\tder.readSequence();\n\t\t\tif (cert.purposes === undefined)\n\t\t\t\tcert.purposes = [];\n\t\t\tvar ekEnd = der.offset + der.length;\n\t\t\twhile (der.offset < ekEnd) {\n\t\t\t\tvar oid = der.readOID();\n\t\t\t\tcert.purposes.push(EXTPURPOSE_REV[oid] || oid);\n\t\t\t}\n\t\t\t/*\n\t\t\t * This is a bit of a hack: in the case where we have a cert\n\t\t\t * that's only allowed to do serverAuth or clientAuth (and not\n\t\t\t * the other), we want to make sure all our Subjects are of\n\t\t\t * the right type. But we already parsed our Subjects and\n\t\t\t * decided if they were hosts or users earlier (since it appears\n\t\t\t * first in the cert).\n\t\t\t *\n\t\t\t * So we go through and mutate them into the right kind here if\n\t\t\t * it doesn't match. This might not be hugely beneficial, as it\n\t\t\t * seems that single-purpose certs are not often seen in the\n\t\t\t * wild.\n\t\t\t */\n\t\t\tif (cert.purposes.indexOf('serverAuth') !== -1 &&\n\t\t\t    cert.purposes.indexOf('clientAuth') === -1) {\n\t\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\t\tif (ide.type !== 'host') {\n\t\t\t\t\t\tide.type = 'host';\n\t\t\t\t\t\tide.hostname = ide.uid ||\n\t\t\t\t\t\t    ide.email ||\n\t\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (cert.purposes.indexOf('clientAuth') !== -1 &&\n\t\t\t    cert.purposes.indexOf('serverAuth') === -1) {\n\t\t\t\tcert.subjects.forEach(function (ide) {\n\t\t\t\t\tif (ide.type !== 'user') {\n\t\t\t\t\t\tide.type = 'user';\n\t\t\t\t\t\tide.uid = ide.hostname ||\n\t\t\t\t\t\t    ide.email ||\n\t\t\t\t\t\t    ide.components[0].value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\t\tbreak;\n\t\tcase (EXTS.keyUsage):\n\t\t\tder.readSequence(asn1.Ber.OctetString);\n\t\t\tvar bits = der.readString(asn1.Ber.BitString, true);\n\t\t\tvar setBits = readBitField(bits, KEYUSEBITS);\n\t\t\tsetBits.forEach(function (bit) {\n\t\t\t\tif (cert.purposes === undefined)\n\t\t\t\t\tcert.purposes = [];\n\t\t\t\tif (cert.purposes.indexOf(bit) === -1)\n\t\t\t\t\tcert.purposes.push(bit);\n\t\t\t});\n\t\t\tsig.extras.exts.push({ oid: extId, critical: critical,\n\t\t\t    bits: bits });\n\t\t\tbreak;\n\t\tcase (EXTS.altName):\n\t\t\tder.readSequence(asn1.Ber.OctetString);\n\t\t\tder.readSequence();\n\t\t\tvar aeEnd = der.offset + der.length;\n\t\t\twhile (der.offset < aeEnd) {\n\t\t\t\tswitch (der.peek()) {\n\t\t\t\tcase ALTNAME.OtherName:\n\t\t\t\tcase ALTNAME.EDIPartyName:\n\t\t\t\t\tder.readSequence();\n\t\t\t\t\tder._offset += der.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase ALTNAME.OID:\n\t\t\t\t\tder.readOID(ALTNAME.OID);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ALTNAME.RFC822Name:\n\t\t\t\t\t/* RFC822 specifies email addresses */\n\t\t\t\t\tvar email = der.readString(ALTNAME.RFC822Name);\n\t\t\t\t\tid = Identity.forEmail(email);\n\t\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ALTNAME.DirectoryName:\n\t\t\t\t\tder.readSequence(ALTNAME.DirectoryName);\n\t\t\t\t\tid = Identity.parseAsn1(der);\n\t\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ALTNAME.DNSName:\n\t\t\t\t\tvar host = der.readString(\n\t\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\t\tid = Identity.forHost(host);\n\t\t\t\t\tif (!cert.subjects[0].equals(id))\n\t\t\t\t\t\tcert.subjects.push(id);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tder.readString(der.peek());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsig.extras.exts.push({ oid: extId, critical: critical });\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsig.extras.exts.push({\n\t\t\t\toid: extId,\n\t\t\t\tcritical: critical,\n\t\t\t\tdata: der.readString(asn1.Ber.OctetString, true)\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\n\t\tder._offset = after;\n\t}\n\n\tvar UTCTIME_RE =\n\t    /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\n\tfunction utcTimeToDate(t) {\n\t\tvar m = t.match(UTCTIME_RE);\n\t\tassert.ok(m, 'timestamps must be in UTC');\n\t\tvar d = new Date();\n\n\t\tvar thisYear = d.getUTCFullYear();\n\t\tvar century = Math.floor(thisYear / 100) * 100;\n\n\t\tvar year = parseInt(m[1], 10);\n\t\tif (thisYear % 100 < 50 && year >= 60)\n\t\t\tyear += (century - 1);\n\t\telse\n\t\t\tyear += century;\n\t\td.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));\n\t\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\t\tif (m[6] && m[6].length > 0)\n\t\t\td.setUTCSeconds(parseInt(m[6], 10));\n\t\treturn (d);\n\t}\n\n\tvar GTIME_RE =\n\t    /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;\n\tfunction gTimeToDate(t) {\n\t\tvar m = t.match(GTIME_RE);\n\t\tassert.ok(m);\n\t\tvar d = new Date();\n\n\t\td.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1,\n\t\t    parseInt(m[3], 10));\n\t\td.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));\n\t\tif (m[6] && m[6].length > 0)\n\t\t\td.setUTCSeconds(parseInt(m[6], 10));\n\t\treturn (d);\n\t}\n\n\tfunction zeroPad(n, m) {\n\t\tif (m === undefined)\n\t\t\tm = 2;\n\t\tvar s = '' + n;\n\t\twhile (s.length < m)\n\t\t\ts = '0' + s;\n\t\treturn (s);\n\t}\n\n\tfunction dateToUTCTime(d) {\n\t\tvar s = '';\n\t\ts += zeroPad(d.getUTCFullYear() % 100);\n\t\ts += zeroPad(d.getUTCMonth() + 1);\n\t\ts += zeroPad(d.getUTCDate());\n\t\ts += zeroPad(d.getUTCHours());\n\t\ts += zeroPad(d.getUTCMinutes());\n\t\ts += zeroPad(d.getUTCSeconds());\n\t\ts += 'Z';\n\t\treturn (s);\n\t}\n\n\tfunction dateToGTime(d) {\n\t\tvar s = '';\n\t\ts += zeroPad(d.getUTCFullYear(), 4);\n\t\ts += zeroPad(d.getUTCMonth() + 1);\n\t\ts += zeroPad(d.getUTCDate());\n\t\ts += zeroPad(d.getUTCHours());\n\t\ts += zeroPad(d.getUTCMinutes());\n\t\ts += zeroPad(d.getUTCSeconds());\n\t\ts += 'Z';\n\t\treturn (s);\n\t}\n\n\tfunction sign(cert, key) {\n\t\tif (cert.signatures.x509 === undefined)\n\t\t\tcert.signatures.x509 = {};\n\t\tvar sig = cert.signatures.x509;\n\n\t\tsig.algo = key.type + '-' + key.defaultHashAlgorithm();\n\t\tif (SIGN_ALGS[sig.algo] === undefined)\n\t\t\treturn (false);\n\n\t\tvar der = new asn1.BerWriter();\n\t\twriteTBSCert(cert, der);\n\t\tvar blob = der.buffer;\n\t\tsig.cache = blob;\n\n\t\tvar signer = key.createSign();\n\t\tsigner.write(blob);\n\t\tcert.signatures.x509.signature = signer.sign();\n\n\t\treturn (true);\n\t}\n\n\tfunction signAsync(cert, signer, done) {\n\t\tif (cert.signatures.x509 === undefined)\n\t\t\tcert.signatures.x509 = {};\n\t\tvar sig = cert.signatures.x509;\n\n\t\tvar der = new asn1.BerWriter();\n\t\twriteTBSCert(cert, der);\n\t\tvar blob = der.buffer;\n\t\tsig.cache = blob;\n\n\t\tsigner(blob, function (err, signature) {\n\t\t\tif (err) {\n\t\t\t\tdone(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsig.algo = signature.type + '-' + signature.hashAlgorithm;\n\t\t\tif (SIGN_ALGS[sig.algo] === undefined) {\n\t\t\t\tdone(new Error('Invalid signing algorithm \"' +\n\t\t\t\t    sig.algo + '\"'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsig.signature = signature;\n\t\t\tdone();\n\t\t});\n\t}\n\n\tfunction write(cert, options) {\n\t\tvar sig = cert.signatures.x509;\n\t\tassert.object(sig, 'x509 signature');\n\n\t\tvar der = new asn1.BerWriter();\n\t\tder.startSequence();\n\t\tif (sig.cache) {\n\t\t\tder._ensure(sig.cache.length);\n\t\t\tsig.cache.copy(der._buf, der._offset);\n\t\t\tder._offset += sig.cache.length;\n\t\t} else {\n\t\t\twriteTBSCert(cert, der);\n\t\t}\n\n\t\tder.startSequence();\n\t\tder.writeOID(SIGN_ALGS[sig.algo]);\n\t\tif (sig.algo.match(/^rsa-/))\n\t\t\tder.writeNull();\n\t\tder.endSequence();\n\n\t\tvar sigData = sig.signature.toBuffer('asn1');\n\t\tvar data = Buffer.alloc(sigData.length + 1);\n\t\tdata[0] = 0;\n\t\tsigData.copy(data, 1);\n\t\tder.writeBuffer(data, asn1.Ber.BitString);\n\t\tder.endSequence();\n\n\t\treturn (der.buffer);\n\t}\n\n\tfunction writeTBSCert(cert, der) {\n\t\tvar sig = cert.signatures.x509;\n\t\tassert.object(sig, 'x509 signature');\n\n\t\tder.startSequence();\n\n\t\tder.startSequence(Local(0));\n\t\tder.writeInt(2);\n\t\tder.endSequence();\n\n\t\tder.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);\n\n\t\tder.startSequence();\n\t\tder.writeOID(SIGN_ALGS[sig.algo]);\n\t\tif (sig.algo.match(/^rsa-/))\n\t\t\tder.writeNull();\n\t\tder.endSequence();\n\n\t\tcert.issuer.toAsn1(der);\n\n\t\tder.startSequence();\n\t\twriteDate(der, cert.validFrom);\n\t\twriteDate(der, cert.validUntil);\n\t\tder.endSequence();\n\n\t\tvar subject = cert.subjects[0];\n\t\tvar altNames = cert.subjects.slice(1);\n\t\tsubject.toAsn1(der);\n\n\t\tpkcs8.writePkcs8(der, cert.subjectKey);\n\n\t\tif (sig.extras && sig.extras.issuerUniqueID) {\n\t\t\tder.writeBuffer(sig.extras.issuerUniqueID, Local(1));\n\t\t}\n\n\t\tif (sig.extras && sig.extras.subjectUniqueID) {\n\t\t\tder.writeBuffer(sig.extras.subjectUniqueID, Local(2));\n\t\t}\n\n\t\tif (altNames.length > 0 || subject.type === 'host' ||\n\t\t    (cert.purposes !== undefined && cert.purposes.length > 0) ||\n\t\t    (sig.extras && sig.extras.exts)) {\n\t\t\tder.startSequence(Local(3));\n\t\t\tder.startSequence();\n\n\t\t\tvar exts = [];\n\t\t\tif (cert.purposes !== undefined && cert.purposes.length > 0) {\n\t\t\t\texts.push({\n\t\t\t\t\toid: EXTS.basicConstraints,\n\t\t\t\t\tcritical: true\n\t\t\t\t});\n\t\t\t\texts.push({\n\t\t\t\t\toid: EXTS.keyUsage,\n\t\t\t\t\tcritical: true\n\t\t\t\t});\n\t\t\t\texts.push({\n\t\t\t\t\toid: EXTS.extKeyUsage,\n\t\t\t\t\tcritical: true\n\t\t\t\t});\n\t\t\t}\n\t\t\texts.push({ oid: EXTS.altName });\n\t\t\tif (sig.extras && sig.extras.exts)\n\t\t\t\texts = sig.extras.exts;\n\n\t\t\tfor (var i = 0; i < exts.length; ++i) {\n\t\t\t\tder.startSequence();\n\t\t\t\tder.writeOID(exts[i].oid);\n\n\t\t\t\tif (exts[i].critical !== undefined)\n\t\t\t\t\tder.writeBoolean(exts[i].critical);\n\n\t\t\t\tif (exts[i].oid === EXTS.altName) {\n\t\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\t\tder.startSequence();\n\t\t\t\t\tif (subject.type === 'host') {\n\t\t\t\t\t\tder.writeString(subject.hostname,\n\t\t\t\t\t\t    Context(2));\n\t\t\t\t\t}\n\t\t\t\t\tfor (var j = 0; j < altNames.length; ++j) {\n\t\t\t\t\t\tif (altNames[j].type === 'host') {\n\t\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t\t    altNames[j].hostname,\n\t\t\t\t\t\t\t    ALTNAME.DNSName);\n\t\t\t\t\t\t} else if (altNames[j].type ===\n\t\t\t\t\t\t    'email') {\n\t\t\t\t\t\t\tder.writeString(\n\t\t\t\t\t\t\t    altNames[j].email,\n\t\t\t\t\t\t\t    ALTNAME.RFC822Name);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t * Encode anything else as a\n\t\t\t\t\t\t\t * DN style name for now.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tder.startSequence(\n\t\t\t\t\t\t\t    ALTNAME.DirectoryName);\n\t\t\t\t\t\t\taltNames[j].toAsn1(der);\n\t\t\t\t\t\t\tder.endSequence();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tder.endSequence();\n\t\t\t\t\tder.endSequence();\n\t\t\t\t} else if (exts[i].oid === EXTS.basicConstraints) {\n\t\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\t\tder.startSequence();\n\t\t\t\t\tvar ca = (cert.purposes.indexOf('ca') !== -1);\n\t\t\t\t\tvar pathLen = exts[i].pathLen;\n\t\t\t\t\tder.writeBoolean(ca);\n\t\t\t\t\tif (pathLen !== undefined)\n\t\t\t\t\t\tder.writeInt(pathLen);\n\t\t\t\t\tder.endSequence();\n\t\t\t\t\tder.endSequence();\n\t\t\t\t} else if (exts[i].oid === EXTS.extKeyUsage) {\n\t\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\t\tder.startSequence();\n\t\t\t\t\tcert.purposes.forEach(function (purpose) {\n\t\t\t\t\t\tif (purpose === 'ca')\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tif (KEYUSEBITS.indexOf(purpose) !== -1)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tvar oid = purpose;\n\t\t\t\t\t\tif (EXTPURPOSE[purpose] !== undefined)\n\t\t\t\t\t\t\toid = EXTPURPOSE[purpose];\n\t\t\t\t\t\tder.writeOID(oid);\n\t\t\t\t\t});\n\t\t\t\t\tder.endSequence();\n\t\t\t\t\tder.endSequence();\n\t\t\t\t} else if (exts[i].oid === EXTS.keyUsage) {\n\t\t\t\t\tder.startSequence(asn1.Ber.OctetString);\n\t\t\t\t\t/*\n\t\t\t\t\t * If we parsed this certificate from a byte\n\t\t\t\t\t * stream (i.e. we didn't generate it in sshpk)\n\t\t\t\t\t * then we'll have a \".bits\" property on the\n\t\t\t\t\t * ext with the original raw byte contents.\n\t\t\t\t\t *\n\t\t\t\t\t * If we have this, use it here instead of\n\t\t\t\t\t * regenerating it. This guarantees we output\n\t\t\t\t\t * the same data we parsed, so signatures still\n\t\t\t\t\t * validate.\n\t\t\t\t\t */\n\t\t\t\t\tif (exts[i].bits !== undefined) {\n\t\t\t\t\t\tder.writeBuffer(exts[i].bits,\n\t\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar bits = writeBitField(cert.purposes,\n\t\t\t\t\t\t    KEYUSEBITS);\n\t\t\t\t\t\tder.writeBuffer(bits,\n\t\t\t\t\t\t    asn1.Ber.BitString);\n\t\t\t\t\t}\n\t\t\t\t\tder.endSequence();\n\t\t\t\t} else {\n\t\t\t\t\tder.writeBuffer(exts[i].data,\n\t\t\t\t\t    asn1.Ber.OctetString);\n\t\t\t\t}\n\n\t\t\t\tder.endSequence();\n\t\t\t}\n\n\t\t\tder.endSequence();\n\t\t\tder.endSequence();\n\t\t}\n\n\t\tder.endSequence();\n\t}\n\n\t/*\n\t * Reads an ASN.1 BER bitfield out of the Buffer produced by doing\n\t * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw\n\t * contents of the BitString tag, which is a count of unused bits followed by\n\t * the bits as a right-padded byte string.\n\t *\n\t * `bits` is the Buffer, `bitIndex` should contain an array of string names\n\t * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.\n\t *\n\t * Returns an array of Strings, the names of the bits that were set to 1.\n\t */\n\tfunction readBitField(bits, bitIndex) {\n\t\tvar bitLen = 8 * (bits.length - 1) - bits[0];\n\t\tvar setBits = {};\n\t\tfor (var i = 0; i < bitLen; ++i) {\n\t\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\t\tvar bit = 7 - (i % 8);\n\t\t\tvar mask = 1 << bit;\n\t\t\tvar bitVal = ((bits[byteN] & mask) !== 0);\n\t\t\tvar name = bitIndex[i];\n\t\t\tif (bitVal && typeof (name) === 'string') {\n\t\t\t\tsetBits[name] = true;\n\t\t\t}\n\t\t}\n\t\treturn (Object.keys(setBits));\n\t}\n\n\t/*\n\t * `setBits` is an array of strings, containing the names for each bit that\n\t * sould be set to 1. `bitIndex` is same as in `readBitField()`.\n\t *\n\t * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.\n\t */\n\tfunction writeBitField(setBits, bitIndex) {\n\t\tvar bitLen = bitIndex.length;\n\t\tvar blen = Math.ceil(bitLen / 8);\n\t\tvar unused = blen * 8 - bitLen;\n\t\tvar bits = Buffer.alloc(1 + blen); // zero-filled\n\t\tbits[0] = unused;\n\t\tfor (var i = 0; i < bitLen; ++i) {\n\t\t\tvar byteN = 1 + Math.floor(i / 8);\n\t\t\tvar bit = 7 - (i % 8);\n\t\t\tvar mask = 1 << bit;\n\t\t\tvar name = bitIndex[i];\n\t\t\tif (name === undefined)\n\t\t\t\tcontinue;\n\t\t\tvar bitVal = (setBits.indexOf(name) !== -1);\n\t\t\tif (bitVal) {\n\t\t\t\tbits[byteN] |= mask;\n\t\t\t}\n\t\t}\n\t\treturn (bits);\n\t}\n\treturn x509;\n}\n\nexport { requireX509 as __require };","start":1667202984178,"end":1667202985001,"order":"normal"}]}
