{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/adapters/node.js","transforms":[{"name":"vite:load-fallback","result":"(function() {\n  var request = require('request');\n  // import * as request from 'request'\n  // import * as mkFhir from 'fhir'\n  var mkFhir = require('../fhir');\n  var Q = require('q');\n  // import * as Q from 'q';\n  console.log(\"Ddd\");\n  console.log(\"q\",Q);\n  var adapter = {\n      defer: Q.defer,\n      http: (args) => {\n        // args.headers['Access-Control-Allow-Origin'] = '*';\n        // args.headers['Access-Control-Allow-Methods'] =  'GET, POST, PUT, DELETE, OPTIONS';\n        args.headers['Access-Control-Allow-Credentials'] =  true;\n        args.credentials =  'include';\n        console.log(\"args111\",args);\n        var deff = Q.defer();\n          console.log('deff',deff);\n          if(args.data && typeof args.data === \"string\") {\n            // Setting args.json requires args.body to be a JSON as per request docs.\n            try {\n              args.body = JSON.parse(args.data);\n            }\n            catch (e) {\n              throw new Error('Failed to parse. Expected JSON data...');\n            }\n          }\n          else if (args.data) {\n            args.body = args.data;\n          }\n          // url should be relative to baseUrl.\n          if(args.url) {\n              args.url = args.url.replace(args.baseUrl, '');\n          }\n          if(args.url === '') {\n            args.url = '/';\n          }\n          args.json = true;\n          if(args.debug) {\n              console.log('DEBUG[node]: (request)', args);\n          }\n          request(args, (err, response, body) => {\n            console.log(\"err\",err);\n            console.log(\"args22\",args);\n            console.log(\"response\",response);\n            console.log(\"body\",body);\n              var headers = (x) => {return response.headers[x.toLowerCase()];};\n              // var headers;\n              // headers['Access-Control-Allow-Origin'] = '*';\n              // headers['Access-Control-Allow-Methods'] =  'GET, POST, PUT, DELETE, OPTIONS';\n              var statusCode = response ? response.statusCode : 500; // in case host is unreachable\n              console.log(\"headers\",headers)\n              var resp = {data: body, status: statusCode, headers: headers, config: args};\n              \n              console.log(\"statusCode\",statusCode)\n              if(args.debug){\n                  console.log('DEBUG[node]: (response)', resp);\n              }\n              if (err || statusCode > 399) {deff.reject(resp);} else {deff.resolve(resp);}\n          }) ;\n          return deff.promise;\n      }\n    };\n    console.log(\"adapter\",adapter);\n\n  module.exports = function(config) {\n      console.log(\"config\",config)\n      console.log(\"adapter\",adapter)\n      console.log(\"mkFhir\",mkFhir(config,adapter))\n      return mkFhir(config, adapter);\n  };\n\n}).call(this);\n","start":1667202702489,"end":1667202703194},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as nodeModule, exports as node } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/adapters/node.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/fhir.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/q/q.js?commonjs-wrapped\";\n\n(function() {\n  var request = require$$0();\n  // import * as request from 'request'\n  // import * as mkFhir from 'fhir'\n  var mkFhir = require$$1();\n  var Q = require$$2();\n  // import * as Q from 'q';\n  console.log(\"Ddd\");\n  console.log(\"q\",Q);\n  var adapter = {\n      defer: Q.defer,\n      http: (args) => {\n        // args.headers['Access-Control-Allow-Origin'] = '*';\n        // args.headers['Access-Control-Allow-Methods'] =  'GET, POST, PUT, DELETE, OPTIONS';\n        args.headers['Access-Control-Allow-Credentials'] =  true;\n        args.credentials =  'include';\n        console.log(\"args111\",args);\n        var deff = Q.defer();\n          console.log('deff',deff);\n          if(args.data && typeof args.data === \"string\") {\n            // Setting args.json requires args.body to be a JSON as per request docs.\n            try {\n              args.body = JSON.parse(args.data);\n            }\n            catch (e) {\n              throw new Error('Failed to parse. Expected JSON data...');\n            }\n          }\n          else if (args.data) {\n            args.body = args.data;\n          }\n          // url should be relative to baseUrl.\n          if(args.url) {\n              args.url = args.url.replace(args.baseUrl, '');\n          }\n          if(args.url === '') {\n            args.url = '/';\n          }\n          args.json = true;\n          if(args.debug) {\n              console.log('DEBUG[node]: (request)', args);\n          }\n          request(args, (err, response, body) => {\n            console.log(\"err\",err);\n            console.log(\"args22\",args);\n            console.log(\"response\",response);\n            console.log(\"body\",body);\n              var headers = (x) => {return response.headers[x.toLowerCase()];};\n              // var headers;\n              // headers['Access-Control-Allow-Origin'] = '*';\n              // headers['Access-Control-Allow-Methods'] =  'GET, POST, PUT, DELETE, OPTIONS';\n              var statusCode = response ? response.statusCode : 500; // in case host is unreachable\n              console.log(\"headers\",headers)\n              var resp = {data: body, status: statusCode, headers: headers, config: args};\n              \n              console.log(\"statusCode\",statusCode)\n              if(args.debug){\n                  console.log('DEBUG[node]: (response)', resp);\n              }\n              if (err || statusCode > 399) {deff.reject(resp);} else {deff.resolve(resp);}\n          }) ;\n          return deff.promise;\n      }\n    };\n    console.log(\"adapter\",adapter);\n\n  nodeModule.exports = function(config) {\n      console.log(\"config\",config)\n      console.log(\"adapter\",adapter)\n      console.log(\"mkFhir\",mkFhir(config,adapter))\n      return mkFhir(config, adapter);\n  };\n\n}).call(commonjsHelpers.commonjsGlobal);\n\nexport { node as __moduleExports, node as default };","start":1667202703194,"end":1667202708071,"order":"normal"}]}
