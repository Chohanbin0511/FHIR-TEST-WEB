{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/ecc-jsbn/lib/sec.js","transforms":[{"name":"vite:load-fallback","result":"// Named EC curves\n\n// Requires ec.js, jsbn.js, and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger\nvar ECCurveFp = require('./ec.js').ECCurveFp\n\n\n// ----------------\n// X9ECParameters\n\n// constructor\nfunction X9ECParameters(curve,g,n,h) {\n    this.curve = curve;\n    this.g = g;\n    this.n = n;\n    this.h = h;\n}\n\nfunction x9getCurve() {\n    return this.curve;\n}\n\nfunction x9getG() {\n    return this.g;\n}\n\nfunction x9getN() {\n    return this.n;\n}\n\nfunction x9getH() {\n    return this.h;\n}\n\nX9ECParameters.prototype.getCurve = x9getCurve;\nX9ECParameters.prototype.getG = x9getG;\nX9ECParameters.prototype.getN = x9getN;\nX9ECParameters.prototype.getH = x9getH;\n\n// ----------------\n// SECNamedCurves\n\nfunction fromHex(s) { return new BigInteger(s, 16); }\n\nfunction secp128r1() {\n    // p = 2^128 - 2^97 - 1\n    var p = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"E87579C11079F43DD824993C2CEE5ED3\");\n    //byte[] S = Hex.decode(\"000E0D4D696E6768756151750CC03A4473D03679\");\n    var n = fromHex(\"FFFFFFFE0000000075A30D1B9038A115\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"161FF7528B899B2D0C28607CA52C5B86\"\n\t\t+ \"CF5AC8395BAFEB13C02DA292DDED7A83\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp160k1() {\n    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"7\");\n    //byte[] S = null;\n    var n = fromHex(\"0100000000000000000001B8FA16DFAB9ACA16B6B3\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\"\n                + \"938CF935318FDCED6BC28286531733C3F03C4FEE\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp160r1() {\n    // p = 2^160 - 2^31 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\");\n    var b = fromHex(\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\");\n    //byte[] S = Hex.decode(\"1053CDE42C14D696E67687561517533BF3F83345\");\n    var n = fromHex(\"0100000000000000000001F4C8F927AED3CA752257\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n\t\t+ \"4A96B5688EF573284664698968C38BB913CBFC82\"\n\t\t+ \"23A628553168947D59DCC912042351377AC5FB32\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp192k1() {\n    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\");\n    var a = BigInteger.ZERO;\n    var b = fromHex(\"3\");\n    //byte[] S = null;\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\"\n                + \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp192r1() {\n    // p = 2^192 - 2^64 - 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\");\n    //byte[] S = Hex.decode(\"3045AE6FC8422F64ED579528D38120EAE12196D5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\"\n                + \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp224r1() {\n    // p = 2^224 - 2^96 + 1\n    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\");\n    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\");\n    var b = fromHex(\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\");\n    //byte[] S = Hex.decode(\"BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5\");\n    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\"\n                + \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\nfunction secp256r1() {\n    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n    var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n    var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n    var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n    //byte[] S = Hex.decode(\"C49D360886E704936A6678E1139D26B7819F7E90\");\n    var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n    var h = BigInteger.ONE;\n    var curve = new ECCurveFp(p, a, b);\n    var G = curve.decodePointHex(\"04\"\n                + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\"\n\t\t+ \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n    return new X9ECParameters(curve, G, n, h);\n}\n\n// TODO: make this into a proper hashtable\nfunction getSECCurveByName(name) {\n    if(name == \"secp128r1\") return secp128r1();\n    if(name == \"secp160k1\") return secp160k1();\n    if(name == \"secp160r1\") return secp160r1();\n    if(name == \"secp192k1\") return secp192k1();\n    if(name == \"secp192r1\") return secp192r1();\n    if(name == \"secp224r1\") return secp224r1();\n    if(name == \"secp256r1\") return secp256r1();\n    return null;\n}\n\nmodule.exports = {\n  \"secp128r1\":secp128r1,\n  \"secp160k1\":secp160k1,\n  \"secp160r1\":secp160r1,\n  \"secp192k1\":secp192k1,\n  \"secp192r1\":secp192r1,\n  \"secp224r1\":secp224r1,\n  \"secp256r1\":secp256r1\n}\n","start":1667202707317,"end":1667202707413},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/jsbn/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ecc-jsbn/lib/ec.js?commonjs-wrapped\";\n\nvar sec;\nvar hasRequiredSec;\n\nfunction requireSec () {\n\tif (hasRequiredSec) return sec;\n\thasRequiredSec = 1;\n\t// Named EC curves\n\n\t// Requires ec.js, jsbn.js, and jsbn2.js\n\tvar BigInteger = require$$0().BigInteger\n\tvar ECCurveFp = require$$1().ECCurveFp\n\n\n\t// ----------------\n\t// X9ECParameters\n\n\t// constructor\n\tfunction X9ECParameters(curve,g,n,h) {\n\t    this.curve = curve;\n\t    this.g = g;\n\t    this.n = n;\n\t    this.h = h;\n\t}\n\n\tfunction x9getCurve() {\n\t    return this.curve;\n\t}\n\n\tfunction x9getG() {\n\t    return this.g;\n\t}\n\n\tfunction x9getN() {\n\t    return this.n;\n\t}\n\n\tfunction x9getH() {\n\t    return this.h;\n\t}\n\n\tX9ECParameters.prototype.getCurve = x9getCurve;\n\tX9ECParameters.prototype.getG = x9getG;\n\tX9ECParameters.prototype.getN = x9getN;\n\tX9ECParameters.prototype.getH = x9getH;\n\n\t// ----------------\n\t// SECNamedCurves\n\n\tfunction fromHex(s) { return new BigInteger(s, 16); }\n\n\tfunction secp128r1() {\n\t    // p = 2^128 - 2^97 - 1\n\t    var p = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\");\n\t    var a = fromHex(\"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\");\n\t    var b = fromHex(\"E87579C11079F43DD824993C2CEE5ED3\");\n\t    //byte[] S = Hex.decode(\"000E0D4D696E6768756151750CC03A4473D03679\");\n\t    var n = fromHex(\"FFFFFFFE0000000075A30D1B9038A115\");\n\t    var h = BigInteger.ONE;\n\t    var curve = new ECCurveFp(p, a, b);\n\t    var G = curve.decodePointHex(\"04\"\n\t                + \"161FF7528B899B2D0C28607CA52C5B86\"\n\t\t\t+ \"CF5AC8395BAFEB13C02DA292DDED7A83\");\n\t    return new X9ECParameters(curve, G, n, h);\n\t}\n\n\tfunction secp160k1() {\n\t    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1\n\t    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\");\n\t    var a = BigInteger.ZERO;\n\t    var b = fromHex(\"7\");\n\t    //byte[] S = null;\n\t    var n = fromHex(\"0100000000000000000001B8FA16DFAB9ACA16B6B3\");\n\t    var h = BigInteger.ONE;\n\t    var curve = new ECCurveFp(p, a, b);\n\t    var G = curve.decodePointHex(\"04\"\n\t                + \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\"\n\t                + \"938CF935318FDCED6BC28286531733C3F03C4FEE\");\n\t    return new X9ECParameters(curve, G, n, h);\n\t}\n\n\tfunction secp160r1() {\n\t    // p = 2^160 - 2^31 - 1\n\t    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\");\n\t    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\");\n\t    var b = fromHex(\"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\");\n\t    //byte[] S = Hex.decode(\"1053CDE42C14D696E67687561517533BF3F83345\");\n\t    var n = fromHex(\"0100000000000000000001F4C8F927AED3CA752257\");\n\t    var h = BigInteger.ONE;\n\t    var curve = new ECCurveFp(p, a, b);\n\t    var G = curve.decodePointHex(\"04\"\n\t\t\t+ \"4A96B5688EF573284664698968C38BB913CBFC82\"\n\t\t\t+ \"23A628553168947D59DCC912042351377AC5FB32\");\n\t    return new X9ECParameters(curve, G, n, h);\n\t}\n\n\tfunction secp192k1() {\n\t    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1\n\t    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\");\n\t    var a = BigInteger.ZERO;\n\t    var b = fromHex(\"3\");\n\t    //byte[] S = null;\n\t    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\");\n\t    var h = BigInteger.ONE;\n\t    var curve = new ECCurveFp(p, a, b);\n\t    var G = curve.decodePointHex(\"04\"\n\t                + \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\"\n\t                + \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\");\n\t    return new X9ECParameters(curve, G, n, h);\n\t}\n\n\tfunction secp192r1() {\n\t    // p = 2^192 - 2^64 - 1\n\t    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\");\n\t    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\");\n\t    var b = fromHex(\"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\");\n\t    //byte[] S = Hex.decode(\"3045AE6FC8422F64ED579528D38120EAE12196D5\");\n\t    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\");\n\t    var h = BigInteger.ONE;\n\t    var curve = new ECCurveFp(p, a, b);\n\t    var G = curve.decodePointHex(\"04\"\n\t                + \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\"\n\t                + \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\");\n\t    return new X9ECParameters(curve, G, n, h);\n\t}\n\n\tfunction secp224r1() {\n\t    // p = 2^224 - 2^96 + 1\n\t    var p = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\");\n\t    var a = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\");\n\t    var b = fromHex(\"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\");\n\t    //byte[] S = Hex.decode(\"BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5\");\n\t    var n = fromHex(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\");\n\t    var h = BigInteger.ONE;\n\t    var curve = new ECCurveFp(p, a, b);\n\t    var G = curve.decodePointHex(\"04\"\n\t                + \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\"\n\t                + \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\");\n\t    return new X9ECParameters(curve, G, n, h);\n\t}\n\n\tfunction secp256r1() {\n\t    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1\n\t    var p = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\");\n\t    var a = fromHex(\"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\");\n\t    var b = fromHex(\"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\");\n\t    //byte[] S = Hex.decode(\"C49D360886E704936A6678E1139D26B7819F7E90\");\n\t    var n = fromHex(\"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\");\n\t    var h = BigInteger.ONE;\n\t    var curve = new ECCurveFp(p, a, b);\n\t    var G = curve.decodePointHex(\"04\"\n\t                + \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\"\n\t\t\t+ \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\");\n\t    return new X9ECParameters(curve, G, n, h);\n\t}\n\n\t// TODO: make this into a proper hashtable\n\tfunction getSECCurveByName(name) {\n\t    if(name == \"secp128r1\") return secp128r1();\n\t    if(name == \"secp160k1\") return secp160k1();\n\t    if(name == \"secp160r1\") return secp160r1();\n\t    if(name == \"secp192k1\") return secp192k1();\n\t    if(name == \"secp192r1\") return secp192r1();\n\t    if(name == \"secp224r1\") return secp224r1();\n\t    if(name == \"secp256r1\") return secp256r1();\n\t    return null;\n\t}\n\n\tsec = {\n\t  \"secp128r1\":secp128r1,\n\t  \"secp160k1\":secp160k1,\n\t  \"secp160r1\":secp160r1,\n\t  \"secp192k1\":secp192k1,\n\t  \"secp192r1\":secp192r1,\n\t  \"secp224r1\":secp224r1,\n\t  \"secp256r1\":secp256r1\n\t}\n\treturn sec;\n}\n\nexport { requireSec as __require };","start":1667202707413,"end":1667202707417,"order":"normal"}]}
