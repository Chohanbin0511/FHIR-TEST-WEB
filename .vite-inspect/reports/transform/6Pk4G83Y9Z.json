{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/delayed-stream/lib/delayed_stream.js","transforms":[{"name":"vite:load-fallback","result":"var Stream = require('stream').Stream;\nvar util = require('util');\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nObject.defineProperty(DelayedStream.prototype, 'readable', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.source.readable;\n  }\n});\n\nDelayedStream.prototype.setEncoding = function() {\n  return this.source.setEncoding.apply(this.source, arguments);\n};\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n","start":1667202705574,"end":1667202705795},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/rollup-plugin-node-polyfills/polyfills/stream.js?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\n\nvar delayed_stream;\nvar hasRequiredDelayed_stream;\n\nfunction requireDelayed_stream () {\n\tif (hasRequiredDelayed_stream) return delayed_stream;\n\thasRequiredDelayed_stream = 1;\n\tvar Stream = require$$0.Stream;\n\tvar util = require$$1();\n\n\tdelayed_stream = DelayedStream;\n\tfunction DelayedStream() {\n\t  this.source = null;\n\t  this.dataSize = 0;\n\t  this.maxDataSize = 1024 * 1024;\n\t  this.pauseStream = true;\n\n\t  this._maxDataSizeExceeded = false;\n\t  this._released = false;\n\t  this._bufferedEvents = [];\n\t}\n\tutil.inherits(DelayedStream, Stream);\n\n\tDelayedStream.create = function(source, options) {\n\t  var delayedStream = new this();\n\n\t  options = options || {};\n\t  for (var option in options) {\n\t    delayedStream[option] = options[option];\n\t  }\n\n\t  delayedStream.source = source;\n\n\t  var realEmit = source.emit;\n\t  source.emit = function() {\n\t    delayedStream._handleEmit(arguments);\n\t    return realEmit.apply(source, arguments);\n\t  };\n\n\t  source.on('error', function() {});\n\t  if (delayedStream.pauseStream) {\n\t    source.pause();\n\t  }\n\n\t  return delayedStream;\n\t};\n\n\tObject.defineProperty(DelayedStream.prototype, 'readable', {\n\t  configurable: true,\n\t  enumerable: true,\n\t  get: function() {\n\t    return this.source.readable;\n\t  }\n\t});\n\n\tDelayedStream.prototype.setEncoding = function() {\n\t  return this.source.setEncoding.apply(this.source, arguments);\n\t};\n\n\tDelayedStream.prototype.resume = function() {\n\t  if (!this._released) {\n\t    this.release();\n\t  }\n\n\t  this.source.resume();\n\t};\n\n\tDelayedStream.prototype.pause = function() {\n\t  this.source.pause();\n\t};\n\n\tDelayedStream.prototype.release = function() {\n\t  this._released = true;\n\n\t  this._bufferedEvents.forEach(function(args) {\n\t    this.emit.apply(this, args);\n\t  }.bind(this));\n\t  this._bufferedEvents = [];\n\t};\n\n\tDelayedStream.prototype.pipe = function() {\n\t  var r = Stream.prototype.pipe.apply(this, arguments);\n\t  this.resume();\n\t  return r;\n\t};\n\n\tDelayedStream.prototype._handleEmit = function(args) {\n\t  if (this._released) {\n\t    this.emit.apply(this, args);\n\t    return;\n\t  }\n\n\t  if (args[0] === 'data') {\n\t    this.dataSize += args[1].length;\n\t    this._checkIfMaxDataSizeExceeded();\n\t  }\n\n\t  this._bufferedEvents.push(args);\n\t};\n\n\tDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n\t  if (this._maxDataSizeExceeded) {\n\t    return;\n\t  }\n\n\t  if (this.dataSize <= this.maxDataSize) {\n\t    return;\n\t  }\n\n\t  this._maxDataSizeExceeded = true;\n\t  var message =\n\t    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n\t  this.emit('error', new Error(message));\n\t};\n\treturn delayed_stream;\n}\n\nexport { requireDelayed_stream as __require };","start":1667202705795,"end":1667202707515,"order":"normal"}]}
