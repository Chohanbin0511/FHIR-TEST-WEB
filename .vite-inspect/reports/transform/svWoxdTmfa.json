{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/lib/har.js","transforms":[{"name":"vite:load-fallback","result":"'use strict'\n\nvar fs = require('fs')\nvar qs = require('querystring')\nvar validate = require('har-validator')\nvar extend = require('extend')\n\nfunction Har (request) {\n  this.request = request\n}\n\nHar.prototype.reducer = function (obj, pair) {\n  // new property ?\n  if (obj[pair.name] === undefined) {\n    obj[pair.name] = pair.value\n    return obj\n  }\n\n  // existing? convert to array\n  var arr = [\n    obj[pair.name],\n    pair.value\n  ]\n\n  obj[pair.name] = arr\n\n  return obj\n}\n\nHar.prototype.prep = function (data) {\n  // construct utility properties\n  data.queryObj = {}\n  data.headersObj = {}\n  data.postData.jsonObj = false\n  data.postData.paramsObj = false\n\n  // construct query objects\n  if (data.queryString && data.queryString.length) {\n    data.queryObj = data.queryString.reduce(this.reducer, {})\n  }\n\n  // construct headers objects\n  if (data.headers && data.headers.length) {\n    // loweCase header keys\n    data.headersObj = data.headers.reduceRight(function (headers, header) {\n      headers[header.name] = header.value\n      return headers\n    }, {})\n  }\n\n  // construct Cookie header\n  if (data.cookies && data.cookies.length) {\n    var cookies = data.cookies.map(function (cookie) {\n      return cookie.name + '=' + cookie.value\n    })\n\n    if (cookies.length) {\n      data.headersObj.cookie = cookies.join('; ')\n    }\n  }\n\n  // prep body\n  function some (arr) {\n    return arr.some(function (type) {\n      return data.postData.mimeType.indexOf(type) === 0\n    })\n  }\n\n  if (some([\n    'multipart/mixed',\n    'multipart/related',\n    'multipart/form-data',\n    'multipart/alternative'])) {\n    // reset values\n    data.postData.mimeType = 'multipart/form-data'\n  } else if (some([\n    'application/x-www-form-urlencoded'])) {\n    if (!data.postData.params) {\n      data.postData.text = ''\n    } else {\n      data.postData.paramsObj = data.postData.params.reduce(this.reducer, {})\n\n      // always overwrite\n      data.postData.text = qs.stringify(data.postData.paramsObj)\n    }\n  } else if (some([\n    'text/json',\n    'text/x-json',\n    'application/json',\n    'application/x-json'])) {\n    data.postData.mimeType = 'application/json'\n\n    if (data.postData.text) {\n      try {\n        data.postData.jsonObj = JSON.parse(data.postData.text)\n      } catch (e) {\n        this.request.debug(e)\n\n        // force back to text/plain\n        data.postData.mimeType = 'text/plain'\n      }\n    }\n  }\n\n  return data\n}\n\nHar.prototype.options = function (options) {\n  // skip if no har property defined\n  if (!options.har) {\n    return options\n  }\n\n  var har = {}\n  extend(har, options.har)\n\n  // only process the first entry\n  if (har.log && har.log.entries) {\n    har = har.log.entries[0]\n  }\n\n  // add optional properties to make validation successful\n  har.url = har.url || options.url || options.uri || options.baseUrl || '/'\n  har.httpVersion = har.httpVersion || 'HTTP/1.1'\n  har.queryString = har.queryString || []\n  har.headers = har.headers || []\n  har.cookies = har.cookies || []\n  har.postData = har.postData || {}\n  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream'\n\n  har.bodySize = 0\n  har.headersSize = 0\n  har.postData.size = 0\n\n  if (!validate.request(har)) {\n    return options\n  }\n\n  // clean up and get some utility properties\n  var req = this.prep(har)\n\n  // construct new options\n  if (req.url) {\n    options.url = req.url\n  }\n\n  if (req.method) {\n    options.method = req.method\n  }\n\n  if (Object.keys(req.queryObj).length) {\n    options.qs = req.queryObj\n  }\n\n  if (Object.keys(req.headersObj).length) {\n    options.headers = req.headersObj\n  }\n\n  function test (type) {\n    return req.postData.mimeType.indexOf(type) === 0\n  }\n  if (test('application/x-www-form-urlencoded')) {\n    options.form = req.postData.paramsObj\n  } else if (test('application/json')) {\n    if (req.postData.jsonObj) {\n      options.body = req.postData.jsonObj\n      options.json = true\n    }\n  } else if (test('multipart/form-data')) {\n    options.formData = {}\n\n    req.postData.params.forEach(function (param) {\n      var attachment = {}\n\n      if (!param.fileName && !param.contentType) {\n        options.formData[param.name] = param.value\n        return\n      }\n\n      // attempt to read from disk!\n      if (param.fileName && !param.value) {\n        attachment.value = fs.createReadStream(param.fileName)\n      } else if (param.value) {\n        attachment.value = param.value\n      }\n\n      if (param.fileName) {\n        attachment.options = {\n          filename: param.fileName,\n          contentType: param.contentType ? param.contentType : null\n        }\n      }\n\n      options.formData[param.name] = attachment\n    })\n  } else {\n    if (req.postData.text) {\n      options.body = req.postData.text\n    }\n  }\n\n  return options\n}\n\nexports.Har = Har\n","start":1667202981897,"end":1667202982102},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as har } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/lib/har.js?commonjs-exports\"\nimport require$$0 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/querystring/index.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/har-validator/lib/promise.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/extend/index.js?commonjs-wrapped\";\n\nvar hasRequiredHar;\n\nfunction requireHar () {\n\tif (hasRequiredHar) return har;\n\thasRequiredHar = 1;\n\t'use strict'\n\n\tvar fs = require$$0\n\tvar qs = require$$1()\n\tvar validate = require$$2()\n\tvar extend = require$$3()\n\n\tfunction Har (request) {\n\t  this.request = request\n\t}\n\n\tHar.prototype.reducer = function (obj, pair) {\n\t  // new property ?\n\t  if (obj[pair.name] === undefined) {\n\t    obj[pair.name] = pair.value\n\t    return obj\n\t  }\n\n\t  // existing? convert to array\n\t  var arr = [\n\t    obj[pair.name],\n\t    pair.value\n\t  ]\n\n\t  obj[pair.name] = arr\n\n\t  return obj\n\t}\n\n\tHar.prototype.prep = function (data) {\n\t  // construct utility properties\n\t  data.queryObj = {}\n\t  data.headersObj = {}\n\t  data.postData.jsonObj = false\n\t  data.postData.paramsObj = false\n\n\t  // construct query objects\n\t  if (data.queryString && data.queryString.length) {\n\t    data.queryObj = data.queryString.reduce(this.reducer, {})\n\t  }\n\n\t  // construct headers objects\n\t  if (data.headers && data.headers.length) {\n\t    // loweCase header keys\n\t    data.headersObj = data.headers.reduceRight(function (headers, header) {\n\t      headers[header.name] = header.value\n\t      return headers\n\t    }, {})\n\t  }\n\n\t  // construct Cookie header\n\t  if (data.cookies && data.cookies.length) {\n\t    var cookies = data.cookies.map(function (cookie) {\n\t      return cookie.name + '=' + cookie.value\n\t    })\n\n\t    if (cookies.length) {\n\t      data.headersObj.cookie = cookies.join('; ')\n\t    }\n\t  }\n\n\t  // prep body\n\t  function some (arr) {\n\t    return arr.some(function (type) {\n\t      return data.postData.mimeType.indexOf(type) === 0\n\t    })\n\t  }\n\n\t  if (some([\n\t    'multipart/mixed',\n\t    'multipart/related',\n\t    'multipart/form-data',\n\t    'multipart/alternative'])) {\n\t    // reset values\n\t    data.postData.mimeType = 'multipart/form-data'\n\t  } else if (some([\n\t    'application/x-www-form-urlencoded'])) {\n\t    if (!data.postData.params) {\n\t      data.postData.text = ''\n\t    } else {\n\t      data.postData.paramsObj = data.postData.params.reduce(this.reducer, {})\n\n\t      // always overwrite\n\t      data.postData.text = qs.stringify(data.postData.paramsObj)\n\t    }\n\t  } else if (some([\n\t    'text/json',\n\t    'text/x-json',\n\t    'application/json',\n\t    'application/x-json'])) {\n\t    data.postData.mimeType = 'application/json'\n\n\t    if (data.postData.text) {\n\t      try {\n\t        data.postData.jsonObj = JSON.parse(data.postData.text)\n\t      } catch (e) {\n\t        this.request.debug(e)\n\n\t        // force back to text/plain\n\t        data.postData.mimeType = 'text/plain'\n\t      }\n\t    }\n\t  }\n\n\t  return data\n\t}\n\n\tHar.prototype.options = function (options) {\n\t  // skip if no har property defined\n\t  if (!options.har) {\n\t    return options\n\t  }\n\n\t  var har = {}\n\t  extend(har, options.har)\n\n\t  // only process the first entry\n\t  if (har.log && har.log.entries) {\n\t    har = har.log.entries[0]\n\t  }\n\n\t  // add optional properties to make validation successful\n\t  har.url = har.url || options.url || options.uri || options.baseUrl || '/'\n\t  har.httpVersion = har.httpVersion || 'HTTP/1.1'\n\t  har.queryString = har.queryString || []\n\t  har.headers = har.headers || []\n\t  har.cookies = har.cookies || []\n\t  har.postData = har.postData || {}\n\t  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream'\n\n\t  har.bodySize = 0\n\t  har.headersSize = 0\n\t  har.postData.size = 0\n\n\t  if (!validate.request(har)) {\n\t    return options\n\t  }\n\n\t  // clean up and get some utility properties\n\t  var req = this.prep(har)\n\n\t  // construct new options\n\t  if (req.url) {\n\t    options.url = req.url\n\t  }\n\n\t  if (req.method) {\n\t    options.method = req.method\n\t  }\n\n\t  if (Object.keys(req.queryObj).length) {\n\t    options.qs = req.queryObj\n\t  }\n\n\t  if (Object.keys(req.headersObj).length) {\n\t    options.headers = req.headersObj\n\t  }\n\n\t  function test (type) {\n\t    return req.postData.mimeType.indexOf(type) === 0\n\t  }\n\t  if (test('application/x-www-form-urlencoded')) {\n\t    options.form = req.postData.paramsObj\n\t  } else if (test('application/json')) {\n\t    if (req.postData.jsonObj) {\n\t      options.body = req.postData.jsonObj\n\t      options.json = true\n\t    }\n\t  } else if (test('multipart/form-data')) {\n\t    options.formData = {}\n\n\t    req.postData.params.forEach(function (param) {\n\t      var attachment = {}\n\n\t      if (!param.fileName && !param.contentType) {\n\t        options.formData[param.name] = param.value\n\t        return\n\t      }\n\n\t      // attempt to read from disk!\n\t      if (param.fileName && !param.value) {\n\t        attachment.value = fs.createReadStream(param.fileName)\n\t      } else if (param.value) {\n\t        attachment.value = param.value\n\t      }\n\n\t      if (param.fileName) {\n\t        attachment.options = {\n\t          filename: param.fileName,\n\t          contentType: param.contentType ? param.contentType : null\n\t        }\n\t      }\n\n\t      options.formData[param.name] = attachment\n\t    })\n\t  } else {\n\t    if (req.postData.text) {\n\t      options.body = req.postData.text\n\t    }\n\t  }\n\n\t  return options\n\t}\n\n\thar.Har = Har\n\treturn har;\n}\n\nexport { requireHar as __require };","start":1667202982102,"end":1667202984760,"order":"normal"}]}
