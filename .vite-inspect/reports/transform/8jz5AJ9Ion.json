{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/vuetify/lib/components/VList/VListItem.mjs","transforms":[{"name":"vite:load-fallback","result":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VListItem.css\"; // Components\n\nimport { VAvatar } from \"../VAvatar/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VListItemSubtitle } from \"./VListItemSubtitle.mjs\";\nimport { VListItemTitle } from \"./VListItemTitle.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Composables\n\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeRouterProps, useLink } from \"../../composables/router.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useList } from \"./list.mjs\";\nimport { useNestedItem } from \"../../composables/nested/nested.mjs\"; // Utilities\n\nimport { computed, watch } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VListItem = genericComponent()({\n  name: 'VListItem',\n  directives: {\n    Ripple\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: undefined\n    },\n    activeClass: String,\n    activeColor: String,\n    appendAvatar: String,\n    appendIcon: IconValue,\n    disabled: Boolean,\n    lines: String,\n    link: {\n      type: Boolean,\n      default: undefined\n    },\n    nav: Boolean,\n    prependAvatar: String,\n    prependIcon: IconValue,\n    subtitle: [String, Number, Boolean],\n    title: [String, Number, Boolean],\n    value: null,\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeRoundedProps(),\n    ...makeRouterProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({\n      variant: 'text'\n    })\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const link = useLink(props, attrs);\n    const id = computed(() => props.value ?? link.href.value);\n    const {\n      select,\n      isSelected,\n      isIndeterminate,\n      isGroupActivator,\n      root,\n      parent,\n      openOnSelect\n    } = useNestedItem(id, false);\n    const list = useList();\n    const isActive = computed(() => {\n      var _link$isActive;\n\n      return props.active !== false && (props.active || ((_link$isActive = link.isActive) == null ? void 0 : _link$isActive.value) || isSelected.value);\n    });\n    const isLink = computed(() => props.link !== false && link.isLink.value);\n    const isClickable = computed(() => !props.disabled && props.link !== false && (props.link || link.isClickable.value || props.value != null && !!list));\n    const roundedProps = computed(() => props.rounded || props.nav);\n    const variantProps = computed(() => ({\n      color: isActive.value ? props.activeColor ?? props.color : props.color,\n      variant: props.variant\n    }));\n    watch(() => {\n      var _link$isActive2;\n\n      return (_link$isActive2 = link.isActive) == null ? void 0 : _link$isActive2.value;\n    }, val => {\n      if (val && parent.value != null) {\n        root.open(parent.value, true);\n      }\n\n      if (val) {\n        openOnSelect(val);\n      }\n    }, {\n      immediate: true\n    });\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(variantProps);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(roundedProps);\n    const lineClasses = computed(() => props.lines ? `v-list-item--${props.lines}-line` : undefined);\n    const slotProps = computed(() => ({\n      isActive: isActive.value,\n      select,\n      isSelected: isSelected.value,\n      isIndeterminate: isIndeterminate.value\n    }));\n    useRender(() => {\n      var _slots$prepend, _slots$title, _slots$subtitle, _slots$default, _slots$append;\n\n      const Tag = isLink.value ? 'a' : props.tag;\n      const hasColor = !list || isSelected.value || isActive.value;\n      const hasTitle = slots.title || props.title;\n      const hasSubtitle = slots.subtitle || props.subtitle;\n      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon);\n      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon);\n      list == null ? void 0 : list.updateHasPrepend(hasPrepend);\n      return _withDirectives(_createVNode(Tag, {\n        \"class\": ['v-list-item', {\n          'v-list-item--active': isActive.value,\n          'v-list-item--disabled': props.disabled,\n          'v-list-item--link': isClickable.value,\n          'v-list-item--nav': props.nav,\n          'v-list-item--prepend': !hasPrepend && (list == null ? void 0 : list.hasPrepend.value),\n          [`${props.activeClass}`]: isActive.value\n        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : undefined, densityClasses.value, elevationClasses.value, lineClasses.value, roundedClasses.value, variantClasses.value],\n        \"style\": [hasColor ? colorStyles.value : undefined, dimensionStyles.value],\n        \"href\": link.href.value,\n        \"tabindex\": isClickable.value ? 0 : undefined,\n        \"onClick\": isClickable.value && (e => {\n          var _link$navigate;\n\n          if (isGroupActivator) return;\n          (_link$navigate = link.navigate) == null ? void 0 : _link$navigate.call(link, e);\n          props.value != null && select(!isSelected.value, e);\n        })\n      }, {\n        default: () => [genOverlays(isClickable.value || isActive.value, 'v-list-item'), hasPrepend && _createVNode(VDefaultsProvider, {\n          \"key\": \"prepend\",\n          \"defaults\": {\n            VAvatar: {\n              density: props.density,\n              image: props.prependAvatar\n            },\n            VIcon: {\n              density: props.density,\n              icon: props.prependIcon\n            },\n            VListItemAction: {\n              start: true\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-list-item__prepend\"\n          }, [props.prependAvatar && _createVNode(VAvatar, {\n            \"key\": \"prepend-avatar\"\n          }, null), props.prependIcon && _createVNode(VIcon, {\n            \"key\": \"prepend-icon\"\n          }, null), (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, slotProps.value)])]\n        }), _createVNode(\"div\", {\n          \"class\": \"v-list-item__content\"\n        }, [hasTitle && _createVNode(VListItemTitle, {\n          \"key\": \"title\"\n        }, {\n          default: () => [((_slots$title = slots.title) == null ? void 0 : _slots$title.call(slots, {\n            title: props.title\n          })) ?? props.title]\n        }), hasSubtitle && _createVNode(VListItemSubtitle, {\n          \"key\": \"subtitle\"\n        }, {\n          default: () => [((_slots$subtitle = slots.subtitle) == null ? void 0 : _slots$subtitle.call(slots, {\n            subtitle: props.subtitle\n          })) ?? props.subtitle]\n        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value)]), hasAppend && _createVNode(VDefaultsProvider, {\n          \"key\": \"append\",\n          \"defaults\": {\n            VAvatar: {\n              density: props.density,\n              image: props.appendAvatar\n            },\n            VIcon: {\n              density: props.density,\n              icon: props.appendIcon\n            },\n            VListItemAction: {\n              end: true\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-list-item__append\"\n          }, [(_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, slotProps.value), props.appendIcon && _createVNode(VIcon, {\n            \"key\": \"append-icon\"\n          }, null), props.appendAvatar && _createVNode(VAvatar, {\n            \"key\": \"append-avatar\"\n          }, null)])]\n        })]\n      }), [[_resolveDirective(\"ripple\"), isClickable.value]]);\n    });\n    return {};\n  }\n\n});\n//# sourceMappingURL=VListItem.mjs.map","start":1667202704044,"end":1667202704178}]}
