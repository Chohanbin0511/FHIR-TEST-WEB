{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/asn1/lib/ber/reader.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\nvar assert = require('assert');\nvar Buffer = require('safer-buffer').Buffer;\n\nvar ASN1 = require('./types');\nvar errors = require('./errors');\n\n\n// --- Globals\n\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n\n\n\n// --- API\n\nfunction Reader(data) {\n  if (!data || !Buffer.isBuffer(data))\n    throw new TypeError('data must be a node Buffer');\n\n  this._buf = data;\n  this._size = data.length;\n\n  // These hold the \"current\" state\n  this._len = 0;\n  this._offset = 0;\n}\n\nObject.defineProperty(Reader.prototype, 'length', {\n  enumerable: true,\n  get: function () { return (this._len); }\n});\n\nObject.defineProperty(Reader.prototype, 'offset', {\n  enumerable: true,\n  get: function () { return (this._offset); }\n});\n\nObject.defineProperty(Reader.prototype, 'remain', {\n  get: function () { return (this._size - this._offset); }\n});\n\nObject.defineProperty(Reader.prototype, 'buffer', {\n  get: function () { return (this._buf.slice(this._offset)); }\n});\n\n\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */\nReader.prototype.readByte = function (peek) {\n  if (this._size - this._offset < 1)\n    return null;\n\n  var b = this._buf[this._offset] & 0xff;\n\n  if (!peek)\n    this._offset += 1;\n\n  return b;\n};\n\n\nReader.prototype.peek = function () {\n  return this.readByte(true);\n};\n\n\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */\nReader.prototype.readLength = function (offset) {\n  if (offset === undefined)\n    offset = this._offset;\n\n  if (offset >= this._size)\n    return null;\n\n  var lenB = this._buf[offset++] & 0xff;\n  if (lenB === null)\n    return null;\n\n  if ((lenB & 0x80) === 0x80) {\n    lenB &= 0x7f;\n\n    if (lenB === 0)\n      throw newInvalidAsn1Error('Indefinite length not supported');\n\n    if (lenB > 4)\n      throw newInvalidAsn1Error('encoding too long');\n\n    if (this._size - offset < lenB)\n      return null;\n\n    this._len = 0;\n    for (var i = 0; i < lenB; i++)\n      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n\n  } else {\n    // Wasn't a variable length\n    this._len = lenB;\n  }\n\n  return offset;\n};\n\n\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */\nReader.prototype.readSequence = function (tag) {\n  var seq = this.peek();\n  if (seq === null)\n    return null;\n  if (tag !== undefined && tag !== seq)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + seq.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n  if (o === null)\n    return null;\n\n  this._offset = o;\n  return seq;\n};\n\n\nReader.prototype.readInt = function () {\n  return this._readTag(ASN1.Integer);\n};\n\n\nReader.prototype.readBoolean = function () {\n  return (this._readTag(ASN1.Boolean) === 0 ? false : true);\n};\n\n\nReader.prototype.readEnumeration = function () {\n  return this._readTag(ASN1.Enumeration);\n};\n\n\nReader.prototype.readString = function (tag, retbuf) {\n  if (!tag)\n    tag = ASN1.OctetString;\n\n  var b = this.peek();\n  if (b === null)\n    return null;\n\n  if (b !== tag)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + b.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n\n  if (o === null)\n    return null;\n\n  if (this.length > this._size - o)\n    return null;\n\n  this._offset = o;\n\n  if (this.length === 0)\n    return retbuf ? Buffer.alloc(0) : '';\n\n  var str = this._buf.slice(this._offset, this._offset + this.length);\n  this._offset += this.length;\n\n  return retbuf ? str : str.toString('utf8');\n};\n\nReader.prototype.readOID = function (tag) {\n  if (!tag)\n    tag = ASN1.OID;\n\n  var b = this.readString(tag, true);\n  if (b === null)\n    return null;\n\n  var values = [];\n  var value = 0;\n\n  for (var i = 0; i < b.length; i++) {\n    var byte = b[i] & 0xff;\n\n    value <<= 7;\n    value += byte & 0x7f;\n    if ((byte & 0x80) === 0) {\n      values.push(value);\n      value = 0;\n    }\n  }\n\n  value = values.shift();\n  values.unshift(value % 40);\n  values.unshift((value / 40) >> 0);\n\n  return values.join('.');\n};\n\n\nReader.prototype._readTag = function (tag) {\n  assert.ok(tag !== undefined);\n\n  var b = this.peek();\n\n  if (b === null)\n    return null;\n\n  if (b !== tag)\n    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n                              ': got 0x' + b.toString(16));\n\n  var o = this.readLength(this._offset + 1); // stored in `length`\n  if (o === null)\n    return null;\n\n  if (this.length > 4)\n    throw newInvalidAsn1Error('Integer too long: ' + this.length);\n\n  if (this.length > this._size - o)\n    return null;\n  this._offset = o;\n\n  var fb = this._buf[this._offset];\n  var value = 0;\n\n  for (var i = 0; i < this.length; i++) {\n    value <<= 8;\n    value |= (this._buf[this._offset++] & 0xff);\n  }\n\n  if ((fb & 0x80) === 0x80 && i !== 4)\n    value -= (1 << (i * 8));\n\n  return value >> 0;\n};\n\n\n\n// --- Exported API\n\nmodule.exports = Reader;\n","start":1667202984642,"end":1667202984967},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/asn1/lib/ber/types.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/asn1/lib/ber/errors.js?commonjs-wrapped\";\n\nvar reader;\nvar hasRequiredReader;\n\nfunction requireReader () {\n\tif (hasRequiredReader) return reader;\n\thasRequiredReader = 1;\n\t// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n\n\tvar assert = require$$0;\n\tvar Buffer = require$$1().Buffer;\n\n\tvar ASN1 = require$$2();\n\tvar errors = require$$3();\n\n\n\t// --- Globals\n\n\tvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n\n\n\n\t// --- API\n\n\tfunction Reader(data) {\n\t  if (!data || !Buffer.isBuffer(data))\n\t    throw new TypeError('data must be a node Buffer');\n\n\t  this._buf = data;\n\t  this._size = data.length;\n\n\t  // These hold the \"current\" state\n\t  this._len = 0;\n\t  this._offset = 0;\n\t}\n\n\tObject.defineProperty(Reader.prototype, 'length', {\n\t  enumerable: true,\n\t  get: function () { return (this._len); }\n\t});\n\n\tObject.defineProperty(Reader.prototype, 'offset', {\n\t  enumerable: true,\n\t  get: function () { return (this._offset); }\n\t});\n\n\tObject.defineProperty(Reader.prototype, 'remain', {\n\t  get: function () { return (this._size - this._offset); }\n\t});\n\n\tObject.defineProperty(Reader.prototype, 'buffer', {\n\t  get: function () { return (this._buf.slice(this._offset)); }\n\t});\n\n\n\t/**\n\t * Reads a single byte and advances offset; you can pass in `true` to make this\n\t * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n\t *\n\t * @param {Boolean} peek true means don't move offset.\n\t * @return {Number} the next byte, null if not enough data.\n\t */\n\tReader.prototype.readByte = function (peek) {\n\t  if (this._size - this._offset < 1)\n\t    return null;\n\n\t  var b = this._buf[this._offset] & 0xff;\n\n\t  if (!peek)\n\t    this._offset += 1;\n\n\t  return b;\n\t};\n\n\n\tReader.prototype.peek = function () {\n\t  return this.readByte(true);\n\t};\n\n\n\t/**\n\t * Reads a (potentially) variable length off the BER buffer.  This call is\n\t * not really meant to be called directly, as callers have to manipulate\n\t * the internal buffer afterwards.\n\t *\n\t * As a result of this call, you can call `Reader.length`, until the\n\t * next thing called that does a readLength.\n\t *\n\t * @return {Number} the amount of offset to advance the buffer.\n\t * @throws {InvalidAsn1Error} on bad ASN.1\n\t */\n\tReader.prototype.readLength = function (offset) {\n\t  if (offset === undefined)\n\t    offset = this._offset;\n\n\t  if (offset >= this._size)\n\t    return null;\n\n\t  var lenB = this._buf[offset++] & 0xff;\n\t  if (lenB === null)\n\t    return null;\n\n\t  if ((lenB & 0x80) === 0x80) {\n\t    lenB &= 0x7f;\n\n\t    if (lenB === 0)\n\t      throw newInvalidAsn1Error('Indefinite length not supported');\n\n\t    if (lenB > 4)\n\t      throw newInvalidAsn1Error('encoding too long');\n\n\t    if (this._size - offset < lenB)\n\t      return null;\n\n\t    this._len = 0;\n\t    for (var i = 0; i < lenB; i++)\n\t      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n\n\t  } else {\n\t    // Wasn't a variable length\n\t    this._len = lenB;\n\t  }\n\n\t  return offset;\n\t};\n\n\n\t/**\n\t * Parses the next sequence in this BER buffer.\n\t *\n\t * To get the length of the sequence, call `Reader.length`.\n\t *\n\t * @return {Number} the sequence's tag.\n\t */\n\tReader.prototype.readSequence = function (tag) {\n\t  var seq = this.peek();\n\t  if (seq === null)\n\t    return null;\n\t  if (tag !== undefined && tag !== seq)\n\t    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n\t                              ': got 0x' + seq.toString(16));\n\n\t  var o = this.readLength(this._offset + 1); // stored in `length`\n\t  if (o === null)\n\t    return null;\n\n\t  this._offset = o;\n\t  return seq;\n\t};\n\n\n\tReader.prototype.readInt = function () {\n\t  return this._readTag(ASN1.Integer);\n\t};\n\n\n\tReader.prototype.readBoolean = function () {\n\t  return (this._readTag(ASN1.Boolean) === 0 ? false : true);\n\t};\n\n\n\tReader.prototype.readEnumeration = function () {\n\t  return this._readTag(ASN1.Enumeration);\n\t};\n\n\n\tReader.prototype.readString = function (tag, retbuf) {\n\t  if (!tag)\n\t    tag = ASN1.OctetString;\n\n\t  var b = this.peek();\n\t  if (b === null)\n\t    return null;\n\n\t  if (b !== tag)\n\t    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n\t                              ': got 0x' + b.toString(16));\n\n\t  var o = this.readLength(this._offset + 1); // stored in `length`\n\n\t  if (o === null)\n\t    return null;\n\n\t  if (this.length > this._size - o)\n\t    return null;\n\n\t  this._offset = o;\n\n\t  if (this.length === 0)\n\t    return retbuf ? Buffer.alloc(0) : '';\n\n\t  var str = this._buf.slice(this._offset, this._offset + this.length);\n\t  this._offset += this.length;\n\n\t  return retbuf ? str : str.toString('utf8');\n\t};\n\n\tReader.prototype.readOID = function (tag) {\n\t  if (!tag)\n\t    tag = ASN1.OID;\n\n\t  var b = this.readString(tag, true);\n\t  if (b === null)\n\t    return null;\n\n\t  var values = [];\n\t  var value = 0;\n\n\t  for (var i = 0; i < b.length; i++) {\n\t    var byte = b[i] & 0xff;\n\n\t    value <<= 7;\n\t    value += byte & 0x7f;\n\t    if ((byte & 0x80) === 0) {\n\t      values.push(value);\n\t      value = 0;\n\t    }\n\t  }\n\n\t  value = values.shift();\n\t  values.unshift(value % 40);\n\t  values.unshift((value / 40) >> 0);\n\n\t  return values.join('.');\n\t};\n\n\n\tReader.prototype._readTag = function (tag) {\n\t  assert.ok(tag !== undefined);\n\n\t  var b = this.peek();\n\n\t  if (b === null)\n\t    return null;\n\n\t  if (b !== tag)\n\t    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) +\n\t                              ': got 0x' + b.toString(16));\n\n\t  var o = this.readLength(this._offset + 1); // stored in `length`\n\t  if (o === null)\n\t    return null;\n\n\t  if (this.length > 4)\n\t    throw newInvalidAsn1Error('Integer too long: ' + this.length);\n\n\t  if (this.length > this._size - o)\n\t    return null;\n\t  this._offset = o;\n\n\t  var fb = this._buf[this._offset];\n\t  var value = 0;\n\n\t  for (var i = 0; i < this.length; i++) {\n\t    value <<= 8;\n\t    value |= (this._buf[this._offset++] & 0xff);\n\t  }\n\n\t  if ((fb & 0x80) === 0x80 && i !== 4)\n\t    value -= (1 << (i * 8));\n\n\t  return value >> 0;\n\t};\n\n\n\n\t// --- Exported API\n\n\treader = Reader;\n\treturn reader;\n}\n\nexport { requireReader as __require };","start":1667202984967,"end":1667202984978,"order":"normal"}]}
