{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/vuetify/lib/components/VList/VListGroup.mjs","transforms":[{"name":"vite:load-fallback","result":"import { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VExpandTransition } from \"../transitions/index.mjs\"; // Composables\n\nimport { useList } from \"./list.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useNestedGroupActivator, useNestedItem } from \"../../composables/nested/nested.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { defineComponent, genericComponent, pick, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nconst VListGroupActivator = defineComponent({\n  name: 'VListGroupActivator',\n\n  setup(_, _ref) {\n    let {\n      slots\n    } = _ref;\n    useNestedGroupActivator();\n    return () => {\n      var _slots$default;\n\n      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);\n    };\n  }\n\n});\nexport const makeVListGroupProps = propsFactory({\n  activeColor: String,\n  color: String,\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse'\n  },\n  expandIcon: {\n    type: IconValue,\n    default: '$expand'\n  },\n  prependIcon: IconValue,\n  appendIcon: IconValue,\n  fluid: Boolean,\n  subgroup: Boolean,\n  value: null,\n  ...makeTagProps()\n});\nexport const VListGroup = genericComponent()({\n  name: 'VListGroup',\n  props: {\n    title: String,\n    ...makeVListGroupProps()\n  },\n\n  setup(props, _ref2) {\n    let {\n      slots\n    } = _ref2;\n    const {\n      isOpen,\n      open\n    } = useNestedItem(toRef(props, 'value'), true);\n    const list = useList();\n\n    const onClick = e => {\n      open(!isOpen.value, e);\n    };\n\n    const activatorProps = computed(() => ({\n      onClick,\n      class: 'v-list-group__header'\n    }));\n    const toggleIcon = computed(() => isOpen.value ? props.collapseIcon : props.expandIcon);\n    useRender(() => {\n      var _slots$default2;\n\n      return _createVNode(props.tag, {\n        \"class\": ['v-list-group', {\n          'v-list-group--prepend': list == null ? void 0 : list.hasPrepend.value,\n          'v-list-group--fluid': props.fluid,\n          'v-list-group--subgroup': props.subgroup\n        }]\n      }, {\n        default: () => [slots.activator && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VListItem: {\n              active: isOpen.value,\n              activeColor: props.activeColor,\n              color: props.color,\n              prependIcon: props.prependIcon || props.subgroup && toggleIcon.value,\n              appendIcon: props.appendIcon || !props.subgroup && toggleIcon.value,\n              title: props.title,\n              value: props.value\n            }\n          }\n        }, {\n          default: () => [_createVNode(VListGroupActivator, null, {\n            default: () => [slots.activator({\n              props: activatorProps.value,\n              isOpen\n            })]\n          })]\n        }), _createVNode(VExpandTransition, null, {\n          default: () => [_withDirectives(_createVNode(\"div\", {\n            \"class\": \"v-list-group__items\"\n          }, [(_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)]), [[_vShow, isOpen.value]])]\n        })]\n      });\n    });\n    return {};\n  }\n\n});\nexport function filterListGroupProps(props) {\n  return pick(props, Object.keys(VListGroup.props));\n}\n//# sourceMappingURL=VListGroup.mjs.map","start":1667202980827,"end":1667202981041}]}
