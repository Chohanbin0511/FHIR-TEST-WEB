{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/url.js","transforms":[{"name":"vite:load-fallback","result":"(function() {\n    var utils = require(\"../utils\");\n    var core = require(\"./core\");\n\n    var id = function(x){return x;};\n    var constantly = function(x){return function(){return x;};};\n\n    var get_in = function(obj, path){\n        return path.split('.').reduce(function(acc,x){\n            if(x === 'versionId' && acc[x]){ return '_history/'+ acc[x] }\n            if(acc == null || acc == undefined) { return null; }\n            return acc[x];\n        }, obj);\n    };\n\n    var evalPropsExpr = function(exp, args){\n        var exps =  exp.split('||').map(function(x){return x.trim().substring(1);});\n        for(var i = 0; i < exps.length; i++){\n            var res = get_in(args, exps[i]);\n            if(res){ return res; }\n        }\n        return null;\n    };\n\n    var evalExpr = function(exp, args){\n        if (exp.indexOf(\":\") == 0){\n            return evalPropsExpr(exp, args);\n        } else {\n            return exp;\n        }\n    };\n\n    var buildPathPart = function(pth, args){\n        var k = evalExpr(pth.trim(), args);\n        if((k==null || k === undefined) && pth.includes('target.versionId') == false){ throw new Error(\"Parameter \"+pth+\" is required: \" + JSON.stringify(args)); }\n        return k;\n    };\n\n    // path chaining function\n    // which return haldler wrapper: (h, cfg)->(args -> promise)\n    // it's chainable Path(\"baseUrl\").slash(\":type\").slash(\":id\").slash(\"_history\")(id, {})({id: 5, type: 'Patient'})\n    // and composable p0 = Path(\"baseUrl); p1 = p0.slash(\"path)\n    var Path = function(tkn, chain){\n        //Chainable\n        var new_chain = function(args){\n            if(chain && tkn.includes('target.versionId') && !args.target.versionId){\n                return chain(args);\n            }\n            return ((chain && (chain(args) + \"/\")) || \"\") +  buildPathPart(tkn, args);\n        };\n        var ch = core.Attribute('url', new_chain);\n        ch.slash = function(tkn){\n            return Path(tkn, new_chain);\n        };\n        return ch;\n    };\n\n    exports.Path = Path;\n}).call(this);\n","start":1667202981286,"end":1667202981511},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as url } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/url.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/utils.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/core.js?commonjs-wrapped\";\n\nvar hasRequiredUrl;\n\nfunction requireUrl () {\n\tif (hasRequiredUrl) return url;\n\thasRequiredUrl = 1;\n\t(function() {\n\t    var utils = require$$0();\n\t    var core = require$$1();\n\n\t    var id = function(x){return x;};\n\t    var constantly = function(x){return function(){return x;};};\n\n\t    var get_in = function(obj, path){\n\t        return path.split('.').reduce(function(acc,x){\n\t            if(x === 'versionId' && acc[x]){ return '_history/'+ acc[x] }\n\t            if(acc == null || acc == undefined) { return null; }\n\t            return acc[x];\n\t        }, obj);\n\t    };\n\n\t    var evalPropsExpr = function(exp, args){\n\t        var exps =  exp.split('||').map(function(x){return x.trim().substring(1);});\n\t        for(var i = 0; i < exps.length; i++){\n\t            var res = get_in(args, exps[i]);\n\t            if(res){ return res; }\n\t        }\n\t        return null;\n\t    };\n\n\t    var evalExpr = function(exp, args){\n\t        if (exp.indexOf(\":\") == 0){\n\t            return evalPropsExpr(exp, args);\n\t        } else {\n\t            return exp;\n\t        }\n\t    };\n\n\t    var buildPathPart = function(pth, args){\n\t        var k = evalExpr(pth.trim(), args);\n\t        if((k==null || k === undefined) && pth.includes('target.versionId') == false){ throw new Error(\"Parameter \"+pth+\" is required: \" + JSON.stringify(args)); }\n\t        return k;\n\t    };\n\n\t    // path chaining function\n\t    // which return haldler wrapper: (h, cfg)->(args -> promise)\n\t    // it's chainable Path(\"baseUrl\").slash(\":type\").slash(\":id\").slash(\"_history\")(id, {})({id: 5, type: 'Patient'})\n\t    // and composable p0 = Path(\"baseUrl); p1 = p0.slash(\"path)\n\t    var Path = function(tkn, chain){\n\t        //Chainable\n\t        var new_chain = function(args){\n\t            if(chain && tkn.includes('target.versionId') && !args.target.versionId){\n\t                return chain(args);\n\t            }\n\t            return ((chain && (chain(args) + \"/\")) || \"\") +  buildPathPart(tkn, args);\n\t        };\n\t        var ch = core.Attribute('url', new_chain);\n\t        ch.slash = function(tkn){\n\t            return Path(tkn, new_chain);\n\t        };\n\t        return ch;\n\t    };\n\n\t    url.Path = Path;\n\t}).call(commonjsHelpers.commonjsGlobal);\n\treturn url;\n}\n\nexport { requireUrl as __require };","start":1667202981512,"end":1667202982202,"order":"normal"}]}
