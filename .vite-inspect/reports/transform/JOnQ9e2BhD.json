{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n","start":1667202983849,"end":1667202984042},{"name":"commonjs","result":"/* eslint-disable node/no-deprecated-api */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/buffer/index.js?commonjs-wrapped\";\n\nvar safer_1;\nvar hasRequiredSafer;\n\nfunction requireSafer () {\n\tif (hasRequiredSafer) return safer_1;\n\thasRequiredSafer = 1;\n\t'use strict'\n\n\tvar buffer = require$$0()\n\tvar Buffer = buffer.Buffer\n\n\tvar safer = {}\n\n\tvar key\n\n\tfor (key in buffer) {\n\t  if (!buffer.hasOwnProperty(key)) continue\n\t  if (key === 'SlowBuffer' || key === 'Buffer') continue\n\t  safer[key] = buffer[key]\n\t}\n\n\tvar Safer = safer.Buffer = {}\n\tfor (key in Buffer) {\n\t  if (!Buffer.hasOwnProperty(key)) continue\n\t  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n\t  Safer[key] = Buffer[key]\n\t}\n\n\tsafer.Buffer.prototype = Buffer.prototype\n\n\tif (!Safer.from || Safer.from === Uint8Array.from) {\n\t  Safer.from = function (value, encodingOrOffset, length) {\n\t    if (typeof value === 'number') {\n\t      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n\t    }\n\t    if (value && typeof value.length === 'undefined') {\n\t      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n\t    }\n\t    return Buffer(value, encodingOrOffset, length)\n\t  }\n\t}\n\n\tif (!Safer.alloc) {\n\t  Safer.alloc = function (size, fill, encoding) {\n\t    if (typeof size !== 'number') {\n\t      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n\t    }\n\t    if (size < 0 || size >= 2 * (1 << 30)) {\n\t      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n\t    }\n\t    var buf = Buffer(size)\n\t    if (!fill || fill.length === 0) {\n\t      buf.fill(0)\n\t    } else if (typeof encoding === 'string') {\n\t      buf.fill(fill, encoding)\n\t    } else {\n\t      buf.fill(fill)\n\t    }\n\t    return buf\n\t  }\n\t}\n\n\tif (!safer.kStringMaxLength) {\n\t  try {\n\t    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n\t  } catch (e) {\n\t    // we can't determine kStringMaxLength in environments where process.binding\n\t    // is unsupported, so let's not set it\n\t  }\n\t}\n\n\tif (!safer.constants) {\n\t  safer.constants = {\n\t    MAX_LENGTH: safer.kMaxLength\n\t  }\n\t  if (safer.kStringMaxLength) {\n\t    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n\t  }\n\t}\n\n\tsafer_1 = safer\n\treturn safer_1;\n}\n\nexport { requireSafer as __require };","start":1667202984042,"end":1667202984047,"order":"normal"}]}
