{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/aws4/lru.js","transforms":[{"name":"vite:load-fallback","result":"module.exports = function(size) {\n  return new LruCache(size)\n}\n\nfunction LruCache(size) {\n  this.capacity = size | 0\n  this.map = Object.create(null)\n  this.list = new DoublyLinkedList()\n}\n\nLruCache.prototype.get = function(key) {\n  var node = this.map[key]\n  if (node == null) return undefined\n  this.used(node)\n  return node.val\n}\n\nLruCache.prototype.set = function(key, val) {\n  var node = this.map[key]\n  if (node != null) {\n    node.val = val\n  } else {\n    if (!this.capacity) this.prune()\n    if (!this.capacity) return false\n    node = new DoublyLinkedNode(key, val)\n    this.map[key] = node\n    this.capacity--\n  }\n  this.used(node)\n  return true\n}\n\nLruCache.prototype.used = function(node) {\n  this.list.moveToFront(node)\n}\n\nLruCache.prototype.prune = function() {\n  var node = this.list.pop()\n  if (node != null) {\n    delete this.map[node.key]\n    this.capacity++\n  }\n}\n\n\nfunction DoublyLinkedList() {\n  this.firstNode = null\n  this.lastNode = null\n}\n\nDoublyLinkedList.prototype.moveToFront = function(node) {\n  if (this.firstNode == node) return\n\n  this.remove(node)\n\n  if (this.firstNode == null) {\n    this.firstNode = node\n    this.lastNode = node\n    node.prev = null\n    node.next = null\n  } else {\n    node.prev = null\n    node.next = this.firstNode\n    node.next.prev = node\n    this.firstNode = node\n  }\n}\n\nDoublyLinkedList.prototype.pop = function() {\n  var lastNode = this.lastNode\n  if (lastNode != null) {\n    this.remove(lastNode)\n  }\n  return lastNode\n}\n\nDoublyLinkedList.prototype.remove = function(node) {\n  if (this.firstNode == node) {\n    this.firstNode = node.next\n  } else if (node.prev != null) {\n    node.prev.next = node.next\n  }\n  if (this.lastNode == node) {\n    this.lastNode = node.prev\n  } else if (node.next != null) {\n    node.next.prev = node.prev\n  }\n}\n\n\nfunction DoublyLinkedNode(key, val) {\n  this.key = key\n  this.val = val\n  this.prev = null\n  this.next = null\n}\n","start":1667202705075,"end":1667202705241},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar lru;\nvar hasRequiredLru;\n\nfunction requireLru () {\n\tif (hasRequiredLru) return lru;\n\thasRequiredLru = 1;\n\tlru = function(size) {\n\t  return new LruCache(size)\n\t}\n\n\tfunction LruCache(size) {\n\t  this.capacity = size | 0\n\t  this.map = Object.create(null)\n\t  this.list = new DoublyLinkedList()\n\t}\n\n\tLruCache.prototype.get = function(key) {\n\t  var node = this.map[key]\n\t  if (node == null) return undefined\n\t  this.used(node)\n\t  return node.val\n\t}\n\n\tLruCache.prototype.set = function(key, val) {\n\t  var node = this.map[key]\n\t  if (node != null) {\n\t    node.val = val\n\t  } else {\n\t    if (!this.capacity) this.prune()\n\t    if (!this.capacity) return false\n\t    node = new DoublyLinkedNode(key, val)\n\t    this.map[key] = node\n\t    this.capacity--\n\t  }\n\t  this.used(node)\n\t  return true\n\t}\n\n\tLruCache.prototype.used = function(node) {\n\t  this.list.moveToFront(node)\n\t}\n\n\tLruCache.prototype.prune = function() {\n\t  var node = this.list.pop()\n\t  if (node != null) {\n\t    delete this.map[node.key]\n\t    this.capacity++\n\t  }\n\t}\n\n\n\tfunction DoublyLinkedList() {\n\t  this.firstNode = null\n\t  this.lastNode = null\n\t}\n\n\tDoublyLinkedList.prototype.moveToFront = function(node) {\n\t  if (this.firstNode == node) return\n\n\t  this.remove(node)\n\n\t  if (this.firstNode == null) {\n\t    this.firstNode = node\n\t    this.lastNode = node\n\t    node.prev = null\n\t    node.next = null\n\t  } else {\n\t    node.prev = null\n\t    node.next = this.firstNode\n\t    node.next.prev = node\n\t    this.firstNode = node\n\t  }\n\t}\n\n\tDoublyLinkedList.prototype.pop = function() {\n\t  var lastNode = this.lastNode\n\t  if (lastNode != null) {\n\t    this.remove(lastNode)\n\t  }\n\t  return lastNode\n\t}\n\n\tDoublyLinkedList.prototype.remove = function(node) {\n\t  if (this.firstNode == node) {\n\t    this.firstNode = node.next\n\t  } else if (node.prev != null) {\n\t    node.prev.next = node.next\n\t  }\n\t  if (this.lastNode == node) {\n\t    this.lastNode = node.prev\n\t  } else if (node.next != null) {\n\t    node.next.prev = node.prev\n\t  }\n\t}\n\n\n\tfunction DoublyLinkedNode(key, val) {\n\t  this.key = key\n\t  this.val = val\n\t  this.prev = null\n\t  this.next = null\n\t}\n\treturn lru;\n}\n\nexport { requireLru as __require };","start":1667202705242,"end":1667202705243,"order":"normal"}]}
