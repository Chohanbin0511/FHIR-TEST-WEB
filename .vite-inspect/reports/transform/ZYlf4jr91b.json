{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/is-typed-array/index.js","transforms":[{"name":"vite:load-fallback","result":"'use strict';\n\nvar forEach = require('for-each');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tif (Symbol.toStringTag in arr) {\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar anyTrue = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!anyTrue) {\n\t\t\ttry {\n\t\t\t\tanyTrue = getter.call(value) === typedArray;\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn anyTrue;\n};\n\nmodule.exports = function isTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\treturn $indexOf(typedArrays, tag) > -1;\n\t}\n\tif (!gOPD) { return false; }\n\treturn tryTypedArrays(value);\n};\n","start":1667202982694,"end":1667202983095},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/for-each/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/available-typed-arrays/index.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/call-bind/callBound.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/has-tostringtag/shams.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js?commonjs-wrapped\";\n\nvar isTypedArray;\nvar hasRequiredIsTypedArray;\n\nfunction requireIsTypedArray () {\n\tif (hasRequiredIsTypedArray) return isTypedArray;\n\thasRequiredIsTypedArray = 1;\n\t'use strict';\n\n\tvar forEach = require$$0();\n\tvar availableTypedArrays = require$$1();\n\tvar callBound = require$$2();\n\n\tvar $toString = callBound('Object.prototype.toString');\n\tvar hasToStringTag = require$$3()();\n\n\tvar g = typeof globalThis === 'undefined' ? commonjsHelpers.commonjsGlobal : globalThis;\n\tvar typedArrays = availableTypedArrays();\n\n\tvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\t\tfor (var i = 0; i < array.length; i += 1) {\n\t\t\tif (array[i] === value) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\tvar $slice = callBound('String.prototype.slice');\n\tvar toStrTags = {};\n\tvar gOPD = require$$4();\n\tvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\tif (hasToStringTag && gOPD && getPrototypeOf) {\n\t\tforEach(typedArrays, function (typedArray) {\n\t\t\tvar arr = new g[typedArray]();\n\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\tif (!descriptor) {\n\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t}\n\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t}\n\t\t});\n\t}\n\n\tvar tryTypedArrays = function tryAllTypedArrays(value) {\n\t\tvar anyTrue = false;\n\t\tforEach(toStrTags, function (getter, typedArray) {\n\t\t\tif (!anyTrue) {\n\t\t\t\ttry {\n\t\t\t\t\tanyTrue = getter.call(value) === typedArray;\n\t\t\t\t} catch (e) { /**/ }\n\t\t\t}\n\t\t});\n\t\treturn anyTrue;\n\t};\n\n\tisTypedArray = function isTypedArray(value) {\n\t\tif (!value || typeof value !== 'object') { return false; }\n\t\tif (!hasToStringTag || !(Symbol.toStringTag in value)) {\n\t\t\tvar tag = $slice($toString(value), 8, -1);\n\t\t\treturn $indexOf(typedArrays, tag) > -1;\n\t\t}\n\t\tif (!gOPD) { return false; }\n\t\treturn tryTypedArrays(value);\n\t};\n\treturn isTypedArray;\n}\n\nexport { requireIsTypedArray as __require };","start":1667202983095,"end":1667202984779,"order":"normal"}]}
