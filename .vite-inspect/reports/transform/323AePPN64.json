{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/rfc4253.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read.bind(undefined, false, undefined),\n\treadType: read.bind(undefined, false),\n\twrite: write,\n\t/* semi-private api, used by sshpk-agent */\n\treadPartial: read.bind(undefined, true),\n\n\t/* shared with ssh format */\n\treadInternal: read,\n\tkeyTypeToAlg: keyTypeToAlg,\n\talgToKeyType: algToKeyType\n};\n\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar SSHBuffer = require('../ssh-buffer');\n\nfunction algToKeyType(alg) {\n\tassert.string(alg);\n\tif (alg === 'ssh-dss')\n\t\treturn ('dsa');\n\telse if (alg === 'ssh-rsa')\n\t\treturn ('rsa');\n\telse if (alg === 'ssh-ed25519')\n\t\treturn ('ed25519');\n\telse if (alg === 'ssh-curve25519')\n\t\treturn ('curve25519');\n\telse if (alg.match(/^ecdsa-sha2-/))\n\t\treturn ('ecdsa');\n\telse\n\t\tthrow (new Error('Unknown algorithm ' + alg));\n}\n\nfunction keyTypeToAlg(key) {\n\tassert.object(key);\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss');\n\telse if (key.type === 'rsa')\n\t\treturn ('ssh-rsa');\n\telse if (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519');\n\telse if (key.type === 'curve25519')\n\t\treturn ('ssh-curve25519');\n\telse if (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n\telse\n\t\tthrow (new Error('Unknown key type ' + key.type));\n}\n\nfunction read(partial, type, buf, options) {\n\tif (typeof (buf) === 'string')\n\t\tbuf = Buffer.from(buf);\n\tassert.buffer(buf, 'buf');\n\n\tvar key = {};\n\n\tvar parts = key.parts = [];\n\tvar sshbuf = new SSHBuffer({buffer: buf});\n\n\tvar alg = sshbuf.readString();\n\tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n\tkey.type = algToKeyType(alg);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\tif (type && type === 'private')\n\t\tpartCount = algs.privInfo[key.type].parts.length;\n\n\twhile (!sshbuf.atEnd() && parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\twhile (!partial && !sshbuf.atEnd())\n\t\tparts.push(sshbuf.readPart());\n\n\tassert.ok(parts.length >= 1,\n\t    'key must have at least one part');\n\tassert.ok(partial || sshbuf.atEnd(),\n\t    'leftover bytes at end of key');\n\n\tvar Constructor = Key;\n\tvar algInfo = algs.info[key.type];\n\tif (type === 'private' || algInfo.parts.length !== parts.length) {\n\t\talgInfo = algs.privInfo[key.type];\n\t\tConstructor = PrivateKey;\n\t}\n\tassert.strictEqual(algInfo.parts.length, parts.length);\n\n\tif (key.type === 'ecdsa') {\n\t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tvar normalized = true;\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tvar p = parts[i];\n\t\tp.name = algInfo.parts[i];\n\t\t/*\n\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t * concat'd together (k followed by A). We want to keep them\n\t\t * separate for other formats that don't do this.\n\t\t */\n\t\tif (key.type === 'ed25519' && p.name === 'k')\n\t\t\tp.data = p.data.slice(0, 32);\n\n\t\tif (p.name !== 'curve' && algInfo.normalize !== false) {\n\t\t\tvar nd;\n\t\t\tif (key.type === 'ed25519') {\n\t\t\t\tnd = utils.zeroPadToLength(p.data, 32);\n\t\t\t} else {\n\t\t\t\tnd = utils.mpNormalize(p.data);\n\t\t\t}\n\t\t\tif (nd.toString('binary') !==\n\t\t\t    p.data.toString('binary')) {\n\t\t\t\tp.data = nd;\n\t\t\t\tnormalized = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (normalized)\n\t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n\tif (partial && typeof (partial) === 'object') {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Constructor(key));\n}\n\nfunction write(key, options) {\n\tassert.object(key);\n\n\tvar alg = keyTypeToAlg(key);\n\tvar i;\n\n\tvar algInfo = algs.info[key.type];\n\tif (PrivateKey.isPrivateKey(key))\n\t\talgInfo = algs.privInfo[key.type];\n\tvar parts = algInfo.parts;\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeString(alg);\n\n\tfor (i = 0; i < parts.length; ++i) {\n\t\tvar data = key.part[parts[i]].data;\n\t\tif (algInfo.normalize !== false) {\n\t\t\tif (key.type === 'ed25519')\n\t\t\t\tdata = utils.zeroPadToLength(data, 32);\n\t\t\telse\n\t\t\t\tdata = utils.mpNormalize(data);\n\t\t}\n\t\tif (key.type === 'ed25519' && parts[i] === 'k')\n\t\t\tdata = Buffer.concat([data, key.part.A.data]);\n\t\tbuf.writeBuffer(data);\n\t}\n\n\treturn (buf.toBuffer());\n}\n","start":1667202706616,"end":1667202706785},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/algs.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/ssh-buffer.js?commonjs-wrapped\";\n\nvar rfc4253;\nvar hasRequiredRfc4253;\n\nfunction requireRfc4253 () {\n\tif (hasRequiredRfc4253) return rfc4253;\n\thasRequiredRfc4253 = 1;\n\t// Copyright 2015 Joyent, Inc.\n\n\trfc4253 = {\n\t\tread: read.bind(undefined, false, undefined),\n\t\treadType: read.bind(undefined, false),\n\t\twrite: write,\n\t\t/* semi-private api, used by sshpk-agent */\n\t\treadPartial: read.bind(undefined, true),\n\n\t\t/* shared with ssh format */\n\t\treadInternal: read,\n\t\tkeyTypeToAlg: keyTypeToAlg,\n\t\talgToKeyType: algToKeyType\n\t};\n\n\tvar assert = require$$0();\n\tvar Buffer = require$$1().Buffer;\n\tvar algs = require$$2();\n\tvar utils = require$$3();\n\tvar Key = require$$4();\n\tvar PrivateKey = require$$5();\n\tvar SSHBuffer = require$$6();\n\n\tfunction algToKeyType(alg) {\n\t\tassert.string(alg);\n\t\tif (alg === 'ssh-dss')\n\t\t\treturn ('dsa');\n\t\telse if (alg === 'ssh-rsa')\n\t\t\treturn ('rsa');\n\t\telse if (alg === 'ssh-ed25519')\n\t\t\treturn ('ed25519');\n\t\telse if (alg === 'ssh-curve25519')\n\t\t\treturn ('curve25519');\n\t\telse if (alg.match(/^ecdsa-sha2-/))\n\t\t\treturn ('ecdsa');\n\t\telse\n\t\t\tthrow (new Error('Unknown algorithm ' + alg));\n\t}\n\n\tfunction keyTypeToAlg(key) {\n\t\tassert.object(key);\n\t\tif (key.type === 'dsa')\n\t\t\treturn ('ssh-dss');\n\t\telse if (key.type === 'rsa')\n\t\t\treturn ('ssh-rsa');\n\t\telse if (key.type === 'ed25519')\n\t\t\treturn ('ssh-ed25519');\n\t\telse if (key.type === 'curve25519')\n\t\t\treturn ('ssh-curve25519');\n\t\telse if (key.type === 'ecdsa')\n\t\t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n\t\telse\n\t\t\tthrow (new Error('Unknown key type ' + key.type));\n\t}\n\n\tfunction read(partial, type, buf, options) {\n\t\tif (typeof (buf) === 'string')\n\t\t\tbuf = Buffer.from(buf);\n\t\tassert.buffer(buf, 'buf');\n\n\t\tvar key = {};\n\n\t\tvar parts = key.parts = [];\n\t\tvar sshbuf = new SSHBuffer({buffer: buf});\n\n\t\tvar alg = sshbuf.readString();\n\t\tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n\t\tkey.type = algToKeyType(alg);\n\n\t\tvar partCount = algs.info[key.type].parts.length;\n\t\tif (type && type === 'private')\n\t\t\tpartCount = algs.privInfo[key.type].parts.length;\n\n\t\twhile (!sshbuf.atEnd() && parts.length < partCount)\n\t\t\tparts.push(sshbuf.readPart());\n\t\twhile (!partial && !sshbuf.atEnd())\n\t\t\tparts.push(sshbuf.readPart());\n\n\t\tassert.ok(parts.length >= 1,\n\t\t    'key must have at least one part');\n\t\tassert.ok(partial || sshbuf.atEnd(),\n\t\t    'leftover bytes at end of key');\n\n\t\tvar Constructor = Key;\n\t\tvar algInfo = algs.info[key.type];\n\t\tif (type === 'private' || algInfo.parts.length !== parts.length) {\n\t\t\talgInfo = algs.privInfo[key.type];\n\t\t\tConstructor = PrivateKey;\n\t\t}\n\t\tassert.strictEqual(algInfo.parts.length, parts.length);\n\n\t\tif (key.type === 'ecdsa') {\n\t\t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n\t\t\tassert.ok(res !== null);\n\t\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t\t}\n\n\t\tvar normalized = true;\n\t\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\t\tvar p = parts[i];\n\t\t\tp.name = algInfo.parts[i];\n\t\t\t/*\n\t\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t\t * concat'd together (k followed by A). We want to keep them\n\t\t\t * separate for other formats that don't do this.\n\t\t\t */\n\t\t\tif (key.type === 'ed25519' && p.name === 'k')\n\t\t\t\tp.data = p.data.slice(0, 32);\n\n\t\t\tif (p.name !== 'curve' && algInfo.normalize !== false) {\n\t\t\t\tvar nd;\n\t\t\t\tif (key.type === 'ed25519') {\n\t\t\t\t\tnd = utils.zeroPadToLength(p.data, 32);\n\t\t\t\t} else {\n\t\t\t\t\tnd = utils.mpNormalize(p.data);\n\t\t\t\t}\n\t\t\t\tif (nd.toString('binary') !==\n\t\t\t\t    p.data.toString('binary')) {\n\t\t\t\t\tp.data = nd;\n\t\t\t\t\tnormalized = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (normalized)\n\t\t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n\t\tif (partial && typeof (partial) === 'object') {\n\t\t\tpartial.remainder = sshbuf.remainder();\n\t\t\tpartial.consumed = sshbuf._offset;\n\t\t}\n\n\t\treturn (new Constructor(key));\n\t}\n\n\tfunction write(key, options) {\n\t\tassert.object(key);\n\n\t\tvar alg = keyTypeToAlg(key);\n\t\tvar i;\n\n\t\tvar algInfo = algs.info[key.type];\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\talgInfo = algs.privInfo[key.type];\n\t\tvar parts = algInfo.parts;\n\n\t\tvar buf = new SSHBuffer({});\n\n\t\tbuf.writeString(alg);\n\n\t\tfor (i = 0; i < parts.length; ++i) {\n\t\t\tvar data = key.part[parts[i]].data;\n\t\t\tif (algInfo.normalize !== false) {\n\t\t\t\tif (key.type === 'ed25519')\n\t\t\t\t\tdata = utils.zeroPadToLength(data, 32);\n\t\t\t\telse\n\t\t\t\t\tdata = utils.mpNormalize(data);\n\t\t\t}\n\t\t\tif (key.type === 'ed25519' && parts[i] === 'k')\n\t\t\t\tdata = Buffer.concat([data, key.part.A.data]);\n\t\t\tbuf.writeBuffer(data);\n\t\t}\n\n\t\treturn (buf.toBuffer());\n\t}\n\treturn rfc4253;\n}\n\nexport { requireRfc4253 as __require };","start":1667202706786,"end":1667202707660,"order":"normal"},{"name":"node-polyfills","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/algs.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/ssh-buffer.js?commonjs-wrapped\";\n\nvar rfc4253;\nvar hasRequiredRfc4253;\n\nfunction requireRfc4253 () {\n\tif (hasRequiredRfc4253) return rfc4253;\n\thasRequiredRfc4253 = 1;\n\t// Copyright 2015 Joyent, Inc.\n\n\trfc4253 = {\n\t\tread: read.bind(undefined, false, undefined),\n\t\treadType: read.bind(undefined, false),\n\t\twrite: write,\n\t\t/* semi-private api, used by sshpk-agent */\n\t\treadPartial: read.bind(undefined, true),\n\n\t\t/* shared with ssh format */\n\t\treadInternal: read,\n\t\tkeyTypeToAlg: keyTypeToAlg,\n\t\talgToKeyType: algToKeyType\n\t};\n\n\tvar assert = require$$0();\n\tvar Buffer = require$$1().Buffer;\n\tvar algs = require$$2();\n\tvar utils = require$$3();\n\tvar Key = require$$4();\n\tvar PrivateKey = require$$5();\n\tvar SSHBuffer = require$$6();\n\n\tfunction algToKeyType(alg) {\n\t\tassert.string(alg);\n\t\tif (alg === 'ssh-dss')\n\t\t\treturn ('dsa');\n\t\telse if (alg === 'ssh-rsa')\n\t\t\treturn ('rsa');\n\t\telse if (alg === 'ssh-ed25519')\n\t\t\treturn ('ed25519');\n\t\telse if (alg === 'ssh-curve25519')\n\t\t\treturn ('curve25519');\n\t\telse if (alg.match(/^ecdsa-sha2-/))\n\t\t\treturn ('ecdsa');\n\t\telse\n\t\t\tthrow (new Error('Unknown algorithm ' + alg));\n\t}\n\n\tfunction keyTypeToAlg(key) {\n\t\tassert.object(key);\n\t\tif (key.type === 'dsa')\n\t\t\treturn ('ssh-dss');\n\t\telse if (key.type === 'rsa')\n\t\t\treturn ('ssh-rsa');\n\t\telse if (key.type === 'ed25519')\n\t\t\treturn ('ssh-ed25519');\n\t\telse if (key.type === 'curve25519')\n\t\t\treturn ('ssh-curve25519');\n\t\telse if (key.type === 'ecdsa')\n\t\t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n\t\telse\n\t\t\tthrow (new Error('Unknown key type ' + key.type));\n\t}\n\n\tfunction read(partial, type, buf, options) {\n\t\tif (typeof (buf) === 'string')\n\t\t\tbuf = Buffer.from(buf);\n\t\tassert.buffer(buf, 'buf');\n\n\t\tvar key = {};\n\n\t\tvar parts = key.parts = [];\n\t\tvar sshbuf = new SSHBuffer({buffer: buf});\n\n\t\tvar alg = sshbuf.readString();\n\t\tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n\t\tkey.type = algToKeyType(alg);\n\n\t\tvar partCount = algs.info[key.type].parts.length;\n\t\tif (type && type === 'private')\n\t\t\tpartCount = algs.privInfo[key.type].parts.length;\n\n\t\twhile (!sshbuf.atEnd() && parts.length < partCount)\n\t\t\tparts.push(sshbuf.readPart());\n\t\twhile (!partial && !sshbuf.atEnd())\n\t\t\tparts.push(sshbuf.readPart());\n\n\t\tassert.ok(parts.length >= 1,\n\t\t    'key must have at least one part');\n\t\tassert.ok(partial || sshbuf.atEnd(),\n\t\t    'leftover bytes at end of key');\n\n\t\tvar Constructor = Key;\n\t\tvar algInfo = algs.info[key.type];\n\t\tif (type === 'private' || algInfo.parts.length !== parts.length) {\n\t\t\talgInfo = algs.privInfo[key.type];\n\t\t\tConstructor = PrivateKey;\n\t\t}\n\t\tassert.strictEqual(algInfo.parts.length, parts.length);\n\n\t\tif (key.type === 'ecdsa') {\n\t\t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n\t\t\tassert.ok(res !== null);\n\t\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t\t}\n\n\t\tvar normalized = true;\n\t\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\t\tvar p = parts[i];\n\t\t\tp.name = algInfo.parts[i];\n\t\t\t/*\n\t\t\t * OpenSSH stores ed25519 \"private\" keys as seed + public key\n\t\t\t * concat'd together (k followed by A). We want to keep them\n\t\t\t * separate for other formats that don't do this.\n\t\t\t */\n\t\t\tif (key.type === 'ed25519' && p.name === 'k')\n\t\t\t\tp.data = p.data.slice(0, 32);\n\n\t\t\tif (p.name !== 'curve' && algInfo.normalize !== false) {\n\t\t\t\tvar nd;\n\t\t\t\tif (key.type === 'ed25519') {\n\t\t\t\t\tnd = utils.zeroPadToLength(p.data, 32);\n\t\t\t\t} else {\n\t\t\t\t\tnd = utils.mpNormalize(p.data);\n\t\t\t\t}\n\t\t\t\tif (nd.toString('binary') !==\n\t\t\t\t    p.data.toString('binary')) {\n\t\t\t\t\tp.data = nd;\n\t\t\t\t\tnormalized = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (normalized)\n\t\t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n\t\tif (partial && typeof (partial) === 'object') {\n\t\t\tpartial.remainder = sshbuf.remainder();\n\t\t\tpartial.consumed = sshbuf._offset;\n\t\t}\n\n\t\treturn (new Constructor(key));\n\t}\n\n\tfunction write(key, options) {\n\t\tassert.object(key);\n\n\t\tvar alg = keyTypeToAlg(key);\n\t\tvar i;\n\n\t\tvar algInfo = algs.info[key.type];\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\talgInfo = algs.privInfo[key.type];\n\t\tvar parts = algInfo.parts;\n\n\t\tvar buf = new SSHBuffer({});\n\n\t\tbuf.writeString(alg);\n\n\t\tfor (i = 0; i < parts.length; ++i) {\n\t\t\tvar data = key.part[parts[i]].data;\n\t\t\tif (algInfo.normalize !== false) {\n\t\t\t\tif (key.type === 'ed25519')\n\t\t\t\t\tdata = utils.zeroPadToLength(data, 32);\n\t\t\t\telse\n\t\t\t\t\tdata = utils.mpNormalize(data);\n\t\t\t}\n\t\t\tif (key.type === 'ed25519' && parts[i] === 'k')\n\t\t\t\tdata = Buffer.concat([data, key.part.A.data]);\n\t\t\tbuf.writeBuffer(data);\n\t\t}\n\n\t\treturn (buf.toBuffer());\n\t}\n\treturn rfc4253;\n}\n\nexport { requireRfc4253 as __require };","start":1667202707692,"end":1667202707709,"order":"normal"}]}
