{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/lib/redirect.js","transforms":[{"name":"vite:load-fallback","result":"'use strict'\n\nvar url = require('url')\nvar isUrl = /^https?:/\n\nfunction Redirect (request) {\n  this.request = request\n  this.followRedirect = true\n  this.followRedirects = true\n  this.followAllRedirects = false\n  this.followOriginalHttpMethod = false\n  this.allowRedirect = function () { return true }\n  this.maxRedirects = 10\n  this.redirects = []\n  this.redirectsFollowed = 0\n  this.removeRefererHeader = false\n}\n\nRedirect.prototype.onRequest = function (options) {\n  var self = this\n\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || []\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader\n  }\n  if (options.followOriginalHttpMethod !== undefined) {\n    self.followOriginalHttpMethod = options.followOriginalHttpMethod\n  }\n}\n\nRedirect.prototype.redirectTo = function (response) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = null\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location')\n    request.debug('redirect', location)\n\n    if (self.followAllRedirects) {\n      redirectTo = location\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break\n        default:\n          redirectTo = location\n          break\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response)\n    if (authHeader) {\n      request.setHeader('authorization', authHeader)\n      redirectTo = request.uri\n    }\n  }\n  return redirectTo\n}\n\nRedirect.prototype.onResponse = function (response) {\n  var self = this\n  var request = self.request\n\n  var redirectTo = self.redirectTo(response)\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false\n  }\n\n  request.debug('redirect to', redirectTo)\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume()\n  }\n\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n    return false\n  }\n  self.redirectsFollowed += 1\n\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = url.resolve(request.uri.href, redirectTo)\n  }\n\n  var uriPrev = request.uri\n  request.uri = url.parse(redirectTo)\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent\n  }\n\n  self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo })\n\n  if (self.followAllRedirects && request.method !== 'HEAD' &&\n    response.statusCode !== 401 && response.statusCode !== 307) {\n    request.method = self.followOriginalHttpMethod ? request.method : 'GET'\n  }\n  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n  delete request.src\n  delete request.req\n  delete request._started\n  if (response.statusCode !== 401 && response.statusCode !== 307) {\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body\n    delete request._form\n    if (request.headers) {\n      request.removeHeader('host')\n      request.removeHeader('content-type')\n      request.removeHeader('content-length')\n      if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n        // Remove authorization if changing hostnames (but not if just\n        // changing ports or protocols).  This matches the behavior of curl:\n        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n        request.removeHeader('authorization')\n      }\n    }\n  }\n\n  if (!self.removeRefererHeader) {\n    request.setHeader('referer', uriPrev.href)\n  }\n\n  request.emit('redirect')\n\n  request.init()\n\n  return true\n}\n\nexports.Redirect = Redirect\n","start":1667202704717,"end":1667202704970},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as redirect } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/lib/redirect.js?commonjs-exports\"\nimport require$$0 from \"\\u0000__vite-browser-external?commonjs-proxy\";\n\nvar hasRequiredRedirect;\n\nfunction requireRedirect () {\n\tif (hasRequiredRedirect) return redirect;\n\thasRequiredRedirect = 1;\n\t'use strict'\n\n\tvar url = require$$0\n\tvar isUrl = /^https?:/\n\n\tfunction Redirect (request) {\n\t  this.request = request\n\t  this.followRedirect = true\n\t  this.followRedirects = true\n\t  this.followAllRedirects = false\n\t  this.followOriginalHttpMethod = false\n\t  this.allowRedirect = function () { return true }\n\t  this.maxRedirects = 10\n\t  this.redirects = []\n\t  this.redirectsFollowed = 0\n\t  this.removeRefererHeader = false\n\t}\n\n\tRedirect.prototype.onRequest = function (options) {\n\t  var self = this\n\n\t  if (options.maxRedirects !== undefined) {\n\t    self.maxRedirects = options.maxRedirects\n\t  }\n\t  if (typeof options.followRedirect === 'function') {\n\t    self.allowRedirect = options.followRedirect\n\t  }\n\t  if (options.followRedirect !== undefined) {\n\t    self.followRedirects = !!options.followRedirect\n\t  }\n\t  if (options.followAllRedirects !== undefined) {\n\t    self.followAllRedirects = options.followAllRedirects\n\t  }\n\t  if (self.followRedirects || self.followAllRedirects) {\n\t    self.redirects = self.redirects || []\n\t  }\n\t  if (options.removeRefererHeader !== undefined) {\n\t    self.removeRefererHeader = options.removeRefererHeader\n\t  }\n\t  if (options.followOriginalHttpMethod !== undefined) {\n\t    self.followOriginalHttpMethod = options.followOriginalHttpMethod\n\t  }\n\t}\n\n\tRedirect.prototype.redirectTo = function (response) {\n\t  var self = this\n\t  var request = self.request\n\n\t  var redirectTo = null\n\t  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n\t    var location = response.caseless.get('location')\n\t    request.debug('redirect', location)\n\n\t    if (self.followAllRedirects) {\n\t      redirectTo = location\n\t    } else if (self.followRedirects) {\n\t      switch (request.method) {\n\t        case 'PATCH':\n\t        case 'PUT':\n\t        case 'POST':\n\t        case 'DELETE':\n\t          // Do not follow redirects\n\t          break\n\t        default:\n\t          redirectTo = location\n\t          break\n\t      }\n\t    }\n\t  } else if (response.statusCode === 401) {\n\t    var authHeader = request._auth.onResponse(response)\n\t    if (authHeader) {\n\t      request.setHeader('authorization', authHeader)\n\t      redirectTo = request.uri\n\t    }\n\t  }\n\t  return redirectTo\n\t}\n\n\tRedirect.prototype.onResponse = function (response) {\n\t  var self = this\n\t  var request = self.request\n\n\t  var redirectTo = self.redirectTo(response)\n\t  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n\t    return false\n\t  }\n\n\t  request.debug('redirect to', redirectTo)\n\n\t  // ignore any potential response body.  it cannot possibly be useful\n\t  // to us at this point.\n\t  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n\t  if (response.resume) {\n\t    response.resume()\n\t  }\n\n\t  if (self.redirectsFollowed >= self.maxRedirects) {\n\t    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n\t    return false\n\t  }\n\t  self.redirectsFollowed += 1\n\n\t  if (!isUrl.test(redirectTo)) {\n\t    redirectTo = url.resolve(request.uri.href, redirectTo)\n\t  }\n\n\t  var uriPrev = request.uri\n\t  request.uri = url.parse(redirectTo)\n\n\t  // handle the case where we change protocol from https to http or vice versa\n\t  if (request.uri.protocol !== uriPrev.protocol) {\n\t    delete request.agent\n\t  }\n\n\t  self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo })\n\n\t  if (self.followAllRedirects && request.method !== 'HEAD' &&\n\t    response.statusCode !== 401 && response.statusCode !== 307) {\n\t    request.method = self.followOriginalHttpMethod ? request.method : 'GET'\n\t  }\n\t  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n\t  delete request.src\n\t  delete request.req\n\t  delete request._started\n\t  if (response.statusCode !== 401 && response.statusCode !== 307) {\n\t    // Remove parameters from the previous response, unless this is the second request\n\t    // for a server that requires digest authentication.\n\t    delete request.body\n\t    delete request._form\n\t    if (request.headers) {\n\t      request.removeHeader('host')\n\t      request.removeHeader('content-type')\n\t      request.removeHeader('content-length')\n\t      if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n\t        // Remove authorization if changing hostnames (but not if just\n\t        // changing ports or protocols).  This matches the behavior of curl:\n\t        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n\t        request.removeHeader('authorization')\n\t      }\n\t    }\n\t  }\n\n\t  if (!self.removeRefererHeader) {\n\t    request.setHeader('referer', uriPrev.href)\n\t  }\n\n\t  request.emit('redirect')\n\n\t  request.init()\n\n\t  return true\n\t}\n\n\tredirect.Redirect = Redirect\n\treturn redirect;\n}\n\nexport { requireRedirect as __require };","start":1667202704970,"end":1667202704975,"order":"normal"}]}
