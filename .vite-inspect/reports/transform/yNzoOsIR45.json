{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/vuetify/lib/components/VTooltip/VTooltip.mjs","transforms":[{"name":"vite:load-fallback","result":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\n// Styles\nimport \"./VTooltip.css\"; // Components\n\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\n\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { computed, ref } from 'vue';\nimport { genericComponent, getUid, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VTooltip = genericComponent()({\n  name: 'VTooltip',\n  inheritAttrs: false,\n  props: {\n    id: String,\n    modelValue: Boolean,\n    text: String,\n    location: {\n      type: String,\n      default: 'end'\n    },\n    origin: {\n      type: String,\n      default: 'auto'\n    },\n    ...makeTransitionProps({\n      transition: false\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const uid = getUid();\n    const id = computed(() => props.id || `v-tooltip-${uid}`);\n    const overlay = ref();\n    const location = computed(() => {\n      return props.location.split(' ').length > 1 ? props.location : props.location + ' center';\n    });\n    const origin = computed(() => {\n      return props.origin === 'auto' || props.origin === 'overlap' || props.origin.split(' ').length > 1 || props.location.split(' ').length > 1 ? props.origin : props.origin + ' center';\n    });\n    const transition = computed(() => {\n      if (props.transition) return props.transition;\n      return isActive.value ? 'scale-transition' : 'fade-transition';\n    });\n    useRender(() => _createVNode(VOverlay, _mergeProps({\n      \"modelValue\": isActive.value,\n      \"onUpdate:modelValue\": $event => isActive.value = $event,\n      \"ref\": overlay,\n      \"class\": ['v-tooltip'],\n      \"id\": id.value,\n      \"transition\": transition.value,\n      \"absolute\": true,\n      \"locationStrategy\": \"connected\",\n      \"scrollStrategy\": \"reposition\",\n      \"location\": location.value,\n      \"origin\": origin.value,\n      \"min-width\": 0,\n      \"offset\": 10,\n      \"scrim\": false,\n      \"persistent\": true,\n      \"open-on-click\": false,\n      \"open-on-hover\": true,\n      \"close-on-back\": false,\n      \"role\": \"tooltip\",\n      \"eager\": true,\n      \"activatorProps\": {\n        'aria-describedby': id.value\n      }\n    }, scopeId, attrs), {\n      activator: slots.activator,\n      default: function () {\n        var _slots$default;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return ((_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, ...args)) ?? props.text;\n      }\n    }));\n    return forwardRefs({}, overlay);\n  }\n\n});\n//# sourceMappingURL=VTooltip.mjs.map","start":1667202703369,"end":1667202703592}]}
