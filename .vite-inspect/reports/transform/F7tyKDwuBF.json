{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/http-signature/lib/verify.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2015 Joyent, Inc.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar sshpk = require('sshpk');\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n      pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n      return (false);\n\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return (v.verify(parsedSignature.params.signature, 'base64'));\n  },\n\n  /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac')\n      return (false);\n\n    var hashAlg = alg[1].toUpperCase();\n\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n\n    /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n\n    /* Node 0.8 returns strings from .digest(). */\n    if (typeof (h1) === 'string')\n      return (h1 === h2);\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n    if (Buffer.isBuffer(h1) && !h1.equals)\n      return (h1.toString('binary') === h2.toString('binary'));\n\n    return (h1.equals(h2));\n  }\n};\n","start":1667202705123,"end":1667202705285},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/index.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/http-signature/lib/utils.js?commonjs-wrapped\";\n\nvar verify;\nvar hasRequiredVerify;\n\nfunction requireVerify () {\n\tif (hasRequiredVerify) return verify;\n\thasRequiredVerify = 1;\n\t// Copyright 2015 Joyent, Inc.\n\n\tvar assert = require$$0();\n\tvar crypto = require$$1;\n\tvar sshpk = require$$2();\n\tvar utils = require$$3();\n\n\tvar HASH_ALGOS = utils.HASH_ALGOS;\n\tvar PK_ALGOS = utils.PK_ALGOS;\n\tvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\n\tvar HttpSignatureError = utils.HttpSignatureError;\n\tvar validateAlgorithm = utils.validateAlgorithm;\n\n\t///--- Exported API\n\n\tverify = {\n\t  /**\n\t   * Verify RSA/DSA signature against public key.  You are expected to pass in\n\t   * an object that was returned from `parse()`.\n\t   *\n\t   * @param {Object} parsedSignature the object you got from `parse`.\n\t   * @param {String} pubkey RSA/DSA private key PEM.\n\t   * @return {Boolean} true if valid, false otherwise.\n\t   * @throws {TypeError} if you pass in bad arguments.\n\t   * @throws {InvalidAlgorithmError}\n\t   */\n\t  verifySignature: function verifySignature(parsedSignature, pubkey) {\n\t    assert.object(parsedSignature, 'parsedSignature');\n\t    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n\t      pubkey = sshpk.parseKey(pubkey);\n\t    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n\t    var alg = validateAlgorithm(parsedSignature.algorithm);\n\t    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n\t      return (false);\n\n\t    var v = pubkey.createVerify(alg[1]);\n\t    v.update(parsedSignature.signingString);\n\t    return (v.verify(parsedSignature.params.signature, 'base64'));\n\t  },\n\n\t  /**\n\t   * Verify HMAC against shared secret.  You are expected to pass in an object\n\t   * that was returned from `parse()`.\n\t   *\n\t   * @param {Object} parsedSignature the object you got from `parse`.\n\t   * @param {String} secret HMAC shared secret.\n\t   * @return {Boolean} true if valid, false otherwise.\n\t   * @throws {TypeError} if you pass in bad arguments.\n\t   * @throws {InvalidAlgorithmError}\n\t   */\n\t  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n\t    assert.object(parsedSignature, 'parsedHMAC');\n\t    assert.string(secret, 'secret');\n\n\t    var alg = validateAlgorithm(parsedSignature.algorithm);\n\t    if (alg[0] !== 'hmac')\n\t      return (false);\n\n\t    var hashAlg = alg[1].toUpperCase();\n\n\t    var hmac = crypto.createHmac(hashAlg, secret);\n\t    hmac.update(parsedSignature.signingString);\n\n\t    /*\n\t     * Now double-hash to avoid leaking timing information - there's\n\t     * no easy constant-time compare in JS, so we use this approach\n\t     * instead. See for more info:\n\t     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n\t     * verification.aspx\n\t     */\n\t    var h1 = crypto.createHmac(hashAlg, secret);\n\t    h1.update(hmac.digest());\n\t    h1 = h1.digest();\n\t    var h2 = crypto.createHmac(hashAlg, secret);\n\t    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n\t    h2 = h2.digest();\n\n\t    /* Node 0.8 returns strings from .digest(). */\n\t    if (typeof (h1) === 'string')\n\t      return (h1 === h2);\n\t    /* And node 0.10 lacks the .equals() method on Buffers. */\n\t    if (Buffer.isBuffer(h1) && !h1.equals)\n\t      return (h1.toString('binary') === h2.toString('binary'));\n\n\t    return (h1.equals(h2));\n\t  }\n\t};\n\treturn verify;\n}\n\nexport { requireVerify as __require };","start":1667202705285,"end":1667202707995,"order":"normal"},{"name":"node-polyfills","result":"import { Buffer as Buffer } from 'buffer';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/index.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/http-signature/lib/utils.js?commonjs-wrapped\";\n\nvar verify;\nvar hasRequiredVerify;\n\nfunction requireVerify () {\n\tif (hasRequiredVerify) return verify;\n\thasRequiredVerify = 1;\n\t// Copyright 2015 Joyent, Inc.\n\n\tvar assert = require$$0();\n\tvar crypto = require$$1;\n\tvar sshpk = require$$2();\n\tvar utils = require$$3();\n\n\tvar HASH_ALGOS = utils.HASH_ALGOS;\n\tvar PK_ALGOS = utils.PK_ALGOS;\n\tvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\n\tvar HttpSignatureError = utils.HttpSignatureError;\n\tvar validateAlgorithm = utils.validateAlgorithm;\n\n\t///--- Exported API\n\n\tverify = {\n\t  /**\n\t   * Verify RSA/DSA signature against public key.  You are expected to pass in\n\t   * an object that was returned from `parse()`.\n\t   *\n\t   * @param {Object} parsedSignature the object you got from `parse`.\n\t   * @param {String} pubkey RSA/DSA private key PEM.\n\t   * @return {Boolean} true if valid, false otherwise.\n\t   * @throws {TypeError} if you pass in bad arguments.\n\t   * @throws {InvalidAlgorithmError}\n\t   */\n\t  verifySignature: function verifySignature(parsedSignature, pubkey) {\n\t    assert.object(parsedSignature, 'parsedSignature');\n\t    if (typeof (pubkey) === 'string' || Buffer.isBuffer(pubkey))\n\t      pubkey = sshpk.parseKey(pubkey);\n\t    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n\n\t    var alg = validateAlgorithm(parsedSignature.algorithm);\n\t    if (alg[0] === 'hmac' || alg[0] !== pubkey.type)\n\t      return (false);\n\n\t    var v = pubkey.createVerify(alg[1]);\n\t    v.update(parsedSignature.signingString);\n\t    return (v.verify(parsedSignature.params.signature, 'base64'));\n\t  },\n\n\t  /**\n\t   * Verify HMAC against shared secret.  You are expected to pass in an object\n\t   * that was returned from `parse()`.\n\t   *\n\t   * @param {Object} parsedSignature the object you got from `parse`.\n\t   * @param {String} secret HMAC shared secret.\n\t   * @return {Boolean} true if valid, false otherwise.\n\t   * @throws {TypeError} if you pass in bad arguments.\n\t   * @throws {InvalidAlgorithmError}\n\t   */\n\t  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n\t    assert.object(parsedSignature, 'parsedHMAC');\n\t    assert.string(secret, 'secret');\n\n\t    var alg = validateAlgorithm(parsedSignature.algorithm);\n\t    if (alg[0] !== 'hmac')\n\t      return (false);\n\n\t    var hashAlg = alg[1].toUpperCase();\n\n\t    var hmac = crypto.createHmac(hashAlg, secret);\n\t    hmac.update(parsedSignature.signingString);\n\n\t    /*\n\t     * Now double-hash to avoid leaking timing information - there's\n\t     * no easy constant-time compare in JS, so we use this approach\n\t     * instead. See for more info:\n\t     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n\t     * verification.aspx\n\t     */\n\t    var h1 = crypto.createHmac(hashAlg, secret);\n\t    h1.update(hmac.digest());\n\t    h1 = h1.digest();\n\t    var h2 = crypto.createHmac(hashAlg, secret);\n\t    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n\t    h2 = h2.digest();\n\n\t    /* Node 0.8 returns strings from .digest(). */\n\t    if (typeof (h1) === 'string')\n\t      return (h1 === h2);\n\t    /* And node 0.10 lacks the .equals() method on Buffers. */\n\t    if (Buffer.isBuffer(h1) && !h1.equals)\n\t      return (h1.toString('binary') === h2.toString('binary'));\n\n\t    return (h1.equals(h2));\n\t  }\n\t};\n\treturn verify;\n}\n\nexport { requireVerify as __require };","start":1667202708003,"end":1667202708004,"order":"normal"}]}
