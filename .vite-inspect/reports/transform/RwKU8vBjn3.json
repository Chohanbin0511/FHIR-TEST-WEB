{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/Base64/base64.js","transforms":[{"name":"vite:load-fallback","result":";(function () {\n\n  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  function InvalidCharacterError(message) {\n    this.message = message;\n  }\n  InvalidCharacterError.prototype = new Error;\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  // encoder\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\n  object.btoa || (\n  object.btoa = function (input) {\n    var str = String(input);\n    for (\n      // initialize result and counter\n      var block, charCode, idx = 0, map = chars, output = '';\n      // if the next str index does not exist:\n      //   change the mapping table to \"=\"\n      //   check if d has no fractional digits\n      str.charAt(idx | 0) || (map = '=', idx % 1);\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n    ) {\n      charCode = str.charCodeAt(idx += 3/4);\n      if (charCode > 0xFF) {\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n      }\n      block = block << 8 | charCode;\n    }\n    return output;\n  });\n\n  // decoder\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\n  object.atob || (\n  object.atob = function (input) {\n    var str = String(input).replace(/=+$/, '');\n    if (str.length % 4 == 1) {\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n    for (\n      // initialize result and counters\n      var bc = 0, bs, buffer, idx = 0, output = '';\n      // get next character\n      buffer = str.charAt(idx++);\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  });\n\n}());\n","start":1667202704573,"end":1667202704703},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as base64 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/Base64/base64.js?commonjs-exports\"\n\nvar hasRequiredBase64;\n\nfunction requireBase64 () {\n\tif (hasRequiredBase64) return base64;\n\thasRequiredBase64 = 1;\n\t(function (exports) {\n\t\t;(function () {\n\n\t\t  var object = 'object' != 'undefined' ? exports : this; // #8: web workers\n\t\t  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n\t\t  function InvalidCharacterError(message) {\n\t\t    this.message = message;\n\t\t  }\n\t\t  InvalidCharacterError.prototype = new Error;\n\t\t  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n\t\t  // encoder\n\t\t  // [https://gist.github.com/999166] by [https://github.com/nignag]\n\t\t  object.btoa || (\n\t\t  object.btoa = function (input) {\n\t\t    var str = String(input);\n\t\t    for (\n\t\t      // initialize result and counter\n\t\t      var block, charCode, idx = 0, map = chars, output = '';\n\t\t      // if the next str index does not exist:\n\t\t      //   change the mapping table to \"=\"\n\t\t      //   check if d has no fractional digits\n\t\t      str.charAt(idx | 0) || (map = '=', idx % 1);\n\t\t      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n\t\t      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n\t\t    ) {\n\t\t      charCode = str.charCodeAt(idx += 3/4);\n\t\t      if (charCode > 0xFF) {\n\t\t        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\n\t\t      }\n\t\t      block = block << 8 | charCode;\n\t\t    }\n\t\t    return output;\n\t\t  });\n\n\t\t  // decoder\n\t\t  // [https://gist.github.com/1020396] by [https://github.com/atk]\n\t\t  object.atob || (\n\t\t  object.atob = function (input) {\n\t\t    var str = String(input).replace(/=+$/, '');\n\t\t    if (str.length % 4 == 1) {\n\t\t      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n\t\t    }\n\t\t    for (\n\t\t      // initialize result and counters\n\t\t      var bc = 0, bs, buffer, idx = 0, output = '';\n\t\t      // get next character\n\t\t      buffer = str.charAt(idx++);\n\t\t      // character found in table? initialize bit storage and add its ascii value;\n\t\t      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n\t\t        // and if not first of each 4 characters,\n\t\t        // convert the first 8 bits to one ascii character\n\t\t        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n\t\t    ) {\n\t\t      // try to find character in table (0-63, not found => -1)\n\t\t      buffer = chars.indexOf(buffer);\n\t\t    }\n\t\t    return output;\n\t\t  });\n\n\t\t}());\n} (base64));\n\treturn base64;\n}\n\nexport { requireBase64 as __require };","start":1667202704704,"end":1667202704705,"order":"normal"}]}
