{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/vuetify/lib/components/VDialog/VDialog.mjs","transforms":[{"name":"vite:load-fallback","result":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VDialog.css\"; // Components\n\nimport { VDialogTransition } from \"../transitions/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\"; // Composables\n\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\"; // Utilities\n\nimport { nextTick, ref, watch } from 'vue';\nimport { genericComponent, IN_BROWSER, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VDialog = genericComponent()({\n  name: 'VDialog',\n  inheritAttrs: false,\n  props: {\n    fullscreen: Boolean,\n    origin: {\n      type: String,\n      default: 'center center'\n    },\n    retainFocus: {\n      type: Boolean,\n      default: true\n    },\n    scrollable: Boolean,\n    modelValue: Boolean,\n    ...makeTransitionProps({\n      transition: {\n        component: VDialogTransition\n      }\n    })\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const overlay = ref();\n\n    function onFocusin(e) {\n      var _overlay$value, _overlay$value2;\n\n      const before = e.relatedTarget;\n      const after = e.target;\n\n      if (before !== after && (_overlay$value = overlay.value) != null && _overlay$value.contentEl && // We're the topmost dialog\n      (_overlay$value2 = overlay.value) != null && _overlay$value2.globalTop && // It isn't the document or the dialog body\n      ![document, overlay.value.contentEl].includes(after) && // It isn't inside the dialog body\n      !overlay.value.contentEl.contains(after)) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll('button, [href], input:not([type=\"hidden\"]), select, textarea, [tabindex]:not([tabindex=\"-1\"])')].filter(el => !el.hasAttribute('disabled') && !el.matches('[tabindex=\"-1\"]'));\n        if (!focusable.length) return;\n        const firstElement = focusable[0];\n        const lastElement = focusable[focusable.length - 1];\n\n        if (before === firstElement) {\n          lastElement.focus();\n        } else {\n          firstElement.focus();\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val ? document.addEventListener('focusin', onFocusin) : document.removeEventListener('focusin', onFocusin);\n      }, {\n        immediate: true\n      });\n    }\n\n    watch(isActive, async val => {\n      await nextTick();\n\n      if (val) {\n        var _contentEl;\n\n        (_contentEl = overlay.value.contentEl) == null ? void 0 : _contentEl.focus({\n          preventScroll: true\n        });\n      } else {\n        var _activatorEl;\n\n        (_activatorEl = overlay.value.activatorEl) == null ? void 0 : _activatorEl.focus({\n          preventScroll: true\n        });\n      }\n    });\n    useRender(() => _createVNode(VOverlay, _mergeProps({\n      \"modelValue\": isActive.value,\n      \"onUpdate:modelValue\": $event => isActive.value = $event,\n      \"class\": ['v-dialog', {\n        'v-dialog--fullscreen': props.fullscreen,\n        'v-dialog--scrollable': props.scrollable\n      }],\n      \"transition\": props.transition,\n      \"scrollStrategy\": \"block\",\n      \"ref\": overlay,\n      \"aria-role\": \"dialog\",\n      \"aria-modal\": \"true\",\n      \"activatorProps\": {\n        'aria-haspopup': 'dialog',\n        'aria-expanded': String(isActive.value)\n      },\n      \"z-index\": 2400\n    }, scopeId, attrs), {\n      activator: slots.activator,\n      default: function () {\n        var _slots$default;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _createVNode(VDefaultsProvider, {\n          \"root\": true\n        }, {\n          default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, ...args)]\n        });\n      }\n    }));\n    return forwardRefs({}, overlay);\n  }\n\n});\n//# sourceMappingURL=VDialog.mjs.map","start":1667202703410,"end":1667202703818}]}
