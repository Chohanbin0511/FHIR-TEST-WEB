{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/http-signature/lib/signer.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      key = sshpk.parsePrivateKey(key);\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = sprintf(AUTHZ_FMT,\n          sig.keyId,\n          sig.algorithm,\n          self.rs_headers.join(' '),\n          sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT,\n      this.rs_keyId,\n      alg,\n      this.rs_headers.join(' '),\n      signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n\n    } else {\n      var key = options.key;\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key);\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n\n    request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n","start":1667202705095,"end":1667202705258},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport require$$2 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/index.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/jsprim/lib/jsprim.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/http-signature/lib/utils.js?commonjs-wrapped\";\n\nvar signer;\nvar hasRequiredSigner;\n\nfunction requireSigner () {\n\tif (hasRequiredSigner) return signer;\n\thasRequiredSigner = 1;\n\t// Copyright 2012 Joyent, Inc.  All rights reserved.\n\n\tvar assert = require$$0();\n\tvar crypto = require$$1;\n\tvar http = require$$2;\n\tvar util = require$$3();\n\tvar sshpk = require$$4();\n\tvar jsprim = require$$5();\n\tvar utils = require$$6();\n\n\tvar sprintf = require$$3().format;\n\n\tvar HASH_ALGOS = utils.HASH_ALGOS;\n\tvar PK_ALGOS = utils.PK_ALGOS;\n\tvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\n\tvar HttpSignatureError = utils.HttpSignatureError;\n\tvar validateAlgorithm = utils.validateAlgorithm;\n\n\t///--- Globals\n\n\tvar AUTHZ_FMT =\n\t  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n\t///--- Specific Errors\n\n\tfunction MissingHeaderError(message) {\n\t  HttpSignatureError.call(this, message, MissingHeaderError);\n\t}\n\tutil.inherits(MissingHeaderError, HttpSignatureError);\n\n\tfunction StrictParsingError(message) {\n\t  HttpSignatureError.call(this, message, StrictParsingError);\n\t}\n\tutil.inherits(StrictParsingError, HttpSignatureError);\n\n\t/* See createSigner() */\n\tfunction RequestSigner(options) {\n\t  assert.object(options, 'options');\n\n\t  var alg = [];\n\t  if (options.algorithm !== undefined) {\n\t    assert.string(options.algorithm, 'options.algorithm');\n\t    alg = validateAlgorithm(options.algorithm);\n\t  }\n\t  this.rs_alg = alg;\n\n\t  /*\n\t   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n\t   * with an rs_signer.\n\t   *\n\t   * rs_signFunc-based RequestSigners have to build up their entire signing\n\t   * string within the rs_lines array and give it to rs_signFunc as a single\n\t   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n\t   * their signing state by using rs_signer.update(), thus only needing to\n\t   * buffer the hash function state and one line at a time.\n\t   */\n\t  if (options.sign !== undefined) {\n\t    assert.func(options.sign, 'options.sign');\n\t    this.rs_signFunc = options.sign;\n\n\t  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n\t    assert.string(options.keyId, 'options.keyId');\n\t    this.rs_keyId = options.keyId;\n\n\t    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n\t      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n\t    /*\n\t     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n\t     * data in chunks rather than requiring it all to be given in one go\n\t     * at the end, so they are more similar to signers than signFuncs.\n\t     */\n\t    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n\t    this.rs_signer.sign = function () {\n\t      var digest = this.digest('base64');\n\t      return ({\n\t        hashAlgorithm: alg[1],\n\t        toString: function () { return (digest); }\n\t      });\n\t    };\n\n\t  } else if (options.key !== undefined) {\n\t    var key = options.key;\n\t    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n\t      key = sshpk.parsePrivateKey(key);\n\n\t    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n\t      'options.key must be a sshpk.PrivateKey');\n\t    this.rs_key = key;\n\n\t    assert.string(options.keyId, 'options.keyId');\n\t    this.rs_keyId = options.keyId;\n\n\t    if (!PK_ALGOS[key.type]) {\n\t      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n\t        'keys are not supported'));\n\t    }\n\n\t    if (alg[0] !== undefined && key.type !== alg[0]) {\n\t      throw (new InvalidAlgorithmError('options.key must be a ' +\n\t        alg[0].toUpperCase() + ' key, was given a ' +\n\t        key.type.toUpperCase() + ' key instead'));\n\t    }\n\n\t    this.rs_signer = key.createSign(alg[1]);\n\n\t  } else {\n\t    throw (new TypeError('options.sign (func) or options.key is required'));\n\t  }\n\n\t  this.rs_headers = [];\n\t  this.rs_lines = [];\n\t}\n\n\t/**\n\t * Adds a header to be signed, with its value, into this signer.\n\t *\n\t * @param {String} header\n\t * @param {String} value\n\t * @return {String} value written\n\t */\n\tRequestSigner.prototype.writeHeader = function (header, value) {\n\t  assert.string(header, 'header');\n\t  header = header.toLowerCase();\n\t  assert.string(value, 'value');\n\n\t  this.rs_headers.push(header);\n\n\t  if (this.rs_signFunc) {\n\t    this.rs_lines.push(header + ': ' + value);\n\n\t  } else {\n\t    var line = header + ': ' + value;\n\t    if (this.rs_headers.length > 0)\n\t      line = '\\n' + line;\n\t    this.rs_signer.update(line);\n\t  }\n\n\t  return (value);\n\t};\n\n\t/**\n\t * Adds a default Date header, returning its value.\n\t *\n\t * @return {String}\n\t */\n\tRequestSigner.prototype.writeDateHeader = function () {\n\t  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n\t};\n\n\t/**\n\t * Adds the request target line to be signed.\n\t *\n\t * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n\t * @param {String} path\n\t */\n\tRequestSigner.prototype.writeTarget = function (method, path) {\n\t  assert.string(method, 'method');\n\t  assert.string(path, 'path');\n\t  method = method.toLowerCase();\n\t  this.writeHeader('(request-target)', method + ' ' + path);\n\t};\n\n\t/**\n\t * Calculate the value for the Authorization header on this request\n\t * asynchronously.\n\t *\n\t * @param {Func} callback (err, authz)\n\t */\n\tRequestSigner.prototype.sign = function (cb) {\n\t  assert.func(cb, 'callback');\n\n\t  if (this.rs_headers.length < 1)\n\t    throw (new Error('At least one header must be signed'));\n\n\t  var alg, authz;\n\t  if (this.rs_signFunc) {\n\t    var data = this.rs_lines.join('\\n');\n\t    var self = this;\n\t    this.rs_signFunc(data, function (err, sig) {\n\t      if (err) {\n\t        cb(err);\n\t        return;\n\t      }\n\t      try {\n\t        assert.object(sig, 'signature');\n\t        assert.string(sig.keyId, 'signature.keyId');\n\t        assert.string(sig.algorithm, 'signature.algorithm');\n\t        assert.string(sig.signature, 'signature.signature');\n\t        alg = validateAlgorithm(sig.algorithm);\n\n\t        authz = sprintf(AUTHZ_FMT,\n\t          sig.keyId,\n\t          sig.algorithm,\n\t          self.rs_headers.join(' '),\n\t          sig.signature);\n\t      } catch (e) {\n\t        cb(e);\n\t        return;\n\t      }\n\t      cb(null, authz);\n\t    });\n\n\t  } else {\n\t    try {\n\t      var sigObj = this.rs_signer.sign();\n\t    } catch (e) {\n\t      cb(e);\n\t      return;\n\t    }\n\t    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n\t    var signature = sigObj.toString();\n\t    authz = sprintf(AUTHZ_FMT,\n\t      this.rs_keyId,\n\t      alg,\n\t      this.rs_headers.join(' '),\n\t      signature);\n\t    cb(null, authz);\n\t  }\n\t};\n\n\t///--- Exported API\n\n\tsigner = {\n\t  /**\n\t   * Identifies whether a given object is a request signer or not.\n\t   *\n\t   * @param {Object} object, the object to identify\n\t   * @returns {Boolean}\n\t   */\n\t  isSigner: function (obj) {\n\t    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n\t      return (true);\n\t    return (false);\n\t  },\n\n\t  /**\n\t   * Creates a request signer, used to asynchronously build a signature\n\t   * for a request (does not have to be an http.ClientRequest).\n\t   *\n\t   * @param {Object} options, either:\n\t   *                   - {String} keyId\n\t   *                   - {String|Buffer} key\n\t   *                   - {String} algorithm (optional, required for HMAC)\n\t   *                 or:\n\t   *                   - {Func} sign (data, cb)\n\t   * @return {RequestSigner}\n\t   */\n\t  createSigner: function createSigner(options) {\n\t    return (new RequestSigner(options));\n\t  },\n\n\t  /**\n\t   * Adds an 'Authorization' header to an http.ClientRequest object.\n\t   *\n\t   * Note that this API will add a Date header if it's not already set. Any\n\t   * other headers in the options.headers array MUST be present, or this\n\t   * will throw.\n\t   *\n\t   * You shouldn't need to check the return type; it's just there if you want\n\t   * to be pedantic.\n\t   *\n\t   * The optional flag indicates whether parsing should use strict enforcement\n\t   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n\t   * The default is to be loose and support\n\t   * older versions for compatibility.\n\t   *\n\t   * @param {Object} request an instance of http.ClientRequest.\n\t   * @param {Object} options signing parameters object:\n\t   *                   - {String} keyId required.\n\t   *                   - {String} key required (either a PEM or HMAC key).\n\t   *                   - {Array} headers optional; defaults to ['date'].\n\t   *                   - {String} algorithm optional (unless key is HMAC);\n\t   *                              default is the same as the sshpk default\n\t   *                              signing algorithm for the type of key given\n\t   *                   - {String} httpVersion optional; defaults to '1.1'.\n\t   *                   - {Boolean} strict optional; defaults to 'false'.\n\t   * @return {Boolean} true if Authorization (and optionally Date) were added.\n\t   * @throws {TypeError} on bad parameter types (input).\n\t   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n\t   *                                 the given key.\n\t   * @throws {sshpk.KeyParseError} if key was bad.\n\t   * @throws {MissingHeaderError} if a header to be signed was specified but\n\t   *                              was not present.\n\t   */\n\t  signRequest: function signRequest(request, options) {\n\t    assert.object(request, 'request');\n\t    assert.object(options, 'options');\n\t    assert.optionalString(options.algorithm, 'options.algorithm');\n\t    assert.string(options.keyId, 'options.keyId');\n\t    assert.optionalArrayOfString(options.headers, 'options.headers');\n\t    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n\t    if (!request.getHeader('Date'))\n\t      request.setHeader('Date', jsprim.rfc1123(new Date()));\n\t    if (!options.headers)\n\t      options.headers = ['date'];\n\t    if (!options.httpVersion)\n\t      options.httpVersion = '1.1';\n\n\t    var alg = [];\n\t    if (options.algorithm) {\n\t      options.algorithm = options.algorithm.toLowerCase();\n\t      alg = validateAlgorithm(options.algorithm);\n\t    }\n\n\t    var i;\n\t    var stringToSign = '';\n\t    for (i = 0; i < options.headers.length; i++) {\n\t      if (typeof (options.headers[i]) !== 'string')\n\t        throw new TypeError('options.headers must be an array of Strings');\n\n\t      var h = options.headers[i].toLowerCase();\n\n\t      if (h === 'request-line') {\n\t        if (!options.strict) {\n\t          /**\n\t           * We allow headers from the older spec drafts if strict parsing isn't\n\t           * specified in options.\n\t           */\n\t          stringToSign +=\n\t            request.method + ' ' + request.path + ' HTTP/' +\n\t            options.httpVersion;\n\t        } else {\n\t          /* Strict parsing doesn't allow older draft headers. */\n\t          throw (new StrictParsingError('request-line is not a valid header ' +\n\t            'with strict parsing enabled.'));\n\t        }\n\t      } else if (h === '(request-target)') {\n\t        stringToSign +=\n\t          '(request-target): ' + request.method.toLowerCase() + ' ' +\n\t          request.path;\n\t      } else {\n\t        var value = request.getHeader(h);\n\t        if (value === undefined || value === '') {\n\t          throw new MissingHeaderError(h + ' was not in the request');\n\t        }\n\t        stringToSign += h + ': ' + value;\n\t      }\n\n\t      if ((i + 1) < options.headers.length)\n\t        stringToSign += '\\n';\n\t    }\n\n\t    /* This is just for unit tests. */\n\t    if (request.hasOwnProperty('_stringToSign')) {\n\t      request._stringToSign = stringToSign;\n\t    }\n\n\t    var signature;\n\t    if (alg[0] === 'hmac') {\n\t      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n\t        throw (new TypeError('options.key must be a string or Buffer'));\n\n\t      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n\t      hmac.update(stringToSign);\n\t      signature = hmac.digest('base64');\n\n\t    } else {\n\t      var key = options.key;\n\t      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n\t        key = sshpk.parsePrivateKey(options.key);\n\n\t      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n\t        'options.key must be a sshpk.PrivateKey');\n\n\t      if (!PK_ALGOS[key.type]) {\n\t        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n\t          'keys are not supported'));\n\t      }\n\n\t      if (alg[0] !== undefined && key.type !== alg[0]) {\n\t        throw (new InvalidAlgorithmError('options.key must be a ' +\n\t          alg[0].toUpperCase() + ' key, was given a ' +\n\t          key.type.toUpperCase() + ' key instead'));\n\t      }\n\n\t      var signer = key.createSign(alg[1]);\n\t      signer.update(stringToSign);\n\t      var sigObj = signer.sign();\n\t      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n\t        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n\t          ' is not a supported hash algorithm'));\n\t      }\n\t      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n\t      signature = sigObj.toString();\n\t      assert.notStrictEqual(signature, '', 'empty signature produced');\n\t    }\n\n\t    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n\n\t    request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT,\n\t                                               options.keyId,\n\t                                               options.algorithm,\n\t                                               options.headers.join(' '),\n\t                                               signature));\n\n\t    return true;\n\t  }\n\n\t};\n\treturn signer;\n}\n\nexport { requireSigner as __require };","start":1667202705258,"end":1667202707995,"order":"normal"},{"name":"node-polyfills","result":"import { Buffer as Buffer } from 'buffer';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport require$$2 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/index.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/jsprim/lib/jsprim.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/http-signature/lib/utils.js?commonjs-wrapped\";\n\nvar signer;\nvar hasRequiredSigner;\n\nfunction requireSigner () {\n\tif (hasRequiredSigner) return signer;\n\thasRequiredSigner = 1;\n\t// Copyright 2012 Joyent, Inc.  All rights reserved.\n\n\tvar assert = require$$0();\n\tvar crypto = require$$1;\n\tvar http = require$$2;\n\tvar util = require$$3();\n\tvar sshpk = require$$4();\n\tvar jsprim = require$$5();\n\tvar utils = require$$6();\n\n\tvar sprintf = require$$3().format;\n\n\tvar HASH_ALGOS = utils.HASH_ALGOS;\n\tvar PK_ALGOS = utils.PK_ALGOS;\n\tvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\n\tvar HttpSignatureError = utils.HttpSignatureError;\n\tvar validateAlgorithm = utils.validateAlgorithm;\n\n\t///--- Globals\n\n\tvar AUTHZ_FMT =\n\t  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n\t///--- Specific Errors\n\n\tfunction MissingHeaderError(message) {\n\t  HttpSignatureError.call(this, message, MissingHeaderError);\n\t}\n\tutil.inherits(MissingHeaderError, HttpSignatureError);\n\n\tfunction StrictParsingError(message) {\n\t  HttpSignatureError.call(this, message, StrictParsingError);\n\t}\n\tutil.inherits(StrictParsingError, HttpSignatureError);\n\n\t/* See createSigner() */\n\tfunction RequestSigner(options) {\n\t  assert.object(options, 'options');\n\n\t  var alg = [];\n\t  if (options.algorithm !== undefined) {\n\t    assert.string(options.algorithm, 'options.algorithm');\n\t    alg = validateAlgorithm(options.algorithm);\n\t  }\n\t  this.rs_alg = alg;\n\n\t  /*\n\t   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n\t   * with an rs_signer.\n\t   *\n\t   * rs_signFunc-based RequestSigners have to build up their entire signing\n\t   * string within the rs_lines array and give it to rs_signFunc as a single\n\t   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n\t   * their signing state by using rs_signer.update(), thus only needing to\n\t   * buffer the hash function state and one line at a time.\n\t   */\n\t  if (options.sign !== undefined) {\n\t    assert.func(options.sign, 'options.sign');\n\t    this.rs_signFunc = options.sign;\n\n\t  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n\t    assert.string(options.keyId, 'options.keyId');\n\t    this.rs_keyId = options.keyId;\n\n\t    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n\t      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n\t    /*\n\t     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n\t     * data in chunks rather than requiring it all to be given in one go\n\t     * at the end, so they are more similar to signers than signFuncs.\n\t     */\n\t    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n\t    this.rs_signer.sign = function () {\n\t      var digest = this.digest('base64');\n\t      return ({\n\t        hashAlgorithm: alg[1],\n\t        toString: function () { return (digest); }\n\t      });\n\t    };\n\n\t  } else if (options.key !== undefined) {\n\t    var key = options.key;\n\t    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n\t      key = sshpk.parsePrivateKey(key);\n\n\t    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n\t      'options.key must be a sshpk.PrivateKey');\n\t    this.rs_key = key;\n\n\t    assert.string(options.keyId, 'options.keyId');\n\t    this.rs_keyId = options.keyId;\n\n\t    if (!PK_ALGOS[key.type]) {\n\t      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n\t        'keys are not supported'));\n\t    }\n\n\t    if (alg[0] !== undefined && key.type !== alg[0]) {\n\t      throw (new InvalidAlgorithmError('options.key must be a ' +\n\t        alg[0].toUpperCase() + ' key, was given a ' +\n\t        key.type.toUpperCase() + ' key instead'));\n\t    }\n\n\t    this.rs_signer = key.createSign(alg[1]);\n\n\t  } else {\n\t    throw (new TypeError('options.sign (func) or options.key is required'));\n\t  }\n\n\t  this.rs_headers = [];\n\t  this.rs_lines = [];\n\t}\n\n\t/**\n\t * Adds a header to be signed, with its value, into this signer.\n\t *\n\t * @param {String} header\n\t * @param {String} value\n\t * @return {String} value written\n\t */\n\tRequestSigner.prototype.writeHeader = function (header, value) {\n\t  assert.string(header, 'header');\n\t  header = header.toLowerCase();\n\t  assert.string(value, 'value');\n\n\t  this.rs_headers.push(header);\n\n\t  if (this.rs_signFunc) {\n\t    this.rs_lines.push(header + ': ' + value);\n\n\t  } else {\n\t    var line = header + ': ' + value;\n\t    if (this.rs_headers.length > 0)\n\t      line = '\\n' + line;\n\t    this.rs_signer.update(line);\n\t  }\n\n\t  return (value);\n\t};\n\n\t/**\n\t * Adds a default Date header, returning its value.\n\t *\n\t * @return {String}\n\t */\n\tRequestSigner.prototype.writeDateHeader = function () {\n\t  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n\t};\n\n\t/**\n\t * Adds the request target line to be signed.\n\t *\n\t * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n\t * @param {String} path\n\t */\n\tRequestSigner.prototype.writeTarget = function (method, path) {\n\t  assert.string(method, 'method');\n\t  assert.string(path, 'path');\n\t  method = method.toLowerCase();\n\t  this.writeHeader('(request-target)', method + ' ' + path);\n\t};\n\n\t/**\n\t * Calculate the value for the Authorization header on this request\n\t * asynchronously.\n\t *\n\t * @param {Func} callback (err, authz)\n\t */\n\tRequestSigner.prototype.sign = function (cb) {\n\t  assert.func(cb, 'callback');\n\n\t  if (this.rs_headers.length < 1)\n\t    throw (new Error('At least one header must be signed'));\n\n\t  var alg, authz;\n\t  if (this.rs_signFunc) {\n\t    var data = this.rs_lines.join('\\n');\n\t    var self = this;\n\t    this.rs_signFunc(data, function (err, sig) {\n\t      if (err) {\n\t        cb(err);\n\t        return;\n\t      }\n\t      try {\n\t        assert.object(sig, 'signature');\n\t        assert.string(sig.keyId, 'signature.keyId');\n\t        assert.string(sig.algorithm, 'signature.algorithm');\n\t        assert.string(sig.signature, 'signature.signature');\n\t        alg = validateAlgorithm(sig.algorithm);\n\n\t        authz = sprintf(AUTHZ_FMT,\n\t          sig.keyId,\n\t          sig.algorithm,\n\t          self.rs_headers.join(' '),\n\t          sig.signature);\n\t      } catch (e) {\n\t        cb(e);\n\t        return;\n\t      }\n\t      cb(null, authz);\n\t    });\n\n\t  } else {\n\t    try {\n\t      var sigObj = this.rs_signer.sign();\n\t    } catch (e) {\n\t      cb(e);\n\t      return;\n\t    }\n\t    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n\t    var signature = sigObj.toString();\n\t    authz = sprintf(AUTHZ_FMT,\n\t      this.rs_keyId,\n\t      alg,\n\t      this.rs_headers.join(' '),\n\t      signature);\n\t    cb(null, authz);\n\t  }\n\t};\n\n\t///--- Exported API\n\n\tsigner = {\n\t  /**\n\t   * Identifies whether a given object is a request signer or not.\n\t   *\n\t   * @param {Object} object, the object to identify\n\t   * @returns {Boolean}\n\t   */\n\t  isSigner: function (obj) {\n\t    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n\t      return (true);\n\t    return (false);\n\t  },\n\n\t  /**\n\t   * Creates a request signer, used to asynchronously build a signature\n\t   * for a request (does not have to be an http.ClientRequest).\n\t   *\n\t   * @param {Object} options, either:\n\t   *                   - {String} keyId\n\t   *                   - {String|Buffer} key\n\t   *                   - {String} algorithm (optional, required for HMAC)\n\t   *                 or:\n\t   *                   - {Func} sign (data, cb)\n\t   * @return {RequestSigner}\n\t   */\n\t  createSigner: function createSigner(options) {\n\t    return (new RequestSigner(options));\n\t  },\n\n\t  /**\n\t   * Adds an 'Authorization' header to an http.ClientRequest object.\n\t   *\n\t   * Note that this API will add a Date header if it's not already set. Any\n\t   * other headers in the options.headers array MUST be present, or this\n\t   * will throw.\n\t   *\n\t   * You shouldn't need to check the return type; it's just there if you want\n\t   * to be pedantic.\n\t   *\n\t   * The optional flag indicates whether parsing should use strict enforcement\n\t   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n\t   * The default is to be loose and support\n\t   * older versions for compatibility.\n\t   *\n\t   * @param {Object} request an instance of http.ClientRequest.\n\t   * @param {Object} options signing parameters object:\n\t   *                   - {String} keyId required.\n\t   *                   - {String} key required (either a PEM or HMAC key).\n\t   *                   - {Array} headers optional; defaults to ['date'].\n\t   *                   - {String} algorithm optional (unless key is HMAC);\n\t   *                              default is the same as the sshpk default\n\t   *                              signing algorithm for the type of key given\n\t   *                   - {String} httpVersion optional; defaults to '1.1'.\n\t   *                   - {Boolean} strict optional; defaults to 'false'.\n\t   * @return {Boolean} true if Authorization (and optionally Date) were added.\n\t   * @throws {TypeError} on bad parameter types (input).\n\t   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n\t   *                                 the given key.\n\t   * @throws {sshpk.KeyParseError} if key was bad.\n\t   * @throws {MissingHeaderError} if a header to be signed was specified but\n\t   *                              was not present.\n\t   */\n\t  signRequest: function signRequest(request, options) {\n\t    assert.object(request, 'request');\n\t    assert.object(options, 'options');\n\t    assert.optionalString(options.algorithm, 'options.algorithm');\n\t    assert.string(options.keyId, 'options.keyId');\n\t    assert.optionalArrayOfString(options.headers, 'options.headers');\n\t    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n\t    if (!request.getHeader('Date'))\n\t      request.setHeader('Date', jsprim.rfc1123(new Date()));\n\t    if (!options.headers)\n\t      options.headers = ['date'];\n\t    if (!options.httpVersion)\n\t      options.httpVersion = '1.1';\n\n\t    var alg = [];\n\t    if (options.algorithm) {\n\t      options.algorithm = options.algorithm.toLowerCase();\n\t      alg = validateAlgorithm(options.algorithm);\n\t    }\n\n\t    var i;\n\t    var stringToSign = '';\n\t    for (i = 0; i < options.headers.length; i++) {\n\t      if (typeof (options.headers[i]) !== 'string')\n\t        throw new TypeError('options.headers must be an array of Strings');\n\n\t      var h = options.headers[i].toLowerCase();\n\n\t      if (h === 'request-line') {\n\t        if (!options.strict) {\n\t          /**\n\t           * We allow headers from the older spec drafts if strict parsing isn't\n\t           * specified in options.\n\t           */\n\t          stringToSign +=\n\t            request.method + ' ' + request.path + ' HTTP/' +\n\t            options.httpVersion;\n\t        } else {\n\t          /* Strict parsing doesn't allow older draft headers. */\n\t          throw (new StrictParsingError('request-line is not a valid header ' +\n\t            'with strict parsing enabled.'));\n\t        }\n\t      } else if (h === '(request-target)') {\n\t        stringToSign +=\n\t          '(request-target): ' + request.method.toLowerCase() + ' ' +\n\t          request.path;\n\t      } else {\n\t        var value = request.getHeader(h);\n\t        if (value === undefined || value === '') {\n\t          throw new MissingHeaderError(h + ' was not in the request');\n\t        }\n\t        stringToSign += h + ': ' + value;\n\t      }\n\n\t      if ((i + 1) < options.headers.length)\n\t        stringToSign += '\\n';\n\t    }\n\n\t    /* This is just for unit tests. */\n\t    if (request.hasOwnProperty('_stringToSign')) {\n\t      request._stringToSign = stringToSign;\n\t    }\n\n\t    var signature;\n\t    if (alg[0] === 'hmac') {\n\t      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n\t        throw (new TypeError('options.key must be a string or Buffer'));\n\n\t      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n\t      hmac.update(stringToSign);\n\t      signature = hmac.digest('base64');\n\n\t    } else {\n\t      var key = options.key;\n\t      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n\t        key = sshpk.parsePrivateKey(options.key);\n\n\t      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n\t        'options.key must be a sshpk.PrivateKey');\n\n\t      if (!PK_ALGOS[key.type]) {\n\t        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n\t          'keys are not supported'));\n\t      }\n\n\t      if (alg[0] !== undefined && key.type !== alg[0]) {\n\t        throw (new InvalidAlgorithmError('options.key must be a ' +\n\t          alg[0].toUpperCase() + ' key, was given a ' +\n\t          key.type.toUpperCase() + ' key instead'));\n\t      }\n\n\t      var signer = key.createSign(alg[1]);\n\t      signer.update(stringToSign);\n\t      var sigObj = signer.sign();\n\t      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n\t        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n\t          ' is not a supported hash algorithm'));\n\t      }\n\t      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n\t      signature = sigObj.toString();\n\t      assert.notStrictEqual(signature, '', 'empty signature produced');\n\t    }\n\n\t    var authzHeaderName = options.authorizationHeaderName || 'Authorization';\n\n\t    request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT,\n\t                                               options.keyId,\n\t                                               options.algorithm,\n\t                                               options.headers.join(' '),\n\t                                               signature));\n\n\t    return true;\n\t  }\n\n\t};\n\treturn signer;\n}\n\nexport { requireSigner as __require };","start":1667202707996,"end":1667202708004,"order":"normal"}]}
