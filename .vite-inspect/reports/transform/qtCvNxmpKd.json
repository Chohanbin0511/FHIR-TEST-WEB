{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/ed-compat.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tVerifier: Verifier,\n\tSigner: Signer\n};\n\nvar nacl = require('tweetnacl');\nvar stream = require('stream');\nvar util = require('util');\nvar assert = require('assert-plus');\nvar Buffer = require('safer-buffer').Buffer;\nvar Signature = require('./signature');\n\nfunction Verifier(key, hashAlgo) {\n\tif (hashAlgo.toLowerCase() !== 'sha512')\n\t\tthrow (new Error('ED25519 only supports the use of ' +\n\t\t    'SHA-512 hashes'));\n\n\tthis.key = key;\n\tthis.chunks = [];\n\n\tstream.Writable.call(this, {});\n}\nutil.inherits(Verifier, stream.Writable);\n\nVerifier.prototype._write = function (chunk, enc, cb) {\n\tthis.chunks.push(chunk);\n\tcb();\n};\n\nVerifier.prototype.update = function (chunk) {\n\tif (typeof (chunk) === 'string')\n\t\tchunk = Buffer.from(chunk, 'binary');\n\tthis.chunks.push(chunk);\n};\n\nVerifier.prototype.verify = function (signature, fmt) {\n\tvar sig;\n\tif (Signature.isSignature(signature, [2, 0])) {\n\t\tif (signature.type !== 'ed25519')\n\t\t\treturn (false);\n\t\tsig = signature.toBuffer('raw');\n\n\t} else if (typeof (signature) === 'string') {\n\t\tsig = Buffer.from(signature, 'base64');\n\n\t} else if (Signature.isSignature(signature, [1, 0])) {\n\t\tthrow (new Error('signature was created by too old ' +\n\t\t    'a version of sshpk and cannot be verified'));\n\t}\n\n\tassert.buffer(sig);\n\treturn (nacl.sign.detached.verify(\n\t    new Uint8Array(Buffer.concat(this.chunks)),\n\t    new Uint8Array(sig),\n\t    new Uint8Array(this.key.part.A.data)));\n};\n\nfunction Signer(key, hashAlgo) {\n\tif (hashAlgo.toLowerCase() !== 'sha512')\n\t\tthrow (new Error('ED25519 only supports the use of ' +\n\t\t    'SHA-512 hashes'));\n\n\tthis.key = key;\n\tthis.chunks = [];\n\n\tstream.Writable.call(this, {});\n}\nutil.inherits(Signer, stream.Writable);\n\nSigner.prototype._write = function (chunk, enc, cb) {\n\tthis.chunks.push(chunk);\n\tcb();\n};\n\nSigner.prototype.update = function (chunk) {\n\tif (typeof (chunk) === 'string')\n\t\tchunk = Buffer.from(chunk, 'binary');\n\tthis.chunks.push(chunk);\n};\n\nSigner.prototype.sign = function () {\n\tvar sig = nacl.sign.detached(\n\t    new Uint8Array(Buffer.concat(this.chunks)),\n\t    new Uint8Array(Buffer.concat([\n\t\tthis.key.part.k.data, this.key.part.A.data])));\n\tvar sigBuf = Buffer.from(sig);\n\tvar sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');\n\tsigObj.hashAlgorithm = 'sha512';\n\treturn (sigObj);\n};\n","start":1667202983824,"end":1667202983919},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/tweetnacl/nacl-fast.js?commonjs-wrapped\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/signature.js?commonjs-wrapped\";\n\nvar edCompat;\nvar hasRequiredEdCompat;\n\nfunction requireEdCompat () {\n\tif (hasRequiredEdCompat) return edCompat;\n\thasRequiredEdCompat = 1;\n\t// Copyright 2015 Joyent, Inc.\n\n\tedCompat = {\n\t\tVerifier: Verifier,\n\t\tSigner: Signer\n\t};\n\n\tvar nacl = require$$0();\n\tvar stream = require$$1;\n\tvar util = require$$2();\n\tvar assert = require$$3();\n\tvar Buffer = require$$4().Buffer;\n\tvar Signature = require$$5();\n\n\tfunction Verifier(key, hashAlgo) {\n\t\tif (hashAlgo.toLowerCase() !== 'sha512')\n\t\t\tthrow (new Error('ED25519 only supports the use of ' +\n\t\t\t    'SHA-512 hashes'));\n\n\t\tthis.key = key;\n\t\tthis.chunks = [];\n\n\t\tstream.Writable.call(this, {});\n\t}\n\tutil.inherits(Verifier, stream.Writable);\n\n\tVerifier.prototype._write = function (chunk, enc, cb) {\n\t\tthis.chunks.push(chunk);\n\t\tcb();\n\t};\n\n\tVerifier.prototype.update = function (chunk) {\n\t\tif (typeof (chunk) === 'string')\n\t\t\tchunk = Buffer.from(chunk, 'binary');\n\t\tthis.chunks.push(chunk);\n\t};\n\n\tVerifier.prototype.verify = function (signature, fmt) {\n\t\tvar sig;\n\t\tif (Signature.isSignature(signature, [2, 0])) {\n\t\t\tif (signature.type !== 'ed25519')\n\t\t\t\treturn (false);\n\t\t\tsig = signature.toBuffer('raw');\n\n\t\t} else if (typeof (signature) === 'string') {\n\t\t\tsig = Buffer.from(signature, 'base64');\n\n\t\t} else if (Signature.isSignature(signature, [1, 0])) {\n\t\t\tthrow (new Error('signature was created by too old ' +\n\t\t\t    'a version of sshpk and cannot be verified'));\n\t\t}\n\n\t\tassert.buffer(sig);\n\t\treturn (nacl.sign.detached.verify(\n\t\t    new Uint8Array(Buffer.concat(this.chunks)),\n\t\t    new Uint8Array(sig),\n\t\t    new Uint8Array(this.key.part.A.data)));\n\t};\n\n\tfunction Signer(key, hashAlgo) {\n\t\tif (hashAlgo.toLowerCase() !== 'sha512')\n\t\t\tthrow (new Error('ED25519 only supports the use of ' +\n\t\t\t    'SHA-512 hashes'));\n\n\t\tthis.key = key;\n\t\tthis.chunks = [];\n\n\t\tstream.Writable.call(this, {});\n\t}\n\tutil.inherits(Signer, stream.Writable);\n\n\tSigner.prototype._write = function (chunk, enc, cb) {\n\t\tthis.chunks.push(chunk);\n\t\tcb();\n\t};\n\n\tSigner.prototype.update = function (chunk) {\n\t\tif (typeof (chunk) === 'string')\n\t\t\tchunk = Buffer.from(chunk, 'binary');\n\t\tthis.chunks.push(chunk);\n\t};\n\n\tSigner.prototype.sign = function () {\n\t\tvar sig = nacl.sign.detached(\n\t\t    new Uint8Array(Buffer.concat(this.chunks)),\n\t\t    new Uint8Array(Buffer.concat([\n\t\t\tthis.key.part.k.data, this.key.part.A.data])));\n\t\tvar sigBuf = Buffer.from(sig);\n\t\tvar sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');\n\t\tsigObj.hashAlgorithm = 'sha512';\n\t\treturn (sigObj);\n\t};\n\treturn edCompat;\n}\n\nexport { requireEdCompat as __require };","start":1667202983919,"end":1667202985074,"order":"normal"}]}
