{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/algs.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2015 Joyent, Inc.\n\nvar Buffer = require('safer-buffer').Buffer;\n\nvar algInfo = {\n\t'dsa': {\n\t\tparts: ['p', 'q', 'g', 'y'],\n\t\tsizePart: 'p'\n\t},\n\t'rsa': {\n\t\tparts: ['e', 'n'],\n\t\tsizePart: 'n'\n\t},\n\t'ecdsa': {\n\t\tparts: ['curve', 'Q'],\n\t\tsizePart: 'Q'\n\t},\n\t'ed25519': {\n\t\tparts: ['A'],\n\t\tsizePart: 'A'\n\t}\n};\nalgInfo['curve25519'] = algInfo['ed25519'];\n\nvar algPrivInfo = {\n\t'dsa': {\n\t\tparts: ['p', 'q', 'g', 'y', 'x']\n\t},\n\t'rsa': {\n\t\tparts: ['n', 'e', 'd', 'iqmp', 'p', 'q']\n\t},\n\t'ecdsa': {\n\t\tparts: ['curve', 'Q', 'd']\n\t},\n\t'ed25519': {\n\t\tparts: ['A', 'k']\n\t}\n};\nalgPrivInfo['curve25519'] = algPrivInfo['ed25519'];\n\nvar hashAlgs = {\n\t'md5': true,\n\t'sha1': true,\n\t'sha256': true,\n\t'sha384': true,\n\t'sha512': true\n};\n\n/*\n * Taken from\n * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf\n */\nvar curves = {\n\t'nistp256': {\n\t\tsize: 256,\n\t\tpkcs8oid: '1.2.840.10045.3.1.7',\n\t\tp: Buffer.from(('00' +\n\t\t    'ffffffff 00000001 00000000 00000000' +\n\t\t    '00000000 ffffffff ffffffff ffffffff').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ta: Buffer.from(('00' +\n\t\t    'FFFFFFFF 00000001 00000000 00000000' +\n\t\t    '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: Buffer.from((\n\t\t    '5ac635d8 aa3a93e7 b3ebbd55 769886bc' +\n\t\t    '651d06b0 cc53b0f6 3bce3c3e 27d2604b').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: Buffer.from(('00' +\n\t\t    'c49d3608 86e70493 6a6678e1 139d26b7' +\n\t\t    '819f7e90').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tn: Buffer.from(('00' +\n\t\t    'ffffffff 00000000 ffffffff ffffffff' +\n\t\t    'bce6faad a7179e84 f3b9cac2 fc632551').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: Buffer.from(('04' +\n\t\t    '6b17d1f2 e12c4247 f8bce6e5 63a440f2' +\n\t\t    '77037d81 2deb33a0 f4a13945 d898c296' +\n\t\t    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' +\n\t\t    '2bce3357 6b315ece cbb64068 37bf51f5').\n\t\t    replace(/ /g, ''), 'hex')\n\t},\n\t'nistp384': {\n\t\tsize: 384,\n\t\tpkcs8oid: '1.3.132.0.34',\n\t\tp: Buffer.from(('00' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff fffffffe' +\n\t\t    'ffffffff 00000000 00000000 ffffffff').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ta: Buffer.from(('00' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' +\n\t\t    'FFFFFFFF 00000000 00000000 FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: Buffer.from((\n\t\t    'b3312fa7 e23ee7e4 988e056b e3f82d19' +\n\t\t    '181d9c6e fe814112 0314088f 5013875a' +\n\t\t    'c656398d 8a2ed19d 2a85c8ed d3ec2aef').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: Buffer.from(('00' +\n\t\t    'a335926a a319a27a 1d00896a 6773a482' +\n\t\t    '7acdac73').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tn: Buffer.from(('00' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff c7634d81 f4372ddf' +\n\t\t    '581a0db2 48b0a77a ecec196a ccc52973').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: Buffer.from(('04' +\n\t\t    'aa87ca22 be8b0537 8eb1c71e f320ad74' +\n\t\t    '6e1d3b62 8ba79b98 59f741e0 82542a38' +\n\t\t    '5502f25d bf55296c 3a545e38 72760ab7' +\n\t\t    '3617de4a 96262c6f 5d9e98bf 9292dc29' +\n\t\t    'f8f41dbd 289a147c e9da3113 b5f0b8c0' +\n\t\t    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').\n\t\t    replace(/ /g, ''), 'hex')\n\t},\n\t'nistp521': {\n\t\tsize: 521,\n\t\tpkcs8oid: '1.3.132.0.35',\n\t\tp: Buffer.from((\n\t\t    '01ffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffff').replace(/ /g, ''), 'hex'),\n\t\ta: Buffer.from(('01FF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tb: Buffer.from(('51' +\n\t\t    '953eb961 8e1c9a1f 929a21a0 b68540ee' +\n\t\t    'a2da725b 99b315f3 b8b48991 8ef109e1' +\n\t\t    '56193951 ec7e937b 1652c0bd 3bb1bf07' +\n\t\t    '3573df88 3d2c34f1 ef451fd4 6b503f00').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\ts: Buffer.from(('00' +\n\t\t    'd09e8800 291cb853 96cc6717 393284aa' +\n\t\t    'a0da64ba').replace(/ /g, ''), 'hex'),\n\t\tn: Buffer.from(('01ff' +\n\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t    'ffffffff ffffffff ffffffff fffffffa' +\n\t\t    '51868783 bf2f966b 7fcc0148 f709a5d0' +\n\t\t    '3bb5c9b8 899c47ae bb6fb71e 91386409').\n\t\t    replace(/ /g, ''), 'hex'),\n\t\tG: Buffer.from(('04' +\n\t\t    '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' +\n\t\t         '9c648139 053fb521 f828af60 6b4d3dba' +\n\t\t         'a14b5e77 efe75928 fe1dc127 a2ffa8de' +\n\t\t         '3348b3c1 856a429b f97e7e31 c2e5bd66' +\n\t\t    '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' +\n\t\t         '98f54449 579b4468 17afbd17 273e662c' +\n\t\t         '97ee7299 5ef42640 c550b901 3fad0761' +\n\t\t         '353c7086 a272c240 88be9476 9fd16650').\n\t\t    replace(/ /g, ''), 'hex')\n\t}\n};\n\nmodule.exports = {\n\tinfo: algInfo,\n\tprivInfo: algPrivInfo,\n\thashAlgs: hashAlgs,\n\tcurves: curves\n};\n","start":1667202983822,"end":1667202983878},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\n\nvar algs;\nvar hasRequiredAlgs;\n\nfunction requireAlgs () {\n\tif (hasRequiredAlgs) return algs;\n\thasRequiredAlgs = 1;\n\t// Copyright 2015 Joyent, Inc.\n\n\tvar Buffer = require$$0().Buffer;\n\n\tvar algInfo = {\n\t\t'dsa': {\n\t\t\tparts: ['p', 'q', 'g', 'y'],\n\t\t\tsizePart: 'p'\n\t\t},\n\t\t'rsa': {\n\t\t\tparts: ['e', 'n'],\n\t\t\tsizePart: 'n'\n\t\t},\n\t\t'ecdsa': {\n\t\t\tparts: ['curve', 'Q'],\n\t\t\tsizePart: 'Q'\n\t\t},\n\t\t'ed25519': {\n\t\t\tparts: ['A'],\n\t\t\tsizePart: 'A'\n\t\t}\n\t};\n\talgInfo['curve25519'] = algInfo['ed25519'];\n\n\tvar algPrivInfo = {\n\t\t'dsa': {\n\t\t\tparts: ['p', 'q', 'g', 'y', 'x']\n\t\t},\n\t\t'rsa': {\n\t\t\tparts: ['n', 'e', 'd', 'iqmp', 'p', 'q']\n\t\t},\n\t\t'ecdsa': {\n\t\t\tparts: ['curve', 'Q', 'd']\n\t\t},\n\t\t'ed25519': {\n\t\t\tparts: ['A', 'k']\n\t\t}\n\t};\n\talgPrivInfo['curve25519'] = algPrivInfo['ed25519'];\n\n\tvar hashAlgs = {\n\t\t'md5': true,\n\t\t'sha1': true,\n\t\t'sha256': true,\n\t\t'sha384': true,\n\t\t'sha512': true\n\t};\n\n\t/*\n\t * Taken from\n\t * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf\n\t */\n\tvar curves = {\n\t\t'nistp256': {\n\t\t\tsize: 256,\n\t\t\tpkcs8oid: '1.2.840.10045.3.1.7',\n\t\t\tp: Buffer.from(('00' +\n\t\t\t    'ffffffff 00000001 00000000 00000000' +\n\t\t\t    '00000000 ffffffff ffffffff ffffffff').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\ta: Buffer.from(('00' +\n\t\t\t    'FFFFFFFF 00000001 00000000 00000000' +\n\t\t\t    '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\tb: Buffer.from((\n\t\t\t    '5ac635d8 aa3a93e7 b3ebbd55 769886bc' +\n\t\t\t    '651d06b0 cc53b0f6 3bce3c3e 27d2604b').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\ts: Buffer.from(('00' +\n\t\t\t    'c49d3608 86e70493 6a6678e1 139d26b7' +\n\t\t\t    '819f7e90').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\tn: Buffer.from(('00' +\n\t\t\t    'ffffffff 00000000 ffffffff ffffffff' +\n\t\t\t    'bce6faad a7179e84 f3b9cac2 fc632551').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\tG: Buffer.from(('04' +\n\t\t\t    '6b17d1f2 e12c4247 f8bce6e5 63a440f2' +\n\t\t\t    '77037d81 2deb33a0 f4a13945 d898c296' +\n\t\t\t    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' +\n\t\t\t    '2bce3357 6b315ece cbb64068 37bf51f5').\n\t\t\t    replace(/ /g, ''), 'hex')\n\t\t},\n\t\t'nistp384': {\n\t\t\tsize: 384,\n\t\t\tpkcs8oid: '1.3.132.0.34',\n\t\t\tp: Buffer.from(('00' +\n\t\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t\t    'ffffffff ffffffff ffffffff fffffffe' +\n\t\t\t    'ffffffff 00000000 00000000 ffffffff').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\ta: Buffer.from(('00' +\n\t\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' +\n\t\t\t    'FFFFFFFF 00000000 00000000 FFFFFFFC').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\tb: Buffer.from((\n\t\t\t    'b3312fa7 e23ee7e4 988e056b e3f82d19' +\n\t\t\t    '181d9c6e fe814112 0314088f 5013875a' +\n\t\t\t    'c656398d 8a2ed19d 2a85c8ed d3ec2aef').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\ts: Buffer.from(('00' +\n\t\t\t    'a335926a a319a27a 1d00896a 6773a482' +\n\t\t\t    '7acdac73').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\tn: Buffer.from(('00' +\n\t\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t\t    'ffffffff ffffffff c7634d81 f4372ddf' +\n\t\t\t    '581a0db2 48b0a77a ecec196a ccc52973').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\tG: Buffer.from(('04' +\n\t\t\t    'aa87ca22 be8b0537 8eb1c71e f320ad74' +\n\t\t\t    '6e1d3b62 8ba79b98 59f741e0 82542a38' +\n\t\t\t    '5502f25d bf55296c 3a545e38 72760ab7' +\n\t\t\t    '3617de4a 96262c6f 5d9e98bf 9292dc29' +\n\t\t\t    'f8f41dbd 289a147c e9da3113 b5f0b8c0' +\n\t\t\t    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').\n\t\t\t    replace(/ /g, ''), 'hex')\n\t\t},\n\t\t'nistp521': {\n\t\t\tsize: 521,\n\t\t\tpkcs8oid: '1.3.132.0.35',\n\t\t\tp: Buffer.from((\n\t\t\t    '01ffffff ffffffff ffffffff ffffffff' +\n\t\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t\t    'ffff').replace(/ /g, ''), 'hex'),\n\t\t\ta: Buffer.from(('01FF' +\n\t\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +\n\t\t\t    'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\tb: Buffer.from(('51' +\n\t\t\t    '953eb961 8e1c9a1f 929a21a0 b68540ee' +\n\t\t\t    'a2da725b 99b315f3 b8b48991 8ef109e1' +\n\t\t\t    '56193951 ec7e937b 1652c0bd 3bb1bf07' +\n\t\t\t    '3573df88 3d2c34f1 ef451fd4 6b503f00').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\ts: Buffer.from(('00' +\n\t\t\t    'd09e8800 291cb853 96cc6717 393284aa' +\n\t\t\t    'a0da64ba').replace(/ /g, ''), 'hex'),\n\t\t\tn: Buffer.from(('01ff' +\n\t\t\t    'ffffffff ffffffff ffffffff ffffffff' +\n\t\t\t    'ffffffff ffffffff ffffffff fffffffa' +\n\t\t\t    '51868783 bf2f966b 7fcc0148 f709a5d0' +\n\t\t\t    '3bb5c9b8 899c47ae bb6fb71e 91386409').\n\t\t\t    replace(/ /g, ''), 'hex'),\n\t\t\tG: Buffer.from(('04' +\n\t\t\t    '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' +\n\t\t\t         '9c648139 053fb521 f828af60 6b4d3dba' +\n\t\t\t         'a14b5e77 efe75928 fe1dc127 a2ffa8de' +\n\t\t\t         '3348b3c1 856a429b f97e7e31 c2e5bd66' +\n\t\t\t    '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' +\n\t\t\t         '98f54449 579b4468 17afbd17 273e662c' +\n\t\t\t         '97ee7299 5ef42640 c550b901 3fad0761' +\n\t\t\t         '353c7086 a272c240 88be9476 9fd16650').\n\t\t\t    replace(/ /g, ''), 'hex')\n\t\t}\n\t};\n\n\talgs = {\n\t\tinfo: algInfo,\n\t\tprivInfo: algPrivInfo,\n\t\thashAlgs: hashAlgs,\n\t\tcurves: curves\n\t};\n\treturn algs;\n}\n\nexport { requireAlgs as __require };","start":1667202983878,"end":1667202984050,"order":"normal"}]}
