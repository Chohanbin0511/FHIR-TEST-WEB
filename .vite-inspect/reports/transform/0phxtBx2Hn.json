{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/references.js","transforms":[{"name":"vite:load-fallback","result":"(function() {\n    var utils = require('../utils');\n\n    var CONTAINED = /^#(.*)/;\n    var resolveContained = function(ref, resource) {\n        var cid = ref.match(CONTAINED)[1];\n        var ret = (resource.contained || []).filter(function(r){\n            return (r.id || r._id) == cid;\n        })[0];\n        return (ret && {content: ret}) || null;\n    };\n\n    var sync = function(arg) {\n        var cache = arg.cache;\n        var reference = arg.reference;\n        var bundle = arg.bundle;\n        var ref = reference;\n        if (!ref.reference) {return null;}\n        if (ref.reference.match(CONTAINED)) {return resolveContained(ref.reference, arg.resource);}\n        var abs = utils.absoluteUrl(arg.baseUrl, ref.reference);\n        var bundled = ((bundle && bundle.entry) || []).filter( function(e){\n            return e.id === abs;\n        })[0];\n        return bundled || (cache != null ? cache[abs] : void 0) || null;\n    };\n\n    var resolve = function(h){\n        return function(args) {\n            var cacheMatched = sync(args);\n            var ref = args.reference;\n            var def = args.defer();\n            if (cacheMatched) {\n                if(!args.defer){ throw new Error(\"I need promise constructor 'adapter.defer' in adapter\"); }\n                def.resolve(cacheMatched);\n                return def.promise;\n            }\n            if (!ref) {\n                throw new Error(\"No reference found\");\n            }\n            if (ref && ref.reference.match(CONTAINED)) {\n                throw new Error(\"Contained resource not found\");\n            }\n            args.url = utils.absoluteUrl(args.baseUrl, ref.reference);\n            args.data = null;\n            return h(args);\n        };\n    };\n\n    module.exports.sync = sync;\n    module.exports.resolve = resolve;\n\n}).call(this);\n","start":1667202704292,"end":1667202704370},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as references } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/middlewares/references.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/utils.js?commonjs-wrapped\";\n\nvar hasRequiredReferences;\n\nfunction requireReferences () {\n\tif (hasRequiredReferences) return references;\n\thasRequiredReferences = 1;\n\t(function() {\n\t    var utils = require$$0();\n\n\t    var CONTAINED = /^#(.*)/;\n\t    var resolveContained = function(ref, resource) {\n\t        var cid = ref.match(CONTAINED)[1];\n\t        var ret = (resource.contained || []).filter(function(r){\n\t            return (r.id || r._id) == cid;\n\t        })[0];\n\t        return (ret && {content: ret}) || null;\n\t    };\n\n\t    var sync = function(arg) {\n\t        var cache = arg.cache;\n\t        var reference = arg.reference;\n\t        var bundle = arg.bundle;\n\t        var ref = reference;\n\t        if (!ref.reference) {return null;}\n\t        if (ref.reference.match(CONTAINED)) {return resolveContained(ref.reference, arg.resource);}\n\t        var abs = utils.absoluteUrl(arg.baseUrl, ref.reference);\n\t        var bundled = ((bundle && bundle.entry) || []).filter( function(e){\n\t            return e.id === abs;\n\t        })[0];\n\t        return bundled || (cache != null ? cache[abs] : void 0) || null;\n\t    };\n\n\t    var resolve = function(h){\n\t        return function(args) {\n\t            var cacheMatched = sync(args);\n\t            var ref = args.reference;\n\t            var def = args.defer();\n\t            if (cacheMatched) {\n\t                if(!args.defer){ throw new Error(\"I need promise constructor 'adapter.defer' in adapter\"); }\n\t                def.resolve(cacheMatched);\n\t                return def.promise;\n\t            }\n\t            if (!ref) {\n\t                throw new Error(\"No reference found\");\n\t            }\n\t            if (ref && ref.reference.match(CONTAINED)) {\n\t                throw new Error(\"Contained resource not found\");\n\t            }\n\t            args.url = utils.absoluteUrl(args.baseUrl, ref.reference);\n\t            args.data = null;\n\t            return h(args);\n\t        };\n\t    };\n\n\t    references.sync = sync;\n\t    references.resolve = resolve;\n\n\t}).call(commonjsHelpers.commonjsGlobal);\n\treturn references;\n}\n\nexport { requireReferences as __require };","start":1667202704371,"end":1667202704695,"order":"normal"}]}
