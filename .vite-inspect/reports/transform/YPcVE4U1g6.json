{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/utils.js","transforms":[{"name":"vite:load-fallback","result":"(function() {\n  var merge = require('merge');\n\n  var RTRIM = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n  var trim = function(text) {\n    return text ? text.toString().replace(RTRIM, \"\")  : \"\";\n  };\n\n  exports.trim = trim;\n\n  var addKey = function(acc, str) {\n    var pair, val;\n    if (!str) {\n      return null;\n    }\n    pair = str.split(\"=\").map(trim);\n    val = pair[1].replace(/(^\"|\"$)/g, '');\n    if (val) {\n      acc[pair[0]] = val;\n    }\n    return acc;\n  };\n\n  var type = function(obj) {\n    var classToType;\n    if (obj == null && obj === undefined) {\n      return String(obj);\n    }\n    classToType = {\n      '[object Boolean]': 'boolean',\n      '[object Number]': 'number',\n      '[object String]': 'string',\n      '[object Function]': 'function',\n      '[object Array]': 'array',\n      '[object Date]': 'date',\n      '[object RegExp]': 'regexp',\n      '[object Object]': 'object'\n    };\n    return classToType[Object.prototype.toString.call(obj)];\n  };\n\n  exports.type = type;\n\n  var assertArray = function(a) {\n    if (type(a) !== 'array') {\n      throw 'not array';\n    }\n    return a;\n  };\n\n  exports.assertArray = assertArray;\n\n  var assertObject = function(a) {\n    if (type(a) !== 'object') {\n      throw 'not object';\n    }\n    return a;\n  };\n\n  exports.assertObject = assertObject;\n\n  var reduceMap = function(m, fn, acc) {\n    var k, v;\n    acc || (acc = []);\n    assertObject(m);\n    return ((function() {\n      var results;\n      results = [];\n      for (k in m) {\n        v = m[k];\n        results.push([k, v]);\n      }\n      return results;\n    })()).reduce(fn, acc);\n  };\n\n  exports.reduceMap = reduceMap;\n\n  var identity = function(x) {return x;};\n\n  exports.identity = identity;\n\n  var argsArray = function() {\n     return Array.prototype.slice.call(arguments)\n  };\n\n  exports.argsArray = argsArray;\n\n  var mergeLists = function() {\n    var reduce;\n    reduce = function(merged, nextMap) {\n      var k, ret, v;\n      ret = merge(true, merged);\n      for (k in nextMap) {\n        v = nextMap[k];\n        ret[k] = (ret[k] || []).concat(v);\n      }\n      return ret;\n    };\n    return argsArray.apply(null, arguments).reduce(reduce, {});\n  };\n\n  exports.mergeLists = mergeLists;\n\n  var absoluteUrl = function(baseUrl, ref) {\n    if (!ref.match(/https?:\\/\\/./)) {\n      return baseUrl + \"/\" + ref;\n    } else {\n      return ref;\n    }\n  };\n\n  exports.absoluteUrl = absoluteUrl;\n\n  var relativeUrl = function(baseUrl, ref) {\n    if (ref.slice(ref, baseUrl.length + 1) === baseUrl + \"/\") {\n      return ref.slice(baseUrl.length + 1);\n    } else {\n      return ref;\n    }\n  };\n\n  exports.relativeUrl = relativeUrl;\n\n  exports.resourceIdToUrl = function(id, baseUrl, type) {\n    baseUrl = baseUrl.replace(/\\/$/, '');\n    id = id.replace(/^\\//, '');\n    if (id.indexOf('/') < 0) {\n      return baseUrl + \"/\" + type + \"/\" + id;\n    } else if (id.indexOf(baseUrl) !== 0) {\n      return baseUrl + \"/\" + id;\n    } else {\n      return id;\n    }\n  };\n\n  var walk = function(inner, outer, data, context) {\n    var keysToMap, remapped;\n    switch (type(data)) {\n      case 'array':\n        return outer(data.map(function(item) {\n          return inner(item, [data, context]);\n        }), context);\n      case 'object':\n        keysToMap = function(acc, arg) {\n          var k, v;\n          k = arg[0], v = arg[1];\n          acc[k] = inner(v, [data].concat(context));\n          return acc;\n        };\n        remapped = reduceMap(data, keysToMap, {});\n        return outer(remapped, context);\n      default:\n        return outer(data, context);\n    }\n  };\n\n  exports.walk = walk;\n\n  var postwalk = function(f, data, context) {\n    if (!data) {\n      return function(data, context) {\n        return postwalk(f, data, context);\n      };\n    } else {\n      return walk(postwalk(f), f, data, context);\n    }\n  };\n\n  exports.postwalk = postwalk;\n\n}).call(this);\n","start":1667202704256,"end":1667202704327},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as utils } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/fhir.js/src/utils.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/merge/merge.js?commonjs-wrapped\";\n\nvar hasRequiredUtils;\n\nfunction requireUtils () {\n\tif (hasRequiredUtils) return utils;\n\thasRequiredUtils = 1;\n\t(function() {\n\t  var merge = require$$0();\n\n\t  var RTRIM = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n\t  var trim = function(text) {\n\t    return text ? text.toString().replace(RTRIM, \"\")  : \"\";\n\t  };\n\n\t  utils.trim = trim;\n\n\t  var addKey = function(acc, str) {\n\t    var pair, val;\n\t    if (!str) {\n\t      return null;\n\t    }\n\t    pair = str.split(\"=\").map(trim);\n\t    val = pair[1].replace(/(^\"|\"$)/g, '');\n\t    if (val) {\n\t      acc[pair[0]] = val;\n\t    }\n\t    return acc;\n\t  };\n\n\t  var type = function(obj) {\n\t    var classToType;\n\t    if (obj == null && obj === undefined) {\n\t      return String(obj);\n\t    }\n\t    classToType = {\n\t      '[object Boolean]': 'boolean',\n\t      '[object Number]': 'number',\n\t      '[object String]': 'string',\n\t      '[object Function]': 'function',\n\t      '[object Array]': 'array',\n\t      '[object Date]': 'date',\n\t      '[object RegExp]': 'regexp',\n\t      '[object Object]': 'object'\n\t    };\n\t    return classToType[Object.prototype.toString.call(obj)];\n\t  };\n\n\t  utils.type = type;\n\n\t  var assertArray = function(a) {\n\t    if (type(a) !== 'array') {\n\t      throw 'not array';\n\t    }\n\t    return a;\n\t  };\n\n\t  utils.assertArray = assertArray;\n\n\t  var assertObject = function(a) {\n\t    if (type(a) !== 'object') {\n\t      throw 'not object';\n\t    }\n\t    return a;\n\t  };\n\n\t  utils.assertObject = assertObject;\n\n\t  var reduceMap = function(m, fn, acc) {\n\t    var k, v;\n\t    acc || (acc = []);\n\t    assertObject(m);\n\t    return ((function() {\n\t      var results;\n\t      results = [];\n\t      for (k in m) {\n\t        v = m[k];\n\t        results.push([k, v]);\n\t      }\n\t      return results;\n\t    })()).reduce(fn, acc);\n\t  };\n\n\t  utils.reduceMap = reduceMap;\n\n\t  var identity = function(x) {return x;};\n\n\t  utils.identity = identity;\n\n\t  var argsArray = function() {\n\t     return Array.prototype.slice.call(arguments)\n\t  };\n\n\t  utils.argsArray = argsArray;\n\n\t  var mergeLists = function() {\n\t    var reduce;\n\t    reduce = function(merged, nextMap) {\n\t      var k, ret, v;\n\t      ret = merge(true, merged);\n\t      for (k in nextMap) {\n\t        v = nextMap[k];\n\t        ret[k] = (ret[k] || []).concat(v);\n\t      }\n\t      return ret;\n\t    };\n\t    return argsArray.apply(null, arguments).reduce(reduce, {});\n\t  };\n\n\t  utils.mergeLists = mergeLists;\n\n\t  var absoluteUrl = function(baseUrl, ref) {\n\t    if (!ref.match(/https?:\\/\\/./)) {\n\t      return baseUrl + \"/\" + ref;\n\t    } else {\n\t      return ref;\n\t    }\n\t  };\n\n\t  utils.absoluteUrl = absoluteUrl;\n\n\t  var relativeUrl = function(baseUrl, ref) {\n\t    if (ref.slice(ref, baseUrl.length + 1) === baseUrl + \"/\") {\n\t      return ref.slice(baseUrl.length + 1);\n\t    } else {\n\t      return ref;\n\t    }\n\t  };\n\n\t  utils.relativeUrl = relativeUrl;\n\n\t  utils.resourceIdToUrl = function(id, baseUrl, type) {\n\t    baseUrl = baseUrl.replace(/\\/$/, '');\n\t    id = id.replace(/^\\//, '');\n\t    if (id.indexOf('/') < 0) {\n\t      return baseUrl + \"/\" + type + \"/\" + id;\n\t    } else if (id.indexOf(baseUrl) !== 0) {\n\t      return baseUrl + \"/\" + id;\n\t    } else {\n\t      return id;\n\t    }\n\t  };\n\n\t  var walk = function(inner, outer, data, context) {\n\t    var keysToMap, remapped;\n\t    switch (type(data)) {\n\t      case 'array':\n\t        return outer(data.map(function(item) {\n\t          return inner(item, [data, context]);\n\t        }), context);\n\t      case 'object':\n\t        keysToMap = function(acc, arg) {\n\t          var k, v;\n\t          k = arg[0], v = arg[1];\n\t          acc[k] = inner(v, [data].concat(context));\n\t          return acc;\n\t        };\n\t        remapped = reduceMap(data, keysToMap, {});\n\t        return outer(remapped, context);\n\t      default:\n\t        return outer(data, context);\n\t    }\n\t  };\n\n\t  utils.walk = walk;\n\n\t  var postwalk = function(f, data, context) {\n\t    if (!data) {\n\t      return function(data, context) {\n\t        return postwalk(f, data, context);\n\t      };\n\t    } else {\n\t      return walk(postwalk(f), f, data, context);\n\t    }\n\t  };\n\n\t  utils.postwalk = postwalk;\n\n\t}).call(commonjsHelpers.commonjsGlobal);\n\treturn utils;\n}\n\nexport { requireUtils as __require };","start":1667202704327,"end":1667202704692,"order":"normal"}]}
