{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/ssh-private.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadSSHPrivate: readSSHPrivate,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar Buffer = require('safer-buffer').Buffer;\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\nvar errors = require('../errors');\n\nvar bcrypt;\n\nfunction read(buf, options) {\n\treturn (pem.read(buf, options));\n}\n\nvar MAGIC = 'openssh-key-v1';\n\nfunction readSSHPrivate(type, buf, options) {\n\tbuf = new SSHBuffer({buffer: buf});\n\n\tvar magic = buf.readCString();\n\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\tvar cipher = buf.readString();\n\tvar kdf = buf.readString();\n\tvar kdfOpts = buf.readBuffer();\n\n\tvar nkeys = buf.readInt();\n\tif (nkeys !== 1) {\n\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t    'multiple keys: this is unsupported.'));\n\t}\n\n\tvar pubKey = buf.readBuffer();\n\n\tif (type === 'public') {\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\treturn (rfc4253.read(pubKey));\n\t}\n\n\tvar privKeyBlob = buf.readBuffer();\n\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\tvar kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });\n\tswitch (kdf) {\n\tcase 'none':\n\t\tif (cipher !== 'none') {\n\t\t\tthrow (new Error('OpenSSH-format key uses KDF \"none\" ' +\n\t\t\t     'but specifies a cipher other than \"none\"'));\n\t\t}\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = kdfOptsBuf.readBuffer();\n\t\tvar rounds = kdfOptsBuf.readInt();\n\t\tvar cinf = utils.opensshCipherInfo(cipher);\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\n\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\toptions.passphrase = Buffer.from(options.passphrase,\n\t\t\t    'utf-8');\n\t\t}\n\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t    options.filename, 'OpenSSH'));\n\t\t}\n\n\t\tvar pass = new Uint8Array(options.passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = Buffer.from(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\t\tvar cipherStream = crypto.createDecipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t}\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privKeyBlob);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivKeyBlob = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error(\n\t\t    'OpenSSH-format key uses unknown KDF \"' + kdf + '\"'));\n\t}\n\n\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\tvar checkInt1 = buf.readInt();\n\tvar checkInt2 = buf.readInt();\n\tif (checkInt1 !== checkInt2) {\n\t\tthrow (new Error('Incorrect passphrase supplied, could not ' +\n\t\t    'decrypt key'));\n\t}\n\n\tvar ret = {};\n\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\tbuf.skip(ret.consumed);\n\n\tvar comment = buf.readString();\n\tkey.comment = comment;\n\n\treturn (key);\n}\n\nfunction write(key, options) {\n\tvar pubKey;\n\tif (PrivateKey.isPrivateKey(key))\n\t\tpubKey = key.toPublic();\n\telse\n\t\tpubKey = key;\n\n\tvar cipher = 'none';\n\tvar kdf = 'none';\n\tvar kdfopts = Buffer.alloc(0);\n\tvar cinf = { blockSize: 8 };\n\tvar passphrase;\n\tif (options !== undefined) {\n\t\tpassphrase = options.passphrase;\n\t\tif (typeof (passphrase) === 'string')\n\t\t\tpassphrase = Buffer.from(passphrase, 'utf-8');\n\t\tif (passphrase !== undefined) {\n\t\t\tassert.buffer(passphrase, 'options.passphrase');\n\t\t\tassert.optionalString(options.cipher, 'options.cipher');\n\t\t\tcipher = options.cipher;\n\t\t\tif (cipher === undefined)\n\t\t\t\tcipher = 'aes128-ctr';\n\t\t\tcinf = utils.opensshCipherInfo(cipher);\n\t\t\tkdf = 'bcrypt';\n\t\t}\n\t}\n\n\tvar privBuf;\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tprivBuf = new SSHBuffer({});\n\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\tprivBuf.writeString(key.comment || '');\n\n\t\tvar n = 1;\n\t\twhile (privBuf._offset % cinf.blockSize !== 0)\n\t\t\tprivBuf.writeChar(n++);\n\t\tprivBuf = privBuf.toBuffer();\n\t}\n\n\tswitch (kdf) {\n\tcase 'none':\n\t\tbreak;\n\tcase 'bcrypt':\n\t\tvar salt = crypto.randomBytes(16);\n\t\tvar rounds = 16;\n\t\tvar kdfssh = new SSHBuffer({});\n\t\tkdfssh.writeBuffer(salt);\n\t\tkdfssh.writeInt(rounds);\n\t\tkdfopts = kdfssh.toBuffer();\n\n\t\tif (bcrypt === undefined) {\n\t\t\tbcrypt = require('bcrypt-pbkdf');\n\t\t}\n\t\tvar pass = new Uint8Array(passphrase);\n\t\tvar salti = new Uint8Array(salt);\n\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t    out, out.length, rounds);\n\t\tif (res !== 0) {\n\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t    'failure, parameters invalid'));\n\t\t}\n\t\tout = Buffer.from(out);\n\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\n\t\tvar cipherStream = crypto.createCipheriv(cinf.opensslName,\n\t\t    ckey, iv);\n\t\tcipherStream.setAutoPadding(false);\n\t\tvar chunk, chunks = [];\n\t\tcipherStream.once('error', function (e) {\n\t\t\tthrow (e);\n\t\t});\n\t\tcipherStream.write(privBuf);\n\t\tcipherStream.end();\n\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\tchunks.push(chunk);\n\t\tprivBuf = Buffer.concat(chunks);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported kdf ' + kdf));\n\t}\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeCString(MAGIC);\n\tbuf.writeString(cipher);\t/* cipher */\n\tbuf.writeString(kdf);\t\t/* kdf */\n\tbuf.writeBuffer(kdfopts);\t/* kdfoptions */\n\n\tbuf.writeInt(1);\t\t/* nkeys */\n\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\tif (privBuf)\n\t\tbuf.writeBuffer(privBuf);\n\n\tbuf = buf.toBuffer();\n\n\tvar header;\n\tif (PrivateKey.isPrivateKey(key))\n\t\theader = 'OPENSSH PRIVATE KEY';\n\telse\n\t\theader = 'OPENSSH PUBLIC KEY';\n\n\tvar tmp = buf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 70) +\n\t    18 + 16 + header.length*2 + 10;\n\tbuf = Buffer.alloc(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 70;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n","start":1667202983841,"end":1667202984013},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/assert-plus/assert.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/asn1/lib/index.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/safer-buffer/safer.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/algs.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/utils.js?commonjs-wrapped\";\nimport require$$5 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/key.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/private-key.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/pem.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/formats/rfc4253.js?commonjs-wrapped\";\nimport { __require as require$$10 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/ssh-buffer.js?commonjs-wrapped\";\nimport { __require as require$$11 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/sshpk/lib/errors.js?commonjs-wrapped\";\nimport { __require as require$$12 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/bcrypt-pbkdf/index.js?commonjs-wrapped\";\n\nvar sshPrivate;\nvar hasRequiredSshPrivate;\n\nfunction requireSshPrivate () {\n\tif (hasRequiredSshPrivate) return sshPrivate;\n\thasRequiredSshPrivate = 1;\n\t// Copyright 2015 Joyent, Inc.\n\n\tsshPrivate = {\n\t\tread: read,\n\t\treadSSHPrivate: readSSHPrivate,\n\t\twrite: write\n\t};\n\n\tvar assert = require$$0();\n\tvar asn1 = require$$1();\n\tvar Buffer = require$$2().Buffer;\n\tvar algs = require$$3();\n\tvar utils = require$$4();\n\tvar crypto = require$$5;\n\n\tvar Key = require$$6();\n\tvar PrivateKey = require$$7();\n\tvar pem = require$$8();\n\tvar rfc4253 = require$$9();\n\tvar SSHBuffer = require$$10();\n\tvar errors = require$$11();\n\n\tvar bcrypt;\n\n\tfunction read(buf, options) {\n\t\treturn (pem.read(buf, options));\n\t}\n\n\tvar MAGIC = 'openssh-key-v1';\n\n\tfunction readSSHPrivate(type, buf, options) {\n\t\tbuf = new SSHBuffer({buffer: buf});\n\n\t\tvar magic = buf.readCString();\n\t\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\t\tvar cipher = buf.readString();\n\t\tvar kdf = buf.readString();\n\t\tvar kdfOpts = buf.readBuffer();\n\n\t\tvar nkeys = buf.readInt();\n\t\tif (nkeys !== 1) {\n\t\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t\t    'multiple keys: this is unsupported.'));\n\t\t}\n\n\t\tvar pubKey = buf.readBuffer();\n\n\t\tif (type === 'public') {\n\t\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\t\treturn (rfc4253.read(pubKey));\n\t\t}\n\n\t\tvar privKeyBlob = buf.readBuffer();\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\t\tvar kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });\n\t\tswitch (kdf) {\n\t\tcase 'none':\n\t\t\tif (cipher !== 'none') {\n\t\t\t\tthrow (new Error('OpenSSH-format key uses KDF \"none\" ' +\n\t\t\t\t     'but specifies a cipher other than \"none\"'));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'bcrypt':\n\t\t\tvar salt = kdfOptsBuf.readBuffer();\n\t\t\tvar rounds = kdfOptsBuf.readInt();\n\t\t\tvar cinf = utils.opensshCipherInfo(cipher);\n\t\t\tif (bcrypt === undefined) {\n\t\t\t\tbcrypt = require$$12();\n\t\t\t}\n\n\t\t\tif (typeof (options.passphrase) === 'string') {\n\t\t\t\toptions.passphrase = Buffer.from(options.passphrase,\n\t\t\t\t    'utf-8');\n\t\t\t}\n\t\t\tif (!Buffer.isBuffer(options.passphrase)) {\n\t\t\t\tthrow (new errors.KeyEncryptedError(\n\t\t\t\t    options.filename, 'OpenSSH'));\n\t\t\t}\n\n\t\t\tvar pass = new Uint8Array(options.passphrase);\n\t\t\tvar salti = new Uint8Array(salt);\n\t\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t\t    out, out.length, rounds);\n\t\t\tif (res !== 0) {\n\t\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t\t    'failure, parameters invalid'));\n\t\t\t}\n\t\t\tout = Buffer.from(out);\n\t\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\t\t\tvar cipherStream = crypto.createDecipheriv(cinf.opensslName,\n\t\t\t    ckey, iv);\n\t\t\tcipherStream.setAutoPadding(false);\n\t\t\tvar chunk, chunks = [];\n\t\t\tcipherStream.once('error', function (e) {\n\t\t\t\tif (e.toString().indexOf('bad decrypt') !== -1) {\n\t\t\t\t\tthrow (new Error('Incorrect passphrase ' +\n\t\t\t\t\t    'supplied, could not decrypt key'));\n\t\t\t\t}\n\t\t\t\tthrow (e);\n\t\t\t});\n\t\t\tcipherStream.write(privKeyBlob);\n\t\t\tcipherStream.end();\n\t\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\t\tchunks.push(chunk);\n\t\t\tprivKeyBlob = Buffer.concat(chunks);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error(\n\t\t\t    'OpenSSH-format key uses unknown KDF \"' + kdf + '\"'));\n\t\t}\n\n\t\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\t\tvar checkInt1 = buf.readInt();\n\t\tvar checkInt2 = buf.readInt();\n\t\tif (checkInt1 !== checkInt2) {\n\t\t\tthrow (new Error('Incorrect passphrase supplied, could not ' +\n\t\t\t    'decrypt key'));\n\t\t}\n\n\t\tvar ret = {};\n\t\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\t\tbuf.skip(ret.consumed);\n\n\t\tvar comment = buf.readString();\n\t\tkey.comment = comment;\n\n\t\treturn (key);\n\t}\n\n\tfunction write(key, options) {\n\t\tvar pubKey;\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\tpubKey = key.toPublic();\n\t\telse\n\t\t\tpubKey = key;\n\n\t\tvar cipher = 'none';\n\t\tvar kdf = 'none';\n\t\tvar kdfopts = Buffer.alloc(0);\n\t\tvar cinf = { blockSize: 8 };\n\t\tvar passphrase;\n\t\tif (options !== undefined) {\n\t\t\tpassphrase = options.passphrase;\n\t\t\tif (typeof (passphrase) === 'string')\n\t\t\t\tpassphrase = Buffer.from(passphrase, 'utf-8');\n\t\t\tif (passphrase !== undefined) {\n\t\t\t\tassert.buffer(passphrase, 'options.passphrase');\n\t\t\t\tassert.optionalString(options.cipher, 'options.cipher');\n\t\t\t\tcipher = options.cipher;\n\t\t\t\tif (cipher === undefined)\n\t\t\t\t\tcipher = 'aes128-ctr';\n\t\t\t\tcinf = utils.opensshCipherInfo(cipher);\n\t\t\t\tkdf = 'bcrypt';\n\t\t\t}\n\t\t}\n\n\t\tvar privBuf;\n\t\tif (PrivateKey.isPrivateKey(key)) {\n\t\t\tprivBuf = new SSHBuffer({});\n\t\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\t\tprivBuf.writeInt(checkInt);\n\t\t\tprivBuf.writeInt(checkInt);\n\t\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\t\tprivBuf.writeString(key.comment || '');\n\n\t\t\tvar n = 1;\n\t\t\twhile (privBuf._offset % cinf.blockSize !== 0)\n\t\t\t\tprivBuf.writeChar(n++);\n\t\t\tprivBuf = privBuf.toBuffer();\n\t\t}\n\n\t\tswitch (kdf) {\n\t\tcase 'none':\n\t\t\tbreak;\n\t\tcase 'bcrypt':\n\t\t\tvar salt = crypto.randomBytes(16);\n\t\t\tvar rounds = 16;\n\t\t\tvar kdfssh = new SSHBuffer({});\n\t\t\tkdfssh.writeBuffer(salt);\n\t\t\tkdfssh.writeInt(rounds);\n\t\t\tkdfopts = kdfssh.toBuffer();\n\n\t\t\tif (bcrypt === undefined) {\n\t\t\t\tbcrypt = require$$12();\n\t\t\t}\n\t\t\tvar pass = new Uint8Array(passphrase);\n\t\t\tvar salti = new Uint8Array(salt);\n\t\t\t/* Use the pbkdf to derive both the key and the IV. */\n\t\t\tvar out = new Uint8Array(cinf.keySize + cinf.blockSize);\n\t\t\tvar res = bcrypt.pbkdf(pass, pass.length, salti, salti.length,\n\t\t\t    out, out.length, rounds);\n\t\t\tif (res !== 0) {\n\t\t\t\tthrow (new Error('bcrypt_pbkdf function returned ' +\n\t\t\t\t    'failure, parameters invalid'));\n\t\t\t}\n\t\t\tout = Buffer.from(out);\n\t\t\tvar ckey = out.slice(0, cinf.keySize);\n\t\t\tvar iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);\n\n\t\t\tvar cipherStream = crypto.createCipheriv(cinf.opensslName,\n\t\t\t    ckey, iv);\n\t\t\tcipherStream.setAutoPadding(false);\n\t\t\tvar chunk, chunks = [];\n\t\t\tcipherStream.once('error', function (e) {\n\t\t\t\tthrow (e);\n\t\t\t});\n\t\t\tcipherStream.write(privBuf);\n\t\t\tcipherStream.end();\n\t\t\twhile ((chunk = cipherStream.read()) !== null)\n\t\t\t\tchunks.push(chunk);\n\t\t\tprivBuf = Buffer.concat(chunks);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow (new Error('Unsupported kdf ' + kdf));\n\t\t}\n\n\t\tvar buf = new SSHBuffer({});\n\n\t\tbuf.writeCString(MAGIC);\n\t\tbuf.writeString(cipher);\t/* cipher */\n\t\tbuf.writeString(kdf);\t\t/* kdf */\n\t\tbuf.writeBuffer(kdfopts);\t/* kdfoptions */\n\n\t\tbuf.writeInt(1);\t\t/* nkeys */\n\t\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\t\tif (privBuf)\n\t\t\tbuf.writeBuffer(privBuf);\n\n\t\tbuf = buf.toBuffer();\n\n\t\tvar header;\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\theader = 'OPENSSH PRIVATE KEY';\n\t\telse\n\t\t\theader = 'OPENSSH PUBLIC KEY';\n\n\t\tvar tmp = buf.toString('base64');\n\t\tvar len = tmp.length + (tmp.length / 70) +\n\t\t    18 + 16 + header.length*2 + 10;\n\t\tbuf = Buffer.alloc(len);\n\t\tvar o = 0;\n\t\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\t\tfor (var i = 0; i < tmp.length; ) {\n\t\t\tvar limit = i + 70;\n\t\t\tif (limit > tmp.length)\n\t\t\t\tlimit = tmp.length;\n\t\t\to += buf.write(tmp.slice(i, limit), o);\n\t\t\tbuf[o++] = 10;\n\t\t\ti = limit;\n\t\t}\n\t\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\t\treturn (buf.slice(0, o));\n\t}\n\treturn sshPrivate;\n}\n\nexport { requireSshPrivate as __require };","start":1667202984014,"end":1667202985001,"order":"normal"}]}
