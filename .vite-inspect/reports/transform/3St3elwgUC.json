{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/cookie.js","transforms":[{"name":"vite:load-fallback","result":"/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\nvar net = require('net');\nvar urlParse = require('url').parse;\nvar util = require('util');\nvar pubsuffix = require('./pubsuffix-psl');\nvar Store = require('./store').Store;\nvar MemoryCookieStore = require('./memstore').MemoryCookieStore;\nvar pathMatch = require('./pathMatch').pathMatch;\nvar VERSION = require('./version');\n\nvar punycode;\ntry {\n  punycode = require('punycode');\n} catch(e) {\n  console.warn(\"tough-cookie: can't load punycode; won't use punycode for domain normalization\");\n}\n\n// From RFC6265 S4.1.1\n// note that it excludes \\x3B \";\"\nvar COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\n\nvar CONTROL_CHARS = /[\\x00-\\x1F]/;\n\n// From Chromium // '\\r', '\\n' and '\\0' should be treated as a terminator in\n// the \"relaxed\" mode, see:\n// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60\nvar TERMINATORS = ['\\n', '\\r', '\\0'];\n\n// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or \";\"'\n// Note ';' is \\x3B\nvar PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\n\n// date-time parsing constants (RFC6265 S5.1.1)\n\nvar DATE_DELIM = /[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]/;\n\nvar MONTH_TO_NUM = {\n  jan:0, feb:1, mar:2, apr:3, may:4, jun:5,\n  jul:6, aug:7, sep:8, oct:9, nov:10, dec:11\n};\nvar NUM_TO_MONTH = [\n  'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'\n];\nvar NUM_TO_DAY = [\n  'Sun','Mon','Tue','Wed','Thu','Fri','Sat'\n];\n\nvar MAX_TIME = 2147483647000; // 31-bit max\nvar MIN_TIME = 0; // 31-bit min\n\n/*\n * Parses a Natural number (i.e., non-negative integer) with either the\n *    <min>*<max>DIGIT ( non-digit *OCTET )\n * or\n *    <min>*<max>DIGIT\n * grammar (RFC6265 S5.1.1).\n *\n * The \"trailingOK\" boolean controls if the grammar accepts a\n * \"( non-digit *OCTET )\" trailer.\n */\nfunction parseDigits(token, minDigits, maxDigits, trailingOK) {\n  var count = 0;\n  while (count < token.length) {\n    var c = token.charCodeAt(count);\n    // \"non-digit = %x00-2F / %x3A-FF\"\n    if (c <= 0x2F || c >= 0x3A) {\n      break;\n    }\n    count++;\n  }\n\n  // constrain to a minimum and maximum number of digits.\n  if (count < minDigits || count > maxDigits) {\n    return null;\n  }\n\n  if (!trailingOK && count != token.length) {\n    return null;\n  }\n\n  return parseInt(token.substr(0,count), 10);\n}\n\nfunction parseTime(token) {\n  var parts = token.split(':');\n  var result = [0,0,0];\n\n  /* RF6256 S5.1.1:\n   *      time            = hms-time ( non-digit *OCTET )\n   *      hms-time        = time-field \":\" time-field \":\" time-field\n   *      time-field      = 1*2DIGIT\n   */\n\n  if (parts.length !== 3) {\n    return null;\n  }\n\n  for (var i = 0; i < 3; i++) {\n    // \"time-field\" must be strictly \"1*2DIGIT\", HOWEVER, \"hms-time\" can be\n    // followed by \"( non-digit *OCTET )\" so therefore the last time-field can\n    // have a trailer\n    var trailingOK = (i == 2);\n    var num = parseDigits(parts[i], 1, 2, trailingOK);\n    if (num === null) {\n      return null;\n    }\n    result[i] = num;\n  }\n\n  return result;\n}\n\nfunction parseMonth(token) {\n  token = String(token).substr(0,3).toLowerCase();\n  var num = MONTH_TO_NUM[token];\n  return num >= 0 ? num : null;\n}\n\n/*\n * RFC6265 S5.1.1 date parser (see RFC for full grammar)\n */\nfunction parseDate(str) {\n  if (!str) {\n    return;\n  }\n\n  /* RFC6265 S5.1.1:\n   * 2. Process each date-token sequentially in the order the date-tokens\n   * appear in the cookie-date\n   */\n  var tokens = str.split(DATE_DELIM);\n  if (!tokens) {\n    return;\n  }\n\n  var hour = null;\n  var minute = null;\n  var second = null;\n  var dayOfMonth = null;\n  var month = null;\n  var year = null;\n\n  for (var i=0; i<tokens.length; i++) {\n    var token = tokens[i].trim();\n    if (!token.length) {\n      continue;\n    }\n\n    var result;\n\n    /* 2.1. If the found-time flag is not set and the token matches the time\n     * production, set the found-time flag and set the hour- value,\n     * minute-value, and second-value to the numbers denoted by the digits in\n     * the date-token, respectively.  Skip the remaining sub-steps and continue\n     * to the next date-token.\n     */\n    if (second === null) {\n      result = parseTime(token);\n      if (result) {\n        hour = result[0];\n        minute = result[1];\n        second = result[2];\n        continue;\n      }\n    }\n\n    /* 2.2. If the found-day-of-month flag is not set and the date-token matches\n     * the day-of-month production, set the found-day-of- month flag and set\n     * the day-of-month-value to the number denoted by the date-token.  Skip\n     * the remaining sub-steps and continue to the next date-token.\n     */\n    if (dayOfMonth === null) {\n      // \"day-of-month = 1*2DIGIT ( non-digit *OCTET )\"\n      result = parseDigits(token, 1, 2, true);\n      if (result !== null) {\n        dayOfMonth = result;\n        continue;\n      }\n    }\n\n    /* 2.3. If the found-month flag is not set and the date-token matches the\n     * month production, set the found-month flag and set the month-value to\n     * the month denoted by the date-token.  Skip the remaining sub-steps and\n     * continue to the next date-token.\n     */\n    if (month === null) {\n      result = parseMonth(token);\n      if (result !== null) {\n        month = result;\n        continue;\n      }\n    }\n\n    /* 2.4. If the found-year flag is not set and the date-token matches the\n     * year production, set the found-year flag and set the year-value to the\n     * number denoted by the date-token.  Skip the remaining sub-steps and\n     * continue to the next date-token.\n     */\n    if (year === null) {\n      // \"year = 2*4DIGIT ( non-digit *OCTET )\"\n      result = parseDigits(token, 2, 4, true);\n      if (result !== null) {\n        year = result;\n        /* From S5.1.1:\n         * 3.  If the year-value is greater than or equal to 70 and less\n         * than or equal to 99, increment the year-value by 1900.\n         * 4.  If the year-value is greater than or equal to 0 and less\n         * than or equal to 69, increment the year-value by 2000.\n         */\n        if (year >= 70 && year <= 99) {\n          year += 1900;\n        } else if (year >= 0 && year <= 69) {\n          year += 2000;\n        }\n      }\n    }\n  }\n\n  /* RFC 6265 S5.1.1\n   * \"5. Abort these steps and fail to parse the cookie-date if:\n   *     *  at least one of the found-day-of-month, found-month, found-\n   *        year, or found-time flags is not set,\n   *     *  the day-of-month-value is less than 1 or greater than 31,\n   *     *  the year-value is less than 1601,\n   *     *  the hour-value is greater than 23,\n   *     *  the minute-value is greater than 59, or\n   *     *  the second-value is greater than 59.\n   *     (Note that leap seconds cannot be represented in this syntax.)\"\n   *\n   * So, in order as above:\n   */\n  if (\n    dayOfMonth === null || month === null || year === null || second === null ||\n    dayOfMonth < 1 || dayOfMonth > 31 ||\n    year < 1601 ||\n    hour > 23 ||\n    minute > 59 ||\n    second > 59\n  ) {\n    return;\n  }\n\n  return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));\n}\n\nfunction formatDate(date) {\n  var d = date.getUTCDate(); d = d >= 10 ? d : '0'+d;\n  var h = date.getUTCHours(); h = h >= 10 ? h : '0'+h;\n  var m = date.getUTCMinutes(); m = m >= 10 ? m : '0'+m;\n  var s = date.getUTCSeconds(); s = s >= 10 ? s : '0'+s;\n  return NUM_TO_DAY[date.getUTCDay()] + ', ' +\n    d+' '+ NUM_TO_MONTH[date.getUTCMonth()] +' '+ date.getUTCFullYear() +' '+\n    h+':'+m+':'+s+' GMT';\n}\n\n// S5.1.2 Canonicalized Host Names\nfunction canonicalDomain(str) {\n  if (str == null) {\n    return null;\n  }\n  str = str.trim().replace(/^\\./,''); // S4.1.2.3 & S5.2.3: ignore leading .\n\n  // convert to IDN if any non-ASCII characters\n  if (punycode && /[^\\u0001-\\u007f]/.test(str)) {\n    str = punycode.toASCII(str);\n  }\n\n  return str.toLowerCase();\n}\n\n// S5.1.3 Domain Matching\nfunction domainMatch(str, domStr, canonicalize) {\n  if (str == null || domStr == null) {\n    return null;\n  }\n  if (canonicalize !== false) {\n    str = canonicalDomain(str);\n    domStr = canonicalDomain(domStr);\n  }\n\n  /*\n   * \"The domain string and the string are identical. (Note that both the\n   * domain string and the string will have been canonicalized to lower case at\n   * this point)\"\n   */\n  if (str == domStr) {\n    return true;\n  }\n\n  /* \"All of the following [three] conditions hold:\" (order adjusted from the RFC) */\n\n  /* \"* The string is a host name (i.e., not an IP address).\" */\n  if (net.isIP(str)) {\n    return false;\n  }\n\n  /* \"* The domain string is a suffix of the string\" */\n  var idx = str.indexOf(domStr);\n  if (idx <= 0) {\n    return false; // it's a non-match (-1) or prefix (0)\n  }\n\n  // e.g \"a.b.c\".indexOf(\"b.c\") === 2\n  // 5 === 3+2\n  if (str.length !== domStr.length + idx) { // it's not a suffix\n    return false;\n  }\n\n  /* \"* The last character of the string that is not included in the domain\n  * string is a %x2E (\".\") character.\" */\n  if (str.substr(idx-1,1) !== '.') {\n    return false;\n  }\n\n  return true;\n}\n\n\n// RFC6265 S5.1.4 Paths and Path-Match\n\n/*\n * \"The user agent MUST use an algorithm equivalent to the following algorithm\n * to compute the default-path of a cookie:\"\n *\n * Assumption: the path (and not query part or absolute uri) is passed in.\n */\nfunction defaultPath(path) {\n  // \"2. If the uri-path is empty or if the first character of the uri-path is not\n  // a %x2F (\"/\") character, output %x2F (\"/\") and skip the remaining steps.\n  if (!path || path.substr(0,1) !== \"/\") {\n    return \"/\";\n  }\n\n  // \"3. If the uri-path contains no more than one %x2F (\"/\") character, output\n  // %x2F (\"/\") and skip the remaining step.\"\n  if (path === \"/\") {\n    return path;\n  }\n\n  var rightSlash = path.lastIndexOf(\"/\");\n  if (rightSlash === 0) {\n    return \"/\";\n  }\n\n  // \"4. Output the characters of the uri-path from the first character up to,\n  // but not including, the right-most %x2F (\"/\").\"\n  return path.slice(0, rightSlash);\n}\n\nfunction trimTerminator(str) {\n  for (var t = 0; t < TERMINATORS.length; t++) {\n    var terminatorIdx = str.indexOf(TERMINATORS[t]);\n    if (terminatorIdx !== -1) {\n      str = str.substr(0,terminatorIdx);\n    }\n  }\n\n  return str;\n}\n\nfunction parseCookiePair(cookiePair, looseMode) {\n  cookiePair = trimTerminator(cookiePair);\n\n  var firstEq = cookiePair.indexOf('=');\n  if (looseMode) {\n    if (firstEq === 0) { // '=' is immediately at start\n      cookiePair = cookiePair.substr(1);\n      firstEq = cookiePair.indexOf('='); // might still need to split on '='\n    }\n  } else { // non-loose mode\n    if (firstEq <= 0) { // no '=' or is at start\n      return; // needs to have non-empty \"cookie-name\"\n    }\n  }\n\n  var cookieName, cookieValue;\n  if (firstEq <= 0) {\n    cookieName = \"\";\n    cookieValue = cookiePair.trim();\n  } else {\n    cookieName = cookiePair.substr(0, firstEq).trim();\n    cookieValue = cookiePair.substr(firstEq+1).trim();\n  }\n\n  if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n    return;\n  }\n\n  var c = new Cookie();\n  c.key = cookieName;\n  c.value = cookieValue;\n  return c;\n}\n\nfunction parse(str, options) {\n  if (!options || typeof options !== 'object') {\n    options = {};\n  }\n  str = str.trim();\n\n  // We use a regex to parse the \"name-value-pair\" part of S5.2\n  var firstSemi = str.indexOf(';'); // S5.2 step 1\n  var cookiePair = (firstSemi === -1) ? str : str.substr(0, firstSemi);\n  var c = parseCookiePair(cookiePair, !!options.loose);\n  if (!c) {\n    return;\n  }\n\n  if (firstSemi === -1) {\n    return c;\n  }\n\n  // S5.2.3 \"unparsed-attributes consist of the remainder of the set-cookie-string\n  // (including the %x3B (\";\") in question).\" plus later on in the same section\n  // \"discard the first \";\" and trim\".\n  var unparsed = str.slice(firstSemi + 1).trim();\n\n  // \"If the unparsed-attributes string is empty, skip the rest of these\n  // steps.\"\n  if (unparsed.length === 0) {\n    return c;\n  }\n\n  /*\n   * S5.2 says that when looping over the items \"[p]rocess the attribute-name\n   * and attribute-value according to the requirements in the following\n   * subsections\" for every item.  Plus, for many of the individual attributes\n   * in S5.3 it says to use the \"attribute-value of the last attribute in the\n   * cookie-attribute-list\".  Therefore, in this implementation, we overwrite\n   * the previous value.\n   */\n  var cookie_avs = unparsed.split(';');\n  while (cookie_avs.length) {\n    var av = cookie_avs.shift().trim();\n    if (av.length === 0) { // happens if \";;\" appears\n      continue;\n    }\n    var av_sep = av.indexOf('=');\n    var av_key, av_value;\n\n    if (av_sep === -1) {\n      av_key = av;\n      av_value = null;\n    } else {\n      av_key = av.substr(0,av_sep);\n      av_value = av.substr(av_sep+1);\n    }\n\n    av_key = av_key.trim().toLowerCase();\n\n    if (av_value) {\n      av_value = av_value.trim();\n    }\n\n    switch(av_key) {\n    case 'expires': // S5.2.1\n      if (av_value) {\n        var exp = parseDate(av_value);\n        // \"If the attribute-value failed to parse as a cookie date, ignore the\n        // cookie-av.\"\n        if (exp) {\n          // over and underflow not realistically a concern: V8's getTime() seems to\n          // store something larger than a 32-bit time_t (even with 32-bit node)\n          c.expires = exp;\n        }\n      }\n      break;\n\n    case 'max-age': // S5.2.2\n      if (av_value) {\n        // \"If the first character of the attribute-value is not a DIGIT or a \"-\"\n        // character ...[or]... If the remainder of attribute-value contains a\n        // non-DIGIT character, ignore the cookie-av.\"\n        if (/^-?[0-9]+$/.test(av_value)) {\n          var delta = parseInt(av_value, 10);\n          // \"If delta-seconds is less than or equal to zero (0), let expiry-time\n          // be the earliest representable date and time.\"\n          c.setMaxAge(delta);\n        }\n      }\n      break;\n\n    case 'domain': // S5.2.3\n      // \"If the attribute-value is empty, the behavior is undefined.  However,\n      // the user agent SHOULD ignore the cookie-av entirely.\"\n      if (av_value) {\n        // S5.2.3 \"Let cookie-domain be the attribute-value without the leading %x2E\n        // (\".\") character.\"\n        var domain = av_value.trim().replace(/^\\./, '');\n        if (domain) {\n          // \"Convert the cookie-domain to lower case.\"\n          c.domain = domain.toLowerCase();\n        }\n      }\n      break;\n\n    case 'path': // S5.2.4\n      /*\n       * \"If the attribute-value is empty or if the first character of the\n       * attribute-value is not %x2F (\"/\"):\n       *   Let cookie-path be the default-path.\n       * Otherwise:\n       *   Let cookie-path be the attribute-value.\"\n       *\n       * We'll represent the default-path as null since it depends on the\n       * context of the parsing.\n       */\n      c.path = av_value && av_value[0] === \"/\" ? av_value : null;\n      break;\n\n    case 'secure': // S5.2.5\n      /*\n       * \"If the attribute-name case-insensitively matches the string \"Secure\",\n       * the user agent MUST append an attribute to the cookie-attribute-list\n       * with an attribute-name of Secure and an empty attribute-value.\"\n       */\n      c.secure = true;\n      break;\n\n    case 'httponly': // S5.2.6 -- effectively the same as 'secure'\n      c.httpOnly = true;\n      break;\n\n    default:\n      c.extensions = c.extensions || [];\n      c.extensions.push(av);\n      break;\n    }\n  }\n\n  return c;\n}\n\n// avoid the V8 deoptimization monster!\nfunction jsonParse(str) {\n  var obj;\n  try {\n    obj = JSON.parse(str);\n  } catch (e) {\n    return e;\n  }\n  return obj;\n}\n\nfunction fromJSON(str) {\n  if (!str) {\n    return null;\n  }\n\n  var obj;\n  if (typeof str === 'string') {\n    obj = jsonParse(str);\n    if (obj instanceof Error) {\n      return null;\n    }\n  } else {\n    // assume it's an Object\n    obj = str;\n  }\n\n  var c = new Cookie();\n  for (var i=0; i<Cookie.serializableProperties.length; i++) {\n    var prop = Cookie.serializableProperties[i];\n    if (obj[prop] === undefined ||\n        obj[prop] === Cookie.prototype[prop])\n    {\n      continue; // leave as prototype default\n    }\n\n    if (prop === 'expires' ||\n        prop === 'creation' ||\n        prop === 'lastAccessed')\n    {\n      if (obj[prop] === null) {\n        c[prop] = null;\n      } else {\n        c[prop] = obj[prop] == \"Infinity\" ?\n          \"Infinity\" : new Date(obj[prop]);\n      }\n    } else {\n      c[prop] = obj[prop];\n    }\n  }\n\n  return c;\n}\n\n/* Section 5.4 part 2:\n * \"*  Cookies with longer paths are listed before cookies with\n *     shorter paths.\n *\n *  *  Among cookies that have equal-length path fields, cookies with\n *     earlier creation-times are listed before cookies with later\n *     creation-times.\"\n */\n\nfunction cookieCompare(a,b) {\n  var cmp = 0;\n\n  // descending for length: b CMP a\n  var aPathLen = a.path ? a.path.length : 0;\n  var bPathLen = b.path ? b.path.length : 0;\n  cmp = bPathLen - aPathLen;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  // ascending for time: a CMP b\n  var aTime = a.creation ? a.creation.getTime() : MAX_TIME;\n  var bTime = b.creation ? b.creation.getTime() : MAX_TIME;\n  cmp = aTime - bTime;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  // break ties for the same millisecond (precision of JavaScript's clock)\n  cmp = a.creationIndex - b.creationIndex;\n\n  return cmp;\n}\n\n// Gives the permutation of all possible pathMatch()es of a given path. The\n// array is in longest-to-shortest order.  Handy for indexing.\nfunction permutePath(path) {\n  if (path === '/') {\n    return ['/'];\n  }\n  if (path.lastIndexOf('/') === path.length-1) {\n    path = path.substr(0,path.length-1);\n  }\n  var permutations = [path];\n  while (path.length > 1) {\n    var lindex = path.lastIndexOf('/');\n    if (lindex === 0) {\n      break;\n    }\n    path = path.substr(0,lindex);\n    permutations.push(path);\n  }\n  permutations.push('/');\n  return permutations;\n}\n\nfunction getCookieContext(url) {\n  if (url instanceof Object) {\n    return url;\n  }\n  // NOTE: decodeURI will throw on malformed URIs (see GH-32).\n  // Therefore, we will just skip decoding for such URIs.\n  try {\n    url = decodeURI(url);\n  }\n  catch(err) {\n    // Silently swallow error\n  }\n\n  return urlParse(url);\n}\n\nfunction Cookie(options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function(prop) {\n    if (Cookie.prototype.hasOwnProperty(prop) &&\n        Cookie.prototype[prop] !== options[prop] &&\n        prop.substr(0,1) !== '_')\n    {\n      this[prop] = options[prop];\n    }\n  }, this);\n\n  this.creation = this.creation || new Date();\n\n  // used to break creation ties in cookieCompare():\n  Object.defineProperty(this, 'creationIndex', {\n    configurable: false,\n    enumerable: false, // important for assert.deepEqual checks\n    writable: true,\n    value: ++Cookie.cookiesCreated\n  });\n}\n\nCookie.cookiesCreated = 0; // incremented each time a cookie is created\n\nCookie.parse = parse;\nCookie.fromJSON = fromJSON;\n\nCookie.prototype.key = \"\";\nCookie.prototype.value = \"\";\n\n// the order in which the RFC has them:\nCookie.prototype.expires = \"Infinity\"; // coerces to literal Infinity\nCookie.prototype.maxAge = null; // takes precedence over expires for TTL\nCookie.prototype.domain = null;\nCookie.prototype.path = null;\nCookie.prototype.secure = false;\nCookie.prototype.httpOnly = false;\nCookie.prototype.extensions = null;\n\n// set by the CookieJar:\nCookie.prototype.hostOnly = null; // boolean when set\nCookie.prototype.pathIsDefault = null; // boolean when set\nCookie.prototype.creation = null; // Date when set; defaulted by Cookie.parse\nCookie.prototype.lastAccessed = null; // Date when set\nObject.defineProperty(Cookie.prototype, 'creationIndex', {\n  configurable: true,\n  enumerable: false,\n  writable: true,\n  value: 0\n});\n\nCookie.serializableProperties = Object.keys(Cookie.prototype)\n  .filter(function(prop) {\n    return !(\n      Cookie.prototype[prop] instanceof Function ||\n      prop === 'creationIndex' ||\n      prop.substr(0,1) === '_'\n    );\n  });\n\nCookie.prototype.inspect = function inspect() {\n  var now = Date.now();\n  return 'Cookie=\"'+this.toString() +\n    '; hostOnly='+(this.hostOnly != null ? this.hostOnly : '?') +\n    '; aAge='+(this.lastAccessed ? (now-this.lastAccessed.getTime())+'ms' : '?') +\n    '; cAge='+(this.creation ? (now-this.creation.getTime())+'ms' : '?') +\n    '\"';\n};\n\n// Use the new custom inspection symbol to add the custom inspect function if\n// available.\nif (util.inspect.custom) {\n  Cookie.prototype[util.inspect.custom] = Cookie.prototype.inspect;\n}\n\nCookie.prototype.toJSON = function() {\n  var obj = {};\n\n  var props = Cookie.serializableProperties;\n  for (var i=0; i<props.length; i++) {\n    var prop = props[i];\n    if (this[prop] === Cookie.prototype[prop]) {\n      continue; // leave as prototype default\n    }\n\n    if (prop === 'expires' ||\n        prop === 'creation' ||\n        prop === 'lastAccessed')\n    {\n      if (this[prop] === null) {\n        obj[prop] = null;\n      } else {\n        obj[prop] = this[prop] == \"Infinity\" ? // intentionally not ===\n          \"Infinity\" : this[prop].toISOString();\n      }\n    } else if (prop === 'maxAge') {\n      if (this[prop] !== null) {\n        // again, intentionally not ===\n        obj[prop] = (this[prop] == Infinity || this[prop] == -Infinity) ?\n          this[prop].toString() : this[prop];\n      }\n    } else {\n      if (this[prop] !== Cookie.prototype[prop]) {\n        obj[prop] = this[prop];\n      }\n    }\n  }\n\n  return obj;\n};\n\nCookie.prototype.clone = function() {\n  return fromJSON(this.toJSON());\n};\n\nCookie.prototype.validate = function validate() {\n  if (!COOKIE_OCTETS.test(this.value)) {\n    return false;\n  }\n  if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {\n    return false;\n  }\n  if (this.maxAge != null && this.maxAge <= 0) {\n    return false; // \"Max-Age=\" non-zero-digit *DIGIT\n  }\n  if (this.path != null && !PATH_VALUE.test(this.path)) {\n    return false;\n  }\n\n  var cdomain = this.cdomain();\n  if (cdomain) {\n    if (cdomain.match(/\\.$/)) {\n      return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this\n    }\n    var suffix = pubsuffix.getPublicSuffix(cdomain);\n    if (suffix == null) { // it's a public suffix\n      return false;\n    }\n  }\n  return true;\n};\n\nCookie.prototype.setExpires = function setExpires(exp) {\n  if (exp instanceof Date) {\n    this.expires = exp;\n  } else {\n    this.expires = parseDate(exp) || \"Infinity\";\n  }\n};\n\nCookie.prototype.setMaxAge = function setMaxAge(age) {\n  if (age === Infinity || age === -Infinity) {\n    this.maxAge = age.toString(); // so JSON.stringify() works\n  } else {\n    this.maxAge = age;\n  }\n};\n\n// gives Cookie header format\nCookie.prototype.cookieString = function cookieString() {\n  var val = this.value;\n  if (val == null) {\n    val = '';\n  }\n  if (this.key === '') {\n    return val;\n  }\n  return this.key+'='+val;\n};\n\n// gives Set-Cookie header format\nCookie.prototype.toString = function toString() {\n  var str = this.cookieString();\n\n  if (this.expires != Infinity) {\n    if (this.expires instanceof Date) {\n      str += '; Expires='+formatDate(this.expires);\n    } else {\n      str += '; Expires='+this.expires;\n    }\n  }\n\n  if (this.maxAge != null && this.maxAge != Infinity) {\n    str += '; Max-Age='+this.maxAge;\n  }\n\n  if (this.domain && !this.hostOnly) {\n    str += '; Domain='+this.domain;\n  }\n  if (this.path) {\n    str += '; Path='+this.path;\n  }\n\n  if (this.secure) {\n    str += '; Secure';\n  }\n  if (this.httpOnly) {\n    str += '; HttpOnly';\n  }\n  if (this.extensions) {\n    this.extensions.forEach(function(ext) {\n      str += '; '+ext;\n    });\n  }\n\n  return str;\n};\n\n// TTL() partially replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere)\n// S5.3 says to give the \"latest representable date\" for which we use Infinity\n// For \"expired\" we use 0\nCookie.prototype.TTL = function TTL(now) {\n  /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires\n   * attribute, the Max-Age attribute has precedence and controls the\n   * expiration date of the cookie.\n   * (Concurs with S5.3 step 3)\n   */\n  if (this.maxAge != null) {\n    return this.maxAge<=0 ? 0 : this.maxAge*1000;\n  }\n\n  var expires = this.expires;\n  if (expires != Infinity) {\n    if (!(expires instanceof Date)) {\n      expires = parseDate(expires) || Infinity;\n    }\n\n    if (expires == Infinity) {\n      return Infinity;\n    }\n\n    return expires.getTime() - (now || Date.now());\n  }\n\n  return Infinity;\n};\n\n// expiryTime() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere)\nCookie.prototype.expiryTime = function expiryTime(now) {\n  if (this.maxAge != null) {\n    var relativeTo = now || this.creation || new Date();\n    var age = (this.maxAge <= 0) ? -Infinity : this.maxAge*1000;\n    return relativeTo.getTime() + age;\n  }\n\n  if (this.expires == Infinity) {\n    return Infinity;\n  }\n  return this.expires.getTime();\n};\n\n// expiryDate() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n// elsewhere), except it returns a Date\nCookie.prototype.expiryDate = function expiryDate(now) {\n  var millisec = this.expiryTime(now);\n  if (millisec == Infinity) {\n    return new Date(MAX_TIME);\n  } else if (millisec == -Infinity) {\n    return new Date(MIN_TIME);\n  } else {\n    return new Date(millisec);\n  }\n};\n\n// This replaces the \"persistent-flag\" parts of S5.3 step 3\nCookie.prototype.isPersistent = function isPersistent() {\n  return (this.maxAge != null || this.expires != Infinity);\n};\n\n// Mostly S5.1.2 and S5.2.3:\nCookie.prototype.cdomain =\nCookie.prototype.canonicalizedDomain = function canonicalizedDomain() {\n  if (this.domain == null) {\n    return null;\n  }\n  return canonicalDomain(this.domain);\n};\n\nfunction CookieJar(store, options) {\n  if (typeof options === \"boolean\") {\n    options = {rejectPublicSuffixes: options};\n  } else if (options == null) {\n    options = {};\n  }\n  if (options.rejectPublicSuffixes != null) {\n    this.rejectPublicSuffixes = options.rejectPublicSuffixes;\n  }\n  if (options.looseMode != null) {\n    this.enableLooseMode = options.looseMode;\n  }\n\n  if (!store) {\n    store = new MemoryCookieStore();\n  }\n  this.store = store;\n}\nCookieJar.prototype.store = null;\nCookieJar.prototype.rejectPublicSuffixes = true;\nCookieJar.prototype.enableLooseMode = false;\nvar CAN_BE_SYNC = [];\n\nCAN_BE_SYNC.push('setCookie');\nCookieJar.prototype.setCookie = function(cookie, url, options, cb) {\n  var err;\n  var context = getCookieContext(url);\n  if (options instanceof Function) {\n    cb = options;\n    options = {};\n  }\n\n  var host = canonicalDomain(context.hostname);\n  var loose = this.enableLooseMode;\n  if (options.loose != null) {\n    loose = options.loose;\n  }\n\n  // S5.3 step 1\n  if (!(cookie instanceof Cookie)) {\n    cookie = Cookie.parse(cookie, { loose: loose });\n  }\n  if (!cookie) {\n    err = new Error(\"Cookie failed to parse\");\n    return cb(options.ignoreError ? null : err);\n  }\n\n  // S5.3 step 2\n  var now = options.now || new Date(); // will assign later to save effort in the face of errors\n\n  // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()\n\n  // S5.3 step 4: NOOP; domain is null by default\n\n  // S5.3 step 5: public suffixes\n  if (this.rejectPublicSuffixes && cookie.domain) {\n    var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());\n    if (suffix == null) { // e.g. \"com\"\n      err = new Error(\"Cookie has domain set to a public suffix\");\n      return cb(options.ignoreError ? null : err);\n    }\n  }\n\n  // S5.3 step 6:\n  if (cookie.domain) {\n    if (!domainMatch(host, cookie.cdomain(), false)) {\n      err = new Error(\"Cookie not in this host's domain. Cookie:\"+cookie.cdomain()+\" Request:\"+host);\n      return cb(options.ignoreError ? null : err);\n    }\n\n    if (cookie.hostOnly == null) { // don't reset if already set\n      cookie.hostOnly = false;\n    }\n\n  } else {\n    cookie.hostOnly = true;\n    cookie.domain = host;\n  }\n\n  //S5.2.4 If the attribute-value is empty or if the first character of the\n  //attribute-value is not %x2F (\"/\"):\n  //Let cookie-path be the default-path.\n  if (!cookie.path || cookie.path[0] !== '/') {\n    cookie.path = defaultPath(context.pathname);\n    cookie.pathIsDefault = true;\n  }\n\n  // S5.3 step 8: NOOP; secure attribute\n  // S5.3 step 9: NOOP; httpOnly attribute\n\n  // S5.3 step 10\n  if (options.http === false && cookie.httpOnly) {\n    err = new Error(\"Cookie is HttpOnly and this isn't an HTTP API\");\n    return cb(options.ignoreError ? null : err);\n  }\n\n  var store = this.store;\n\n  if (!store.updateCookie) {\n    store.updateCookie = function(oldCookie, newCookie, cb) {\n      this.putCookie(newCookie, cb);\n    };\n  }\n\n  function withCookie(err, oldCookie) {\n    if (err) {\n      return cb(err);\n    }\n\n    var next = function(err) {\n      if (err) {\n        return cb(err);\n      } else {\n        cb(null, cookie);\n      }\n    };\n\n    if (oldCookie) {\n      // S5.3 step 11 - \"If the cookie store contains a cookie with the same name,\n      // domain, and path as the newly created cookie:\"\n      if (options.http === false && oldCookie.httpOnly) { // step 11.2\n        err = new Error(\"old Cookie is HttpOnly and this isn't an HTTP API\");\n        return cb(options.ignoreError ? null : err);\n      }\n      cookie.creation = oldCookie.creation; // step 11.3\n      cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker\n      cookie.lastAccessed = now;\n      // Step 11.4 (delete cookie) is implied by just setting the new one:\n      store.updateCookie(oldCookie, cookie, next); // step 12\n\n    } else {\n      cookie.creation = cookie.lastAccessed = now;\n      store.putCookie(cookie, next); // step 12\n    }\n  }\n\n  store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);\n};\n\n// RFC6365 S5.4\nCAN_BE_SYNC.push('getCookies');\nCookieJar.prototype.getCookies = function(url, options, cb) {\n  var context = getCookieContext(url);\n  if (options instanceof Function) {\n    cb = options;\n    options = {};\n  }\n\n  var host = canonicalDomain(context.hostname);\n  var path = context.pathname || '/';\n\n  var secure = options.secure;\n  if (secure == null && context.protocol &&\n      (context.protocol == 'https:' || context.protocol == 'wss:'))\n  {\n    secure = true;\n  }\n\n  var http = options.http;\n  if (http == null) {\n    http = true;\n  }\n\n  var now = options.now || Date.now();\n  var expireCheck = options.expire !== false;\n  var allPaths = !!options.allPaths;\n  var store = this.store;\n\n  function matchingCookie(c) {\n    // \"Either:\n    //   The cookie's host-only-flag is true and the canonicalized\n    //   request-host is identical to the cookie's domain.\n    // Or:\n    //   The cookie's host-only-flag is false and the canonicalized\n    //   request-host domain-matches the cookie's domain.\"\n    if (c.hostOnly) {\n      if (c.domain != host) {\n        return false;\n      }\n    } else {\n      if (!domainMatch(host, c.domain, false)) {\n        return false;\n      }\n    }\n\n    // \"The request-uri's path path-matches the cookie's path.\"\n    if (!allPaths && !pathMatch(path, c.path)) {\n      return false;\n    }\n\n    // \"If the cookie's secure-only-flag is true, then the request-uri's\n    // scheme must denote a \"secure\" protocol\"\n    if (c.secure && !secure) {\n      return false;\n    }\n\n    // \"If the cookie's http-only-flag is true, then exclude the cookie if the\n    // cookie-string is being generated for a \"non-HTTP\" API\"\n    if (c.httpOnly && !http) {\n      return false;\n    }\n\n    // deferred from S5.3\n    // non-RFC: allow retention of expired cookies by choice\n    if (expireCheck && c.expiryTime() <= now) {\n      store.removeCookie(c.domain, c.path, c.key, function(){}); // result ignored\n      return false;\n    }\n\n    return true;\n  }\n\n  store.findCookies(host, allPaths ? null : path, function(err,cookies) {\n    if (err) {\n      return cb(err);\n    }\n\n    cookies = cookies.filter(matchingCookie);\n\n    // sorting of S5.4 part 2\n    if (options.sort !== false) {\n      cookies = cookies.sort(cookieCompare);\n    }\n\n    // S5.4 part 3\n    var now = new Date();\n    cookies.forEach(function(c) {\n      c.lastAccessed = now;\n    });\n    // TODO persist lastAccessed\n\n    cb(null,cookies);\n  });\n};\n\nCAN_BE_SYNC.push('getCookieString');\nCookieJar.prototype.getCookieString = function(/*..., cb*/) {\n  var args = Array.prototype.slice.call(arguments,0);\n  var cb = args.pop();\n  var next = function(err,cookies) {\n    if (err) {\n      cb(err);\n    } else {\n      cb(null, cookies\n        .sort(cookieCompare)\n        .map(function(c){\n          return c.cookieString();\n        })\n        .join('; '));\n    }\n  };\n  args.push(next);\n  this.getCookies.apply(this,args);\n};\n\nCAN_BE_SYNC.push('getSetCookieStrings');\nCookieJar.prototype.getSetCookieStrings = function(/*..., cb*/) {\n  var args = Array.prototype.slice.call(arguments,0);\n  var cb = args.pop();\n  var next = function(err,cookies) {\n    if (err) {\n      cb(err);\n    } else {\n      cb(null, cookies.map(function(c){\n        return c.toString();\n      }));\n    }\n  };\n  args.push(next);\n  this.getCookies.apply(this,args);\n};\n\nCAN_BE_SYNC.push('serialize');\nCookieJar.prototype.serialize = function(cb) {\n  var type = this.store.constructor.name;\n  if (type === 'Object') {\n    type = null;\n  }\n\n  // update README.md \"Serialization Format\" if you change this, please!\n  var serialized = {\n    // The version of tough-cookie that serialized this jar. Generally a good\n    // practice since future versions can make data import decisions based on\n    // known past behavior. When/if this matters, use `semver`.\n    version: 'tough-cookie@'+VERSION,\n\n    // add the store type, to make humans happy:\n    storeType: type,\n\n    // CookieJar configuration:\n    rejectPublicSuffixes: !!this.rejectPublicSuffixes,\n\n    // this gets filled from getAllCookies:\n    cookies: []\n  };\n\n  if (!(this.store.getAllCookies &&\n        typeof this.store.getAllCookies === 'function'))\n  {\n    return cb(new Error('store does not support getAllCookies and cannot be serialized'));\n  }\n\n  this.store.getAllCookies(function(err,cookies) {\n    if (err) {\n      return cb(err);\n    }\n\n    serialized.cookies = cookies.map(function(cookie) {\n      // convert to serialized 'raw' cookies\n      cookie = (cookie instanceof Cookie) ? cookie.toJSON() : cookie;\n\n      // Remove the index so new ones get assigned during deserialization\n      delete cookie.creationIndex;\n\n      return cookie;\n    });\n\n    return cb(null, serialized);\n  });\n};\n\n// well-known name that JSON.stringify calls\nCookieJar.prototype.toJSON = function() {\n  return this.serializeSync();\n};\n\n// use the class method CookieJar.deserialize instead of calling this directly\nCAN_BE_SYNC.push('_importCookies');\nCookieJar.prototype._importCookies = function(serialized, cb) {\n  var jar = this;\n  var cookies = serialized.cookies;\n  if (!cookies || !Array.isArray(cookies)) {\n    return cb(new Error('serialized jar has no cookies array'));\n  }\n  cookies = cookies.slice(); // do not modify the original\n\n  function putNext(err) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (!cookies.length) {\n      return cb(err, jar);\n    }\n\n    var cookie;\n    try {\n      cookie = fromJSON(cookies.shift());\n    } catch (e) {\n      return cb(e);\n    }\n\n    if (cookie === null) {\n      return putNext(null); // skip this cookie\n    }\n\n    jar.store.putCookie(cookie, putNext);\n  }\n\n  putNext();\n};\n\nCookieJar.deserialize = function(strOrObj, store, cb) {\n  if (arguments.length !== 3) {\n    // store is optional\n    cb = store;\n    store = null;\n  }\n\n  var serialized;\n  if (typeof strOrObj === 'string') {\n    serialized = jsonParse(strOrObj);\n    if (serialized instanceof Error) {\n      return cb(serialized);\n    }\n  } else {\n    serialized = strOrObj;\n  }\n\n  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n  jar._importCookies(serialized, function(err) {\n    if (err) {\n      return cb(err);\n    }\n    cb(null, jar);\n  });\n};\n\nCookieJar.deserializeSync = function(strOrObj, store) {\n  var serialized = typeof strOrObj === 'string' ?\n    JSON.parse(strOrObj) : strOrObj;\n  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n\n  // catch this mistake early:\n  if (!jar.store.synchronous) {\n    throw new Error('CookieJar store is not synchronous; use async API instead.');\n  }\n\n  jar._importCookiesSync(serialized);\n  return jar;\n};\nCookieJar.fromJSON = CookieJar.deserializeSync;\n\nCookieJar.prototype.clone = function(newStore, cb) {\n  if (arguments.length === 1) {\n    cb = newStore;\n    newStore = null;\n  }\n\n  this.serialize(function(err,serialized) {\n    if (err) {\n      return cb(err);\n    }\n    CookieJar.deserialize(serialized, newStore, cb);\n  });\n};\n\nCAN_BE_SYNC.push('removeAllCookies');\nCookieJar.prototype.removeAllCookies = function(cb) {\n  var store = this.store;\n\n  // Check that the store implements its own removeAllCookies(). The default\n  // implementation in Store will immediately call the callback with a \"not\n  // implemented\" Error.\n  if (store.removeAllCookies instanceof Function &&\n      store.removeAllCookies !== Store.prototype.removeAllCookies)\n  {\n    return store.removeAllCookies(cb);\n  }\n\n  store.getAllCookies(function(err, cookies) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (cookies.length === 0) {\n      return cb(null);\n    }\n\n    var completedCount = 0;\n    var removeErrors = [];\n\n    function removeCookieCb(removeErr) {\n      if (removeErr) {\n        removeErrors.push(removeErr);\n      }\n\n      completedCount++;\n\n      if (completedCount === cookies.length) {\n        return cb(removeErrors.length ? removeErrors[0] : null);\n      }\n    }\n\n    cookies.forEach(function(cookie) {\n      store.removeCookie(cookie.domain, cookie.path, cookie.key, removeCookieCb);\n    });\n  });\n};\n\nCookieJar.prototype._cloneSync = syncWrap('clone');\nCookieJar.prototype.cloneSync = function(newStore) {\n  if (!newStore.synchronous) {\n    throw new Error('CookieJar clone destination store is not synchronous; use async API instead.');\n  }\n  return this._cloneSync(newStore);\n};\n\n// Use a closure to provide a true imperative API for synchronous stores.\nfunction syncWrap(method) {\n  return function() {\n    if (!this.store.synchronous) {\n      throw new Error('CookieJar store is not synchronous; use async API instead.');\n    }\n\n    var args = Array.prototype.slice.call(arguments);\n    var syncErr, syncResult;\n    args.push(function syncCb(err, result) {\n      syncErr = err;\n      syncResult = result;\n    });\n    this[method].apply(this, args);\n\n    if (syncErr) {\n      throw syncErr;\n    }\n    return syncResult;\n  };\n}\n\n// wrap all declared CAN_BE_SYNC methods in the sync wrapper\nCAN_BE_SYNC.forEach(function(method) {\n  CookieJar.prototype[method+'Sync'] = syncWrap(method);\n});\n\nexports.version = VERSION;\nexports.CookieJar = CookieJar;\nexports.Cookie = Cookie;\nexports.Store = Store;\nexports.MemoryCookieStore = MemoryCookieStore;\nexports.parseDate = parseDate;\nexports.formatDate = formatDate;\nexports.parse = parse;\nexports.fromJSON = fromJSON;\nexports.domainMatch = domainMatch;\nexports.defaultPath = defaultPath;\nexports.pathMatch = pathMatch;\nexports.getPublicSuffix = pubsuffix.getPublicSuffix;\nexports.cookieCompare = cookieCompare;\nexports.permuteDomain = require('./permuteDomain').permuteDomain;\nexports.permutePath = permutePath;\nexports.canonicalDomain = canonicalDomain;\n","start":1667202704575,"end":1667202704709},{"name":"commonjs","result":"/*!\n * Copyright (c) 2015, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of Salesforce.com nor the names of its contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as cookie } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/cookie.js?commonjs-exports\"\nimport require$$0 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/pubsuffix-psl.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/store.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/memstore.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/pathMatch.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/version.js?commonjs-wrapped\";\nimport require$$8 from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/punycode/punycode.es6.js?commonjs-proxy\";\nimport { __require as require$$9 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/request/node_modules/tough-cookie/lib/permuteDomain.js?commonjs-wrapped\";\n\nvar hasRequiredCookie;\n\nfunction requireCookie () {\n\tif (hasRequiredCookie) return cookie;\n\thasRequiredCookie = 1;\n\t'use strict';\n\tvar net = require$$0;\n\tvar urlParse = require$$1.parse;\n\tvar util = require$$2();\n\tvar pubsuffix = require$$3();\n\tvar Store = require$$4().Store;\n\tvar MemoryCookieStore = require$$5().MemoryCookieStore;\n\tvar pathMatch = require$$6().pathMatch;\n\tvar VERSION = require$$7();\n\n\tvar punycode;\n\ttry {\n\t  punycode = require$$8;\n\t} catch(e) {\n\t  console.warn(\"tough-cookie: can't load punycode; won't use punycode for domain normalization\");\n\t}\n\n\t// From RFC6265 S4.1.1\n\t// note that it excludes \\x3B \";\"\n\tvar COOKIE_OCTETS = /^[\\x21\\x23-\\x2B\\x2D-\\x3A\\x3C-\\x5B\\x5D-\\x7E]+$/;\n\n\tvar CONTROL_CHARS = /[\\x00-\\x1F]/;\n\n\t// From Chromium // '\\r', '\\n' and '\\0' should be treated as a terminator in\n\t// the \"relaxed\" mode, see:\n\t// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60\n\tvar TERMINATORS = ['\\n', '\\r', '\\0'];\n\n\t// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or \";\"'\n\t// Note ';' is \\x3B\n\tvar PATH_VALUE = /[\\x20-\\x3A\\x3C-\\x7E]+/;\n\n\t// date-time parsing constants (RFC6265 S5.1.1)\n\n\tvar DATE_DELIM = /[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]/;\n\n\tvar MONTH_TO_NUM = {\n\t  jan:0, feb:1, mar:2, apr:3, may:4, jun:5,\n\t  jul:6, aug:7, sep:8, oct:9, nov:10, dec:11\n\t};\n\tvar NUM_TO_MONTH = [\n\t  'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'\n\t];\n\tvar NUM_TO_DAY = [\n\t  'Sun','Mon','Tue','Wed','Thu','Fri','Sat'\n\t];\n\n\tvar MAX_TIME = 2147483647000; // 31-bit max\n\tvar MIN_TIME = 0; // 31-bit min\n\n\t/*\n\t * Parses a Natural number (i.e., non-negative integer) with either the\n\t *    <min>*<max>DIGIT ( non-digit *OCTET )\n\t * or\n\t *    <min>*<max>DIGIT\n\t * grammar (RFC6265 S5.1.1).\n\t *\n\t * The \"trailingOK\" boolean controls if the grammar accepts a\n\t * \"( non-digit *OCTET )\" trailer.\n\t */\n\tfunction parseDigits(token, minDigits, maxDigits, trailingOK) {\n\t  var count = 0;\n\t  while (count < token.length) {\n\t    var c = token.charCodeAt(count);\n\t    // \"non-digit = %x00-2F / %x3A-FF\"\n\t    if (c <= 0x2F || c >= 0x3A) {\n\t      break;\n\t    }\n\t    count++;\n\t  }\n\n\t  // constrain to a minimum and maximum number of digits.\n\t  if (count < minDigits || count > maxDigits) {\n\t    return null;\n\t  }\n\n\t  if (!trailingOK && count != token.length) {\n\t    return null;\n\t  }\n\n\t  return parseInt(token.substr(0,count), 10);\n\t}\n\n\tfunction parseTime(token) {\n\t  var parts = token.split(':');\n\t  var result = [0,0,0];\n\n\t  /* RF6256 S5.1.1:\n\t   *      time            = hms-time ( non-digit *OCTET )\n\t   *      hms-time        = time-field \":\" time-field \":\" time-field\n\t   *      time-field      = 1*2DIGIT\n\t   */\n\n\t  if (parts.length !== 3) {\n\t    return null;\n\t  }\n\n\t  for (var i = 0; i < 3; i++) {\n\t    // \"time-field\" must be strictly \"1*2DIGIT\", HOWEVER, \"hms-time\" can be\n\t    // followed by \"( non-digit *OCTET )\" so therefore the last time-field can\n\t    // have a trailer\n\t    var trailingOK = (i == 2);\n\t    var num = parseDigits(parts[i], 1, 2, trailingOK);\n\t    if (num === null) {\n\t      return null;\n\t    }\n\t    result[i] = num;\n\t  }\n\n\t  return result;\n\t}\n\n\tfunction parseMonth(token) {\n\t  token = String(token).substr(0,3).toLowerCase();\n\t  var num = MONTH_TO_NUM[token];\n\t  return num >= 0 ? num : null;\n\t}\n\n\t/*\n\t * RFC6265 S5.1.1 date parser (see RFC for full grammar)\n\t */\n\tfunction parseDate(str) {\n\t  if (!str) {\n\t    return;\n\t  }\n\n\t  /* RFC6265 S5.1.1:\n\t   * 2. Process each date-token sequentially in the order the date-tokens\n\t   * appear in the cookie-date\n\t   */\n\t  var tokens = str.split(DATE_DELIM);\n\t  if (!tokens) {\n\t    return;\n\t  }\n\n\t  var hour = null;\n\t  var minute = null;\n\t  var second = null;\n\t  var dayOfMonth = null;\n\t  var month = null;\n\t  var year = null;\n\n\t  for (var i=0; i<tokens.length; i++) {\n\t    var token = tokens[i].trim();\n\t    if (!token.length) {\n\t      continue;\n\t    }\n\n\t    var result;\n\n\t    /* 2.1. If the found-time flag is not set and the token matches the time\n\t     * production, set the found-time flag and set the hour- value,\n\t     * minute-value, and second-value to the numbers denoted by the digits in\n\t     * the date-token, respectively.  Skip the remaining sub-steps and continue\n\t     * to the next date-token.\n\t     */\n\t    if (second === null) {\n\t      result = parseTime(token);\n\t      if (result) {\n\t        hour = result[0];\n\t        minute = result[1];\n\t        second = result[2];\n\t        continue;\n\t      }\n\t    }\n\n\t    /* 2.2. If the found-day-of-month flag is not set and the date-token matches\n\t     * the day-of-month production, set the found-day-of- month flag and set\n\t     * the day-of-month-value to the number denoted by the date-token.  Skip\n\t     * the remaining sub-steps and continue to the next date-token.\n\t     */\n\t    if (dayOfMonth === null) {\n\t      // \"day-of-month = 1*2DIGIT ( non-digit *OCTET )\"\n\t      result = parseDigits(token, 1, 2, true);\n\t      if (result !== null) {\n\t        dayOfMonth = result;\n\t        continue;\n\t      }\n\t    }\n\n\t    /* 2.3. If the found-month flag is not set and the date-token matches the\n\t     * month production, set the found-month flag and set the month-value to\n\t     * the month denoted by the date-token.  Skip the remaining sub-steps and\n\t     * continue to the next date-token.\n\t     */\n\t    if (month === null) {\n\t      result = parseMonth(token);\n\t      if (result !== null) {\n\t        month = result;\n\t        continue;\n\t      }\n\t    }\n\n\t    /* 2.4. If the found-year flag is not set and the date-token matches the\n\t     * year production, set the found-year flag and set the year-value to the\n\t     * number denoted by the date-token.  Skip the remaining sub-steps and\n\t     * continue to the next date-token.\n\t     */\n\t    if (year === null) {\n\t      // \"year = 2*4DIGIT ( non-digit *OCTET )\"\n\t      result = parseDigits(token, 2, 4, true);\n\t      if (result !== null) {\n\t        year = result;\n\t        /* From S5.1.1:\n\t         * 3.  If the year-value is greater than or equal to 70 and less\n\t         * than or equal to 99, increment the year-value by 1900.\n\t         * 4.  If the year-value is greater than or equal to 0 and less\n\t         * than or equal to 69, increment the year-value by 2000.\n\t         */\n\t        if (year >= 70 && year <= 99) {\n\t          year += 1900;\n\t        } else if (year >= 0 && year <= 69) {\n\t          year += 2000;\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  /* RFC 6265 S5.1.1\n\t   * \"5. Abort these steps and fail to parse the cookie-date if:\n\t   *     *  at least one of the found-day-of-month, found-month, found-\n\t   *        year, or found-time flags is not set,\n\t   *     *  the day-of-month-value is less than 1 or greater than 31,\n\t   *     *  the year-value is less than 1601,\n\t   *     *  the hour-value is greater than 23,\n\t   *     *  the minute-value is greater than 59, or\n\t   *     *  the second-value is greater than 59.\n\t   *     (Note that leap seconds cannot be represented in this syntax.)\"\n\t   *\n\t   * So, in order as above:\n\t   */\n\t  if (\n\t    dayOfMonth === null || month === null || year === null || second === null ||\n\t    dayOfMonth < 1 || dayOfMonth > 31 ||\n\t    year < 1601 ||\n\t    hour > 23 ||\n\t    minute > 59 ||\n\t    second > 59\n\t  ) {\n\t    return;\n\t  }\n\n\t  return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));\n\t}\n\n\tfunction formatDate(date) {\n\t  var d = date.getUTCDate(); d = d >= 10 ? d : '0'+d;\n\t  var h = date.getUTCHours(); h = h >= 10 ? h : '0'+h;\n\t  var m = date.getUTCMinutes(); m = m >= 10 ? m : '0'+m;\n\t  var s = date.getUTCSeconds(); s = s >= 10 ? s : '0'+s;\n\t  return NUM_TO_DAY[date.getUTCDay()] + ', ' +\n\t    d+' '+ NUM_TO_MONTH[date.getUTCMonth()] +' '+ date.getUTCFullYear() +' '+\n\t    h+':'+m+':'+s+' GMT';\n\t}\n\n\t// S5.1.2 Canonicalized Host Names\n\tfunction canonicalDomain(str) {\n\t  if (str == null) {\n\t    return null;\n\t  }\n\t  str = str.trim().replace(/^\\./,''); // S4.1.2.3 & S5.2.3: ignore leading .\n\n\t  // convert to IDN if any non-ASCII characters\n\t  if (punycode && /[^\\u0001-\\u007f]/.test(str)) {\n\t    str = punycode.toASCII(str);\n\t  }\n\n\t  return str.toLowerCase();\n\t}\n\n\t// S5.1.3 Domain Matching\n\tfunction domainMatch(str, domStr, canonicalize) {\n\t  if (str == null || domStr == null) {\n\t    return null;\n\t  }\n\t  if (canonicalize !== false) {\n\t    str = canonicalDomain(str);\n\t    domStr = canonicalDomain(domStr);\n\t  }\n\n\t  /*\n\t   * \"The domain string and the string are identical. (Note that both the\n\t   * domain string and the string will have been canonicalized to lower case at\n\t   * this point)\"\n\t   */\n\t  if (str == domStr) {\n\t    return true;\n\t  }\n\n\t  /* \"All of the following [three] conditions hold:\" (order adjusted from the RFC) */\n\n\t  /* \"* The string is a host name (i.e., not an IP address).\" */\n\t  if (net.isIP(str)) {\n\t    return false;\n\t  }\n\n\t  /* \"* The domain string is a suffix of the string\" */\n\t  var idx = str.indexOf(domStr);\n\t  if (idx <= 0) {\n\t    return false; // it's a non-match (-1) or prefix (0)\n\t  }\n\n\t  // e.g \"a.b.c\".indexOf(\"b.c\") === 2\n\t  // 5 === 3+2\n\t  if (str.length !== domStr.length + idx) { // it's not a suffix\n\t    return false;\n\t  }\n\n\t  /* \"* The last character of the string that is not included in the domain\n\t  * string is a %x2E (\".\") character.\" */\n\t  if (str.substr(idx-1,1) !== '.') {\n\t    return false;\n\t  }\n\n\t  return true;\n\t}\n\n\n\t// RFC6265 S5.1.4 Paths and Path-Match\n\n\t/*\n\t * \"The user agent MUST use an algorithm equivalent to the following algorithm\n\t * to compute the default-path of a cookie:\"\n\t *\n\t * Assumption: the path (and not query part or absolute uri) is passed in.\n\t */\n\tfunction defaultPath(path) {\n\t  // \"2. If the uri-path is empty or if the first character of the uri-path is not\n\t  // a %x2F (\"/\") character, output %x2F (\"/\") and skip the remaining steps.\n\t  if (!path || path.substr(0,1) !== \"/\") {\n\t    return \"/\";\n\t  }\n\n\t  // \"3. If the uri-path contains no more than one %x2F (\"/\") character, output\n\t  // %x2F (\"/\") and skip the remaining step.\"\n\t  if (path === \"/\") {\n\t    return path;\n\t  }\n\n\t  var rightSlash = path.lastIndexOf(\"/\");\n\t  if (rightSlash === 0) {\n\t    return \"/\";\n\t  }\n\n\t  // \"4. Output the characters of the uri-path from the first character up to,\n\t  // but not including, the right-most %x2F (\"/\").\"\n\t  return path.slice(0, rightSlash);\n\t}\n\n\tfunction trimTerminator(str) {\n\t  for (var t = 0; t < TERMINATORS.length; t++) {\n\t    var terminatorIdx = str.indexOf(TERMINATORS[t]);\n\t    if (terminatorIdx !== -1) {\n\t      str = str.substr(0,terminatorIdx);\n\t    }\n\t  }\n\n\t  return str;\n\t}\n\n\tfunction parseCookiePair(cookiePair, looseMode) {\n\t  cookiePair = trimTerminator(cookiePair);\n\n\t  var firstEq = cookiePair.indexOf('=');\n\t  if (looseMode) {\n\t    if (firstEq === 0) { // '=' is immediately at start\n\t      cookiePair = cookiePair.substr(1);\n\t      firstEq = cookiePair.indexOf('='); // might still need to split on '='\n\t    }\n\t  } else { // non-loose mode\n\t    if (firstEq <= 0) { // no '=' or is at start\n\t      return; // needs to have non-empty \"cookie-name\"\n\t    }\n\t  }\n\n\t  var cookieName, cookieValue;\n\t  if (firstEq <= 0) {\n\t    cookieName = \"\";\n\t    cookieValue = cookiePair.trim();\n\t  } else {\n\t    cookieName = cookiePair.substr(0, firstEq).trim();\n\t    cookieValue = cookiePair.substr(firstEq+1).trim();\n\t  }\n\n\t  if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {\n\t    return;\n\t  }\n\n\t  var c = new Cookie();\n\t  c.key = cookieName;\n\t  c.value = cookieValue;\n\t  return c;\n\t}\n\n\tfunction parse(str, options) {\n\t  if (!options || typeof options !== 'object') {\n\t    options = {};\n\t  }\n\t  str = str.trim();\n\n\t  // We use a regex to parse the \"name-value-pair\" part of S5.2\n\t  var firstSemi = str.indexOf(';'); // S5.2 step 1\n\t  var cookiePair = (firstSemi === -1) ? str : str.substr(0, firstSemi);\n\t  var c = parseCookiePair(cookiePair, !!options.loose);\n\t  if (!c) {\n\t    return;\n\t  }\n\n\t  if (firstSemi === -1) {\n\t    return c;\n\t  }\n\n\t  // S5.2.3 \"unparsed-attributes consist of the remainder of the set-cookie-string\n\t  // (including the %x3B (\";\") in question).\" plus later on in the same section\n\t  // \"discard the first \";\" and trim\".\n\t  var unparsed = str.slice(firstSemi + 1).trim();\n\n\t  // \"If the unparsed-attributes string is empty, skip the rest of these\n\t  // steps.\"\n\t  if (unparsed.length === 0) {\n\t    return c;\n\t  }\n\n\t  /*\n\t   * S5.2 says that when looping over the items \"[p]rocess the attribute-name\n\t   * and attribute-value according to the requirements in the following\n\t   * subsections\" for every item.  Plus, for many of the individual attributes\n\t   * in S5.3 it says to use the \"attribute-value of the last attribute in the\n\t   * cookie-attribute-list\".  Therefore, in this implementation, we overwrite\n\t   * the previous value.\n\t   */\n\t  var cookie_avs = unparsed.split(';');\n\t  while (cookie_avs.length) {\n\t    var av = cookie_avs.shift().trim();\n\t    if (av.length === 0) { // happens if \";;\" appears\n\t      continue;\n\t    }\n\t    var av_sep = av.indexOf('=');\n\t    var av_key, av_value;\n\n\t    if (av_sep === -1) {\n\t      av_key = av;\n\t      av_value = null;\n\t    } else {\n\t      av_key = av.substr(0,av_sep);\n\t      av_value = av.substr(av_sep+1);\n\t    }\n\n\t    av_key = av_key.trim().toLowerCase();\n\n\t    if (av_value) {\n\t      av_value = av_value.trim();\n\t    }\n\n\t    switch(av_key) {\n\t    case 'expires': // S5.2.1\n\t      if (av_value) {\n\t        var exp = parseDate(av_value);\n\t        // \"If the attribute-value failed to parse as a cookie date, ignore the\n\t        // cookie-av.\"\n\t        if (exp) {\n\t          // over and underflow not realistically a concern: V8's getTime() seems to\n\t          // store something larger than a 32-bit time_t (even with 32-bit node)\n\t          c.expires = exp;\n\t        }\n\t      }\n\t      break;\n\n\t    case 'max-age': // S5.2.2\n\t      if (av_value) {\n\t        // \"If the first character of the attribute-value is not a DIGIT or a \"-\"\n\t        // character ...[or]... If the remainder of attribute-value contains a\n\t        // non-DIGIT character, ignore the cookie-av.\"\n\t        if (/^-?[0-9]+$/.test(av_value)) {\n\t          var delta = parseInt(av_value, 10);\n\t          // \"If delta-seconds is less than or equal to zero (0), let expiry-time\n\t          // be the earliest representable date and time.\"\n\t          c.setMaxAge(delta);\n\t        }\n\t      }\n\t      break;\n\n\t    case 'domain': // S5.2.3\n\t      // \"If the attribute-value is empty, the behavior is undefined.  However,\n\t      // the user agent SHOULD ignore the cookie-av entirely.\"\n\t      if (av_value) {\n\t        // S5.2.3 \"Let cookie-domain be the attribute-value without the leading %x2E\n\t        // (\".\") character.\"\n\t        var domain = av_value.trim().replace(/^\\./, '');\n\t        if (domain) {\n\t          // \"Convert the cookie-domain to lower case.\"\n\t          c.domain = domain.toLowerCase();\n\t        }\n\t      }\n\t      break;\n\n\t    case 'path': // S5.2.4\n\t      /*\n\t       * \"If the attribute-value is empty or if the first character of the\n\t       * attribute-value is not %x2F (\"/\"):\n\t       *   Let cookie-path be the default-path.\n\t       * Otherwise:\n\t       *   Let cookie-path be the attribute-value.\"\n\t       *\n\t       * We'll represent the default-path as null since it depends on the\n\t       * context of the parsing.\n\t       */\n\t      c.path = av_value && av_value[0] === \"/\" ? av_value : null;\n\t      break;\n\n\t    case 'secure': // S5.2.5\n\t      /*\n\t       * \"If the attribute-name case-insensitively matches the string \"Secure\",\n\t       * the user agent MUST append an attribute to the cookie-attribute-list\n\t       * with an attribute-name of Secure and an empty attribute-value.\"\n\t       */\n\t      c.secure = true;\n\t      break;\n\n\t    case 'httponly': // S5.2.6 -- effectively the same as 'secure'\n\t      c.httpOnly = true;\n\t      break;\n\n\t    default:\n\t      c.extensions = c.extensions || [];\n\t      c.extensions.push(av);\n\t      break;\n\t    }\n\t  }\n\n\t  return c;\n\t}\n\n\t// avoid the V8 deoptimization monster!\n\tfunction jsonParse(str) {\n\t  var obj;\n\t  try {\n\t    obj = JSON.parse(str);\n\t  } catch (e) {\n\t    return e;\n\t  }\n\t  return obj;\n\t}\n\n\tfunction fromJSON(str) {\n\t  if (!str) {\n\t    return null;\n\t  }\n\n\t  var obj;\n\t  if (typeof str === 'string') {\n\t    obj = jsonParse(str);\n\t    if (obj instanceof Error) {\n\t      return null;\n\t    }\n\t  } else {\n\t    // assume it's an Object\n\t    obj = str;\n\t  }\n\n\t  var c = new Cookie();\n\t  for (var i=0; i<Cookie.serializableProperties.length; i++) {\n\t    var prop = Cookie.serializableProperties[i];\n\t    if (obj[prop] === undefined ||\n\t        obj[prop] === Cookie.prototype[prop])\n\t    {\n\t      continue; // leave as prototype default\n\t    }\n\n\t    if (prop === 'expires' ||\n\t        prop === 'creation' ||\n\t        prop === 'lastAccessed')\n\t    {\n\t      if (obj[prop] === null) {\n\t        c[prop] = null;\n\t      } else {\n\t        c[prop] = obj[prop] == \"Infinity\" ?\n\t          \"Infinity\" : new Date(obj[prop]);\n\t      }\n\t    } else {\n\t      c[prop] = obj[prop];\n\t    }\n\t  }\n\n\t  return c;\n\t}\n\n\t/* Section 5.4 part 2:\n\t * \"*  Cookies with longer paths are listed before cookies with\n\t *     shorter paths.\n\t *\n\t *  *  Among cookies that have equal-length path fields, cookies with\n\t *     earlier creation-times are listed before cookies with later\n\t *     creation-times.\"\n\t */\n\n\tfunction cookieCompare(a,b) {\n\t  var cmp = 0;\n\n\t  // descending for length: b CMP a\n\t  var aPathLen = a.path ? a.path.length : 0;\n\t  var bPathLen = b.path ? b.path.length : 0;\n\t  cmp = bPathLen - aPathLen;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  // ascending for time: a CMP b\n\t  var aTime = a.creation ? a.creation.getTime() : MAX_TIME;\n\t  var bTime = b.creation ? b.creation.getTime() : MAX_TIME;\n\t  cmp = aTime - bTime;\n\t  if (cmp !== 0) {\n\t    return cmp;\n\t  }\n\n\t  // break ties for the same millisecond (precision of JavaScript's clock)\n\t  cmp = a.creationIndex - b.creationIndex;\n\n\t  return cmp;\n\t}\n\n\t// Gives the permutation of all possible pathMatch()es of a given path. The\n\t// array is in longest-to-shortest order.  Handy for indexing.\n\tfunction permutePath(path) {\n\t  if (path === '/') {\n\t    return ['/'];\n\t  }\n\t  if (path.lastIndexOf('/') === path.length-1) {\n\t    path = path.substr(0,path.length-1);\n\t  }\n\t  var permutations = [path];\n\t  while (path.length > 1) {\n\t    var lindex = path.lastIndexOf('/');\n\t    if (lindex === 0) {\n\t      break;\n\t    }\n\t    path = path.substr(0,lindex);\n\t    permutations.push(path);\n\t  }\n\t  permutations.push('/');\n\t  return permutations;\n\t}\n\n\tfunction getCookieContext(url) {\n\t  if (url instanceof Object) {\n\t    return url;\n\t  }\n\t  // NOTE: decodeURI will throw on malformed URIs (see GH-32).\n\t  // Therefore, we will just skip decoding for such URIs.\n\t  try {\n\t    url = decodeURI(url);\n\t  }\n\t  catch(err) {\n\t    // Silently swallow error\n\t  }\n\n\t  return urlParse(url);\n\t}\n\n\tfunction Cookie(options) {\n\t  options = options || {};\n\n\t  Object.keys(options).forEach(function(prop) {\n\t    if (Cookie.prototype.hasOwnProperty(prop) &&\n\t        Cookie.prototype[prop] !== options[prop] &&\n\t        prop.substr(0,1) !== '_')\n\t    {\n\t      this[prop] = options[prop];\n\t    }\n\t  }, this);\n\n\t  this.creation = this.creation || new Date();\n\n\t  // used to break creation ties in cookieCompare():\n\t  Object.defineProperty(this, 'creationIndex', {\n\t    configurable: false,\n\t    enumerable: false, // important for assert.deepEqual checks\n\t    writable: true,\n\t    value: ++Cookie.cookiesCreated\n\t  });\n\t}\n\n\tCookie.cookiesCreated = 0; // incremented each time a cookie is created\n\n\tCookie.parse = parse;\n\tCookie.fromJSON = fromJSON;\n\n\tCookie.prototype.key = \"\";\n\tCookie.prototype.value = \"\";\n\n\t// the order in which the RFC has them:\n\tCookie.prototype.expires = \"Infinity\"; // coerces to literal Infinity\n\tCookie.prototype.maxAge = null; // takes precedence over expires for TTL\n\tCookie.prototype.domain = null;\n\tCookie.prototype.path = null;\n\tCookie.prototype.secure = false;\n\tCookie.prototype.httpOnly = false;\n\tCookie.prototype.extensions = null;\n\n\t// set by the CookieJar:\n\tCookie.prototype.hostOnly = null; // boolean when set\n\tCookie.prototype.pathIsDefault = null; // boolean when set\n\tCookie.prototype.creation = null; // Date when set; defaulted by Cookie.parse\n\tCookie.prototype.lastAccessed = null; // Date when set\n\tObject.defineProperty(Cookie.prototype, 'creationIndex', {\n\t  configurable: true,\n\t  enumerable: false,\n\t  writable: true,\n\t  value: 0\n\t});\n\n\tCookie.serializableProperties = Object.keys(Cookie.prototype)\n\t  .filter(function(prop) {\n\t    return !(\n\t      Cookie.prototype[prop] instanceof Function ||\n\t      prop === 'creationIndex' ||\n\t      prop.substr(0,1) === '_'\n\t    );\n\t  });\n\n\tCookie.prototype.inspect = function inspect() {\n\t  var now = Date.now();\n\t  return 'Cookie=\"'+this.toString() +\n\t    '; hostOnly='+(this.hostOnly != null ? this.hostOnly : '?') +\n\t    '; aAge='+(this.lastAccessed ? (now-this.lastAccessed.getTime())+'ms' : '?') +\n\t    '; cAge='+(this.creation ? (now-this.creation.getTime())+'ms' : '?') +\n\t    '\"';\n\t};\n\n\t// Use the new custom inspection symbol to add the custom inspect function if\n\t// available.\n\tif (util.inspect.custom) {\n\t  Cookie.prototype[util.inspect.custom] = Cookie.prototype.inspect;\n\t}\n\n\tCookie.prototype.toJSON = function() {\n\t  var obj = {};\n\n\t  var props = Cookie.serializableProperties;\n\t  for (var i=0; i<props.length; i++) {\n\t    var prop = props[i];\n\t    if (this[prop] === Cookie.prototype[prop]) {\n\t      continue; // leave as prototype default\n\t    }\n\n\t    if (prop === 'expires' ||\n\t        prop === 'creation' ||\n\t        prop === 'lastAccessed')\n\t    {\n\t      if (this[prop] === null) {\n\t        obj[prop] = null;\n\t      } else {\n\t        obj[prop] = this[prop] == \"Infinity\" ? // intentionally not ===\n\t          \"Infinity\" : this[prop].toISOString();\n\t      }\n\t    } else if (prop === 'maxAge') {\n\t      if (this[prop] !== null) {\n\t        // again, intentionally not ===\n\t        obj[prop] = (this[prop] == Infinity || this[prop] == -Infinity) ?\n\t          this[prop].toString() : this[prop];\n\t      }\n\t    } else {\n\t      if (this[prop] !== Cookie.prototype[prop]) {\n\t        obj[prop] = this[prop];\n\t      }\n\t    }\n\t  }\n\n\t  return obj;\n\t};\n\n\tCookie.prototype.clone = function() {\n\t  return fromJSON(this.toJSON());\n\t};\n\n\tCookie.prototype.validate = function validate() {\n\t  if (!COOKIE_OCTETS.test(this.value)) {\n\t    return false;\n\t  }\n\t  if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {\n\t    return false;\n\t  }\n\t  if (this.maxAge != null && this.maxAge <= 0) {\n\t    return false; // \"Max-Age=\" non-zero-digit *DIGIT\n\t  }\n\t  if (this.path != null && !PATH_VALUE.test(this.path)) {\n\t    return false;\n\t  }\n\n\t  var cdomain = this.cdomain();\n\t  if (cdomain) {\n\t    if (cdomain.match(/\\.$/)) {\n\t      return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this\n\t    }\n\t    var suffix = pubsuffix.getPublicSuffix(cdomain);\n\t    if (suffix == null) { // it's a public suffix\n\t      return false;\n\t    }\n\t  }\n\t  return true;\n\t};\n\n\tCookie.prototype.setExpires = function setExpires(exp) {\n\t  if (exp instanceof Date) {\n\t    this.expires = exp;\n\t  } else {\n\t    this.expires = parseDate(exp) || \"Infinity\";\n\t  }\n\t};\n\n\tCookie.prototype.setMaxAge = function setMaxAge(age) {\n\t  if (age === Infinity || age === -Infinity) {\n\t    this.maxAge = age.toString(); // so JSON.stringify() works\n\t  } else {\n\t    this.maxAge = age;\n\t  }\n\t};\n\n\t// gives Cookie header format\n\tCookie.prototype.cookieString = function cookieString() {\n\t  var val = this.value;\n\t  if (val == null) {\n\t    val = '';\n\t  }\n\t  if (this.key === '') {\n\t    return val;\n\t  }\n\t  return this.key+'='+val;\n\t};\n\n\t// gives Set-Cookie header format\n\tCookie.prototype.toString = function toString() {\n\t  var str = this.cookieString();\n\n\t  if (this.expires != Infinity) {\n\t    if (this.expires instanceof Date) {\n\t      str += '; Expires='+formatDate(this.expires);\n\t    } else {\n\t      str += '; Expires='+this.expires;\n\t    }\n\t  }\n\n\t  if (this.maxAge != null && this.maxAge != Infinity) {\n\t    str += '; Max-Age='+this.maxAge;\n\t  }\n\n\t  if (this.domain && !this.hostOnly) {\n\t    str += '; Domain='+this.domain;\n\t  }\n\t  if (this.path) {\n\t    str += '; Path='+this.path;\n\t  }\n\n\t  if (this.secure) {\n\t    str += '; Secure';\n\t  }\n\t  if (this.httpOnly) {\n\t    str += '; HttpOnly';\n\t  }\n\t  if (this.extensions) {\n\t    this.extensions.forEach(function(ext) {\n\t      str += '; '+ext;\n\t    });\n\t  }\n\n\t  return str;\n\t};\n\n\t// TTL() partially replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n\t// elsewhere)\n\t// S5.3 says to give the \"latest representable date\" for which we use Infinity\n\t// For \"expired\" we use 0\n\tCookie.prototype.TTL = function TTL(now) {\n\t  /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires\n\t   * attribute, the Max-Age attribute has precedence and controls the\n\t   * expiration date of the cookie.\n\t   * (Concurs with S5.3 step 3)\n\t   */\n\t  if (this.maxAge != null) {\n\t    return this.maxAge<=0 ? 0 : this.maxAge*1000;\n\t  }\n\n\t  var expires = this.expires;\n\t  if (expires != Infinity) {\n\t    if (!(expires instanceof Date)) {\n\t      expires = parseDate(expires) || Infinity;\n\t    }\n\n\t    if (expires == Infinity) {\n\t      return Infinity;\n\t    }\n\n\t    return expires.getTime() - (now || Date.now());\n\t  }\n\n\t  return Infinity;\n\t};\n\n\t// expiryTime() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n\t// elsewhere)\n\tCookie.prototype.expiryTime = function expiryTime(now) {\n\t  if (this.maxAge != null) {\n\t    var relativeTo = now || this.creation || new Date();\n\t    var age = (this.maxAge <= 0) ? -Infinity : this.maxAge*1000;\n\t    return relativeTo.getTime() + age;\n\t  }\n\n\t  if (this.expires == Infinity) {\n\t    return Infinity;\n\t  }\n\t  return this.expires.getTime();\n\t};\n\n\t// expiryDate() replaces the \"expiry-time\" parts of S5.3 step 3 (setCookie()\n\t// elsewhere), except it returns a Date\n\tCookie.prototype.expiryDate = function expiryDate(now) {\n\t  var millisec = this.expiryTime(now);\n\t  if (millisec == Infinity) {\n\t    return new Date(MAX_TIME);\n\t  } else if (millisec == -Infinity) {\n\t    return new Date(MIN_TIME);\n\t  } else {\n\t    return new Date(millisec);\n\t  }\n\t};\n\n\t// This replaces the \"persistent-flag\" parts of S5.3 step 3\n\tCookie.prototype.isPersistent = function isPersistent() {\n\t  return (this.maxAge != null || this.expires != Infinity);\n\t};\n\n\t// Mostly S5.1.2 and S5.2.3:\n\tCookie.prototype.cdomain =\n\tCookie.prototype.canonicalizedDomain = function canonicalizedDomain() {\n\t  if (this.domain == null) {\n\t    return null;\n\t  }\n\t  return canonicalDomain(this.domain);\n\t};\n\n\tfunction CookieJar(store, options) {\n\t  if (typeof options === \"boolean\") {\n\t    options = {rejectPublicSuffixes: options};\n\t  } else if (options == null) {\n\t    options = {};\n\t  }\n\t  if (options.rejectPublicSuffixes != null) {\n\t    this.rejectPublicSuffixes = options.rejectPublicSuffixes;\n\t  }\n\t  if (options.looseMode != null) {\n\t    this.enableLooseMode = options.looseMode;\n\t  }\n\n\t  if (!store) {\n\t    store = new MemoryCookieStore();\n\t  }\n\t  this.store = store;\n\t}\n\tCookieJar.prototype.store = null;\n\tCookieJar.prototype.rejectPublicSuffixes = true;\n\tCookieJar.prototype.enableLooseMode = false;\n\tvar CAN_BE_SYNC = [];\n\n\tCAN_BE_SYNC.push('setCookie');\n\tCookieJar.prototype.setCookie = function(cookie, url, options, cb) {\n\t  var err;\n\t  var context = getCookieContext(url);\n\t  if (options instanceof Function) {\n\t    cb = options;\n\t    options = {};\n\t  }\n\n\t  var host = canonicalDomain(context.hostname);\n\t  var loose = this.enableLooseMode;\n\t  if (options.loose != null) {\n\t    loose = options.loose;\n\t  }\n\n\t  // S5.3 step 1\n\t  if (!(cookie instanceof Cookie)) {\n\t    cookie = Cookie.parse(cookie, { loose: loose });\n\t  }\n\t  if (!cookie) {\n\t    err = new Error(\"Cookie failed to parse\");\n\t    return cb(options.ignoreError ? null : err);\n\t  }\n\n\t  // S5.3 step 2\n\t  var now = options.now || new Date(); // will assign later to save effort in the face of errors\n\n\t  // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()\n\n\t  // S5.3 step 4: NOOP; domain is null by default\n\n\t  // S5.3 step 5: public suffixes\n\t  if (this.rejectPublicSuffixes && cookie.domain) {\n\t    var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());\n\t    if (suffix == null) { // e.g. \"com\"\n\t      err = new Error(\"Cookie has domain set to a public suffix\");\n\t      return cb(options.ignoreError ? null : err);\n\t    }\n\t  }\n\n\t  // S5.3 step 6:\n\t  if (cookie.domain) {\n\t    if (!domainMatch(host, cookie.cdomain(), false)) {\n\t      err = new Error(\"Cookie not in this host's domain. Cookie:\"+cookie.cdomain()+\" Request:\"+host);\n\t      return cb(options.ignoreError ? null : err);\n\t    }\n\n\t    if (cookie.hostOnly == null) { // don't reset if already set\n\t      cookie.hostOnly = false;\n\t    }\n\n\t  } else {\n\t    cookie.hostOnly = true;\n\t    cookie.domain = host;\n\t  }\n\n\t  //S5.2.4 If the attribute-value is empty or if the first character of the\n\t  //attribute-value is not %x2F (\"/\"):\n\t  //Let cookie-path be the default-path.\n\t  if (!cookie.path || cookie.path[0] !== '/') {\n\t    cookie.path = defaultPath(context.pathname);\n\t    cookie.pathIsDefault = true;\n\t  }\n\n\t  // S5.3 step 8: NOOP; secure attribute\n\t  // S5.3 step 9: NOOP; httpOnly attribute\n\n\t  // S5.3 step 10\n\t  if (options.http === false && cookie.httpOnly) {\n\t    err = new Error(\"Cookie is HttpOnly and this isn't an HTTP API\");\n\t    return cb(options.ignoreError ? null : err);\n\t  }\n\n\t  var store = this.store;\n\n\t  if (!store.updateCookie) {\n\t    store.updateCookie = function(oldCookie, newCookie, cb) {\n\t      this.putCookie(newCookie, cb);\n\t    };\n\t  }\n\n\t  function withCookie(err, oldCookie) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\n\t    var next = function(err) {\n\t      if (err) {\n\t        return cb(err);\n\t      } else {\n\t        cb(null, cookie);\n\t      }\n\t    };\n\n\t    if (oldCookie) {\n\t      // S5.3 step 11 - \"If the cookie store contains a cookie with the same name,\n\t      // domain, and path as the newly created cookie:\"\n\t      if (options.http === false && oldCookie.httpOnly) { // step 11.2\n\t        err = new Error(\"old Cookie is HttpOnly and this isn't an HTTP API\");\n\t        return cb(options.ignoreError ? null : err);\n\t      }\n\t      cookie.creation = oldCookie.creation; // step 11.3\n\t      cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker\n\t      cookie.lastAccessed = now;\n\t      // Step 11.4 (delete cookie) is implied by just setting the new one:\n\t      store.updateCookie(oldCookie, cookie, next); // step 12\n\n\t    } else {\n\t      cookie.creation = cookie.lastAccessed = now;\n\t      store.putCookie(cookie, next); // step 12\n\t    }\n\t  }\n\n\t  store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);\n\t};\n\n\t// RFC6365 S5.4\n\tCAN_BE_SYNC.push('getCookies');\n\tCookieJar.prototype.getCookies = function(url, options, cb) {\n\t  var context = getCookieContext(url);\n\t  if (options instanceof Function) {\n\t    cb = options;\n\t    options = {};\n\t  }\n\n\t  var host = canonicalDomain(context.hostname);\n\t  var path = context.pathname || '/';\n\n\t  var secure = options.secure;\n\t  if (secure == null && context.protocol &&\n\t      (context.protocol == 'https:' || context.protocol == 'wss:'))\n\t  {\n\t    secure = true;\n\t  }\n\n\t  var http = options.http;\n\t  if (http == null) {\n\t    http = true;\n\t  }\n\n\t  var now = options.now || Date.now();\n\t  var expireCheck = options.expire !== false;\n\t  var allPaths = !!options.allPaths;\n\t  var store = this.store;\n\n\t  function matchingCookie(c) {\n\t    // \"Either:\n\t    //   The cookie's host-only-flag is true and the canonicalized\n\t    //   request-host is identical to the cookie's domain.\n\t    // Or:\n\t    //   The cookie's host-only-flag is false and the canonicalized\n\t    //   request-host domain-matches the cookie's domain.\"\n\t    if (c.hostOnly) {\n\t      if (c.domain != host) {\n\t        return false;\n\t      }\n\t    } else {\n\t      if (!domainMatch(host, c.domain, false)) {\n\t        return false;\n\t      }\n\t    }\n\n\t    // \"The request-uri's path path-matches the cookie's path.\"\n\t    if (!allPaths && !pathMatch(path, c.path)) {\n\t      return false;\n\t    }\n\n\t    // \"If the cookie's secure-only-flag is true, then the request-uri's\n\t    // scheme must denote a \"secure\" protocol\"\n\t    if (c.secure && !secure) {\n\t      return false;\n\t    }\n\n\t    // \"If the cookie's http-only-flag is true, then exclude the cookie if the\n\t    // cookie-string is being generated for a \"non-HTTP\" API\"\n\t    if (c.httpOnly && !http) {\n\t      return false;\n\t    }\n\n\t    // deferred from S5.3\n\t    // non-RFC: allow retention of expired cookies by choice\n\t    if (expireCheck && c.expiryTime() <= now) {\n\t      store.removeCookie(c.domain, c.path, c.key, function(){}); // result ignored\n\t      return false;\n\t    }\n\n\t    return true;\n\t  }\n\n\t  store.findCookies(host, allPaths ? null : path, function(err,cookies) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\n\t    cookies = cookies.filter(matchingCookie);\n\n\t    // sorting of S5.4 part 2\n\t    if (options.sort !== false) {\n\t      cookies = cookies.sort(cookieCompare);\n\t    }\n\n\t    // S5.4 part 3\n\t    var now = new Date();\n\t    cookies.forEach(function(c) {\n\t      c.lastAccessed = now;\n\t    });\n\t    // TODO persist lastAccessed\n\n\t    cb(null,cookies);\n\t  });\n\t};\n\n\tCAN_BE_SYNC.push('getCookieString');\n\tCookieJar.prototype.getCookieString = function(/*..., cb*/) {\n\t  var args = Array.prototype.slice.call(arguments,0);\n\t  var cb = args.pop();\n\t  var next = function(err,cookies) {\n\t    if (err) {\n\t      cb(err);\n\t    } else {\n\t      cb(null, cookies\n\t        .sort(cookieCompare)\n\t        .map(function(c){\n\t          return c.cookieString();\n\t        })\n\t        .join('; '));\n\t    }\n\t  };\n\t  args.push(next);\n\t  this.getCookies.apply(this,args);\n\t};\n\n\tCAN_BE_SYNC.push('getSetCookieStrings');\n\tCookieJar.prototype.getSetCookieStrings = function(/*..., cb*/) {\n\t  var args = Array.prototype.slice.call(arguments,0);\n\t  var cb = args.pop();\n\t  var next = function(err,cookies) {\n\t    if (err) {\n\t      cb(err);\n\t    } else {\n\t      cb(null, cookies.map(function(c){\n\t        return c.toString();\n\t      }));\n\t    }\n\t  };\n\t  args.push(next);\n\t  this.getCookies.apply(this,args);\n\t};\n\n\tCAN_BE_SYNC.push('serialize');\n\tCookieJar.prototype.serialize = function(cb) {\n\t  var type = this.store.constructor.name;\n\t  if (type === 'Object') {\n\t    type = null;\n\t  }\n\n\t  // update README.md \"Serialization Format\" if you change this, please!\n\t  var serialized = {\n\t    // The version of tough-cookie that serialized this jar. Generally a good\n\t    // practice since future versions can make data import decisions based on\n\t    // known past behavior. When/if this matters, use `semver`.\n\t    version: 'tough-cookie@'+VERSION,\n\n\t    // add the store type, to make humans happy:\n\t    storeType: type,\n\n\t    // CookieJar configuration:\n\t    rejectPublicSuffixes: !!this.rejectPublicSuffixes,\n\n\t    // this gets filled from getAllCookies:\n\t    cookies: []\n\t  };\n\n\t  if (!(this.store.getAllCookies &&\n\t        typeof this.store.getAllCookies === 'function'))\n\t  {\n\t    return cb(new Error('store does not support getAllCookies and cannot be serialized'));\n\t  }\n\n\t  this.store.getAllCookies(function(err,cookies) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\n\t    serialized.cookies = cookies.map(function(cookie) {\n\t      // convert to serialized 'raw' cookies\n\t      cookie = (cookie instanceof Cookie) ? cookie.toJSON() : cookie;\n\n\t      // Remove the index so new ones get assigned during deserialization\n\t      delete cookie.creationIndex;\n\n\t      return cookie;\n\t    });\n\n\t    return cb(null, serialized);\n\t  });\n\t};\n\n\t// well-known name that JSON.stringify calls\n\tCookieJar.prototype.toJSON = function() {\n\t  return this.serializeSync();\n\t};\n\n\t// use the class method CookieJar.deserialize instead of calling this directly\n\tCAN_BE_SYNC.push('_importCookies');\n\tCookieJar.prototype._importCookies = function(serialized, cb) {\n\t  var jar = this;\n\t  var cookies = serialized.cookies;\n\t  if (!cookies || !Array.isArray(cookies)) {\n\t    return cb(new Error('serialized jar has no cookies array'));\n\t  }\n\t  cookies = cookies.slice(); // do not modify the original\n\n\t  function putNext(err) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\n\t    if (!cookies.length) {\n\t      return cb(err, jar);\n\t    }\n\n\t    var cookie;\n\t    try {\n\t      cookie = fromJSON(cookies.shift());\n\t    } catch (e) {\n\t      return cb(e);\n\t    }\n\n\t    if (cookie === null) {\n\t      return putNext(null); // skip this cookie\n\t    }\n\n\t    jar.store.putCookie(cookie, putNext);\n\t  }\n\n\t  putNext();\n\t};\n\n\tCookieJar.deserialize = function(strOrObj, store, cb) {\n\t  if (arguments.length !== 3) {\n\t    // store is optional\n\t    cb = store;\n\t    store = null;\n\t  }\n\n\t  var serialized;\n\t  if (typeof strOrObj === 'string') {\n\t    serialized = jsonParse(strOrObj);\n\t    if (serialized instanceof Error) {\n\t      return cb(serialized);\n\t    }\n\t  } else {\n\t    serialized = strOrObj;\n\t  }\n\n\t  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n\t  jar._importCookies(serialized, function(err) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t    cb(null, jar);\n\t  });\n\t};\n\n\tCookieJar.deserializeSync = function(strOrObj, store) {\n\t  var serialized = typeof strOrObj === 'string' ?\n\t    JSON.parse(strOrObj) : strOrObj;\n\t  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);\n\n\t  // catch this mistake early:\n\t  if (!jar.store.synchronous) {\n\t    throw new Error('CookieJar store is not synchronous; use async API instead.');\n\t  }\n\n\t  jar._importCookiesSync(serialized);\n\t  return jar;\n\t};\n\tCookieJar.fromJSON = CookieJar.deserializeSync;\n\n\tCookieJar.prototype.clone = function(newStore, cb) {\n\t  if (arguments.length === 1) {\n\t    cb = newStore;\n\t    newStore = null;\n\t  }\n\n\t  this.serialize(function(err,serialized) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t    CookieJar.deserialize(serialized, newStore, cb);\n\t  });\n\t};\n\n\tCAN_BE_SYNC.push('removeAllCookies');\n\tCookieJar.prototype.removeAllCookies = function(cb) {\n\t  var store = this.store;\n\n\t  // Check that the store implements its own removeAllCookies(). The default\n\t  // implementation in Store will immediately call the callback with a \"not\n\t  // implemented\" Error.\n\t  if (store.removeAllCookies instanceof Function &&\n\t      store.removeAllCookies !== Store.prototype.removeAllCookies)\n\t  {\n\t    return store.removeAllCookies(cb);\n\t  }\n\n\t  store.getAllCookies(function(err, cookies) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\n\t    if (cookies.length === 0) {\n\t      return cb(null);\n\t    }\n\n\t    var completedCount = 0;\n\t    var removeErrors = [];\n\n\t    function removeCookieCb(removeErr) {\n\t      if (removeErr) {\n\t        removeErrors.push(removeErr);\n\t      }\n\n\t      completedCount++;\n\n\t      if (completedCount === cookies.length) {\n\t        return cb(removeErrors.length ? removeErrors[0] : null);\n\t      }\n\t    }\n\n\t    cookies.forEach(function(cookie) {\n\t      store.removeCookie(cookie.domain, cookie.path, cookie.key, removeCookieCb);\n\t    });\n\t  });\n\t};\n\n\tCookieJar.prototype._cloneSync = syncWrap('clone');\n\tCookieJar.prototype.cloneSync = function(newStore) {\n\t  if (!newStore.synchronous) {\n\t    throw new Error('CookieJar clone destination store is not synchronous; use async API instead.');\n\t  }\n\t  return this._cloneSync(newStore);\n\t};\n\n\t// Use a closure to provide a true imperative API for synchronous stores.\n\tfunction syncWrap(method) {\n\t  return function() {\n\t    if (!this.store.synchronous) {\n\t      throw new Error('CookieJar store is not synchronous; use async API instead.');\n\t    }\n\n\t    var args = Array.prototype.slice.call(arguments);\n\t    var syncErr, syncResult;\n\t    args.push(function syncCb(err, result) {\n\t      syncErr = err;\n\t      syncResult = result;\n\t    });\n\t    this[method].apply(this, args);\n\n\t    if (syncErr) {\n\t      throw syncErr;\n\t    }\n\t    return syncResult;\n\t  };\n\t}\n\n\t// wrap all declared CAN_BE_SYNC methods in the sync wrapper\n\tCAN_BE_SYNC.forEach(function(method) {\n\t  CookieJar.prototype[method+'Sync'] = syncWrap(method);\n\t});\n\n\tcookie.version = VERSION;\n\tcookie.CookieJar = CookieJar;\n\tcookie.Cookie = Cookie;\n\tcookie.Store = Store;\n\tcookie.MemoryCookieStore = MemoryCookieStore;\n\tcookie.parseDate = parseDate;\n\tcookie.formatDate = formatDate;\n\tcookie.parse = parse;\n\tcookie.fromJSON = fromJSON;\n\tcookie.domainMatch = domainMatch;\n\tcookie.defaultPath = defaultPath;\n\tcookie.pathMatch = pathMatch;\n\tcookie.getPublicSuffix = pubsuffix.getPublicSuffix;\n\tcookie.cookieCompare = cookieCompare;\n\tcookie.permuteDomain = require$$9().permuteDomain;\n\tcookie.permutePath = permutePath;\n\tcookie.canonicalDomain = canonicalDomain;\n\treturn cookie;\n}\n\nexport { requireCookie as __require };","start":1667202704710,"end":1667202707546,"order":"normal"}]}
