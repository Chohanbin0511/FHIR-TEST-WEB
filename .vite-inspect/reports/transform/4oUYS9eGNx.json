{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/util/util.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif (process.env.NODE_DEBUG) {\n  var debugEnv = process.env.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').slice(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.slice(1, -1);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = require('./support/types');\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","start":1667202704593,"end":1667202704849},{"name":"vite:define","result":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif ({}.NODE_DEBUG) {\n  var debugEnv = {}.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').slice(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.slice(1, -1);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = require('./support/types');\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","start":1667202704849,"end":1667202704850,"order":"normal"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as util } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/support/types.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/support/isBufferBrowser.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/inherits/inherits_browser.js?commonjs-wrapped\";\n\nvar hasRequiredUtil;\n\nfunction requireUtil () {\n\tif (hasRequiredUtil) return util;\n\thasRequiredUtil = 1;\n\t(function (exports) {\n\t\t// Copyright Joyent, Inc. and other Node contributors.\n\t\t//\n\t\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t\t// copy of this software and associated documentation files (the\n\t\t// \"Software\"), to deal in the Software without restriction, including\n\t\t// without limitation the rights to use, copy, modify, merge, publish,\n\t\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t\t// persons to whom the Software is furnished to do so, subject to the\n\t\t// following conditions:\n\t\t//\n\t\t// The above copyright notice and this permission notice shall be included\n\t\t// in all copies or substantial portions of the Software.\n\t\t//\n\t\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t\tvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n\t\t  function getOwnPropertyDescriptors(obj) {\n\t\t    var keys = Object.keys(obj);\n\t\t    var descriptors = {};\n\t\t    for (var i = 0; i < keys.length; i++) {\n\t\t      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n\t\t    }\n\t\t    return descriptors;\n\t\t  };\n\n\t\tvar formatRegExp = /%[sdj%]/g;\n\t\texports.format = function(f) {\n\t\t  if (!isString(f)) {\n\t\t    var objects = [];\n\t\t    for (var i = 0; i < arguments.length; i++) {\n\t\t      objects.push(inspect(arguments[i]));\n\t\t    }\n\t\t    return objects.join(' ');\n\t\t  }\n\n\t\t  var i = 1;\n\t\t  var args = arguments;\n\t\t  var len = args.length;\n\t\t  var str = String(f).replace(formatRegExp, function(x) {\n\t\t    if (x === '%%') return '%';\n\t\t    if (i >= len) return x;\n\t\t    switch (x) {\n\t\t      case '%s': return String(args[i++]);\n\t\t      case '%d': return Number(args[i++]);\n\t\t      case '%j':\n\t\t        try {\n\t\t          return JSON.stringify(args[i++]);\n\t\t        } catch (_) {\n\t\t          return '[Circular]';\n\t\t        }\n\t\t      default:\n\t\t        return x;\n\t\t    }\n\t\t  });\n\t\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t\t    if (isNull(x) || !isObject(x)) {\n\t\t      str += ' ' + x;\n\t\t    } else {\n\t\t      str += ' ' + inspect(x);\n\t\t    }\n\t\t  }\n\t\t  return str;\n\t\t};\n\n\n\t\t// Mark that a method should not be used.\n\t\t// Returns a modified function which warns once by default.\n\t\t// If --no-deprecation is set, then it is a no-op.\n\t\texports.deprecate = function(fn, msg) {\n\t\t  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n\t\t    return fn;\n\t\t  }\n\n\t\t  // Allow for deprecating things in the process of starting up.\n\t\t  if (typeof process === 'undefined') {\n\t\t    return function() {\n\t\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t\t    };\n\t\t  }\n\n\t\t  var warned = false;\n\t\t  function deprecated() {\n\t\t    if (!warned) {\n\t\t      if (process.throwDeprecation) {\n\t\t        throw new Error(msg);\n\t\t      } else if (process.traceDeprecation) {\n\t\t        console.trace(msg);\n\t\t      } else {\n\t\t        console.error(msg);\n\t\t      }\n\t\t      warned = true;\n\t\t    }\n\t\t    return fn.apply(this, arguments);\n\t\t  }\n\n\t\t  return deprecated;\n\t\t};\n\n\n\t\tvar debugs = {};\n\t\tvar debugEnvRegex = /^$/;\n\n\t\tif ({}.NODE_DEBUG) {\n\t\t  var debugEnv = {}.NODE_DEBUG;\n\t\t  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n\t\t    .replace(/\\*/g, '.*')\n\t\t    .replace(/,/g, '$|^')\n\t\t    .toUpperCase();\n\t\t  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n\t\t}\n\t\texports.debuglog = function(set) {\n\t\t  set = set.toUpperCase();\n\t\t  if (!debugs[set]) {\n\t\t    if (debugEnvRegex.test(set)) {\n\t\t      var pid = process.pid;\n\t\t      debugs[set] = function() {\n\t\t        var msg = exports.format.apply(exports, arguments);\n\t\t        console.error('%s %d: %s', set, pid, msg);\n\t\t      };\n\t\t    } else {\n\t\t      debugs[set] = function() {};\n\t\t    }\n\t\t  }\n\t\t  return debugs[set];\n\t\t};\n\n\n\t\t/**\n\t\t * Echos the value of a value. Trys to print the value out\n\t\t * in the best way possible given the different types.\n\t\t *\n\t\t * @param {Object} obj The object to print out.\n\t\t * @param {Object} opts Optional options object that alters the output.\n\t\t */\n\t\t/* legacy: obj, showHidden, depth, colors*/\n\t\tfunction inspect(obj, opts) {\n\t\t  // default options\n\t\t  var ctx = {\n\t\t    seen: [],\n\t\t    stylize: stylizeNoColor\n\t\t  };\n\t\t  // legacy...\n\t\t  if (arguments.length >= 3) ctx.depth = arguments[2];\n\t\t  if (arguments.length >= 4) ctx.colors = arguments[3];\n\t\t  if (isBoolean(opts)) {\n\t\t    // legacy...\n\t\t    ctx.showHidden = opts;\n\t\t  } else if (opts) {\n\t\t    // got an \"options\" object\n\t\t    exports._extend(ctx, opts);\n\t\t  }\n\t\t  // set default options\n\t\t  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n\t\t  if (isUndefined(ctx.depth)) ctx.depth = 2;\n\t\t  if (isUndefined(ctx.colors)) ctx.colors = false;\n\t\t  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n\t\t  if (ctx.colors) ctx.stylize = stylizeWithColor;\n\t\t  return formatValue(ctx, obj, ctx.depth);\n\t\t}\n\t\texports.inspect = inspect;\n\n\n\t\t// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\t\tinspect.colors = {\n\t\t  'bold' : [1, 22],\n\t\t  'italic' : [3, 23],\n\t\t  'underline' : [4, 24],\n\t\t  'inverse' : [7, 27],\n\t\t  'white' : [37, 39],\n\t\t  'grey' : [90, 39],\n\t\t  'black' : [30, 39],\n\t\t  'blue' : [34, 39],\n\t\t  'cyan' : [36, 39],\n\t\t  'green' : [32, 39],\n\t\t  'magenta' : [35, 39],\n\t\t  'red' : [31, 39],\n\t\t  'yellow' : [33, 39]\n\t\t};\n\n\t\t// Don't use 'blue' not visible on cmd.exe\n\t\tinspect.styles = {\n\t\t  'special': 'cyan',\n\t\t  'number': 'yellow',\n\t\t  'boolean': 'yellow',\n\t\t  'undefined': 'grey',\n\t\t  'null': 'bold',\n\t\t  'string': 'green',\n\t\t  'date': 'magenta',\n\t\t  // \"name\": intentionally not styling\n\t\t  'regexp': 'red'\n\t\t};\n\n\n\t\tfunction stylizeWithColor(str, styleType) {\n\t\t  var style = inspect.styles[styleType];\n\n\t\t  if (style) {\n\t\t    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n\t\t           '\\u001b[' + inspect.colors[style][1] + 'm';\n\t\t  } else {\n\t\t    return str;\n\t\t  }\n\t\t}\n\n\n\t\tfunction stylizeNoColor(str, styleType) {\n\t\t  return str;\n\t\t}\n\n\n\t\tfunction arrayToHash(array) {\n\t\t  var hash = {};\n\n\t\t  array.forEach(function(val, idx) {\n\t\t    hash[val] = true;\n\t\t  });\n\n\t\t  return hash;\n\t\t}\n\n\n\t\tfunction formatValue(ctx, value, recurseTimes) {\n\t\t  // Provide a hook for user-specified inspect functions.\n\t\t  // Check that value is an object with an inspect function on it\n\t\t  if (ctx.customInspect &&\n\t\t      value &&\n\t\t      isFunction(value.inspect) &&\n\t\t      // Filter out the util module, it's inspect function is special\n\t\t      value.inspect !== exports.inspect &&\n\t\t      // Also filter out any prototype objects using the circular check.\n\t\t      !(value.constructor && value.constructor.prototype === value)) {\n\t\t    var ret = value.inspect(recurseTimes, ctx);\n\t\t    if (!isString(ret)) {\n\t\t      ret = formatValue(ctx, ret, recurseTimes);\n\t\t    }\n\t\t    return ret;\n\t\t  }\n\n\t\t  // Primitive types cannot have properties\n\t\t  var primitive = formatPrimitive(ctx, value);\n\t\t  if (primitive) {\n\t\t    return primitive;\n\t\t  }\n\n\t\t  // Look up the keys of the object.\n\t\t  var keys = Object.keys(value);\n\t\t  var visibleKeys = arrayToHash(keys);\n\n\t\t  if (ctx.showHidden) {\n\t\t    keys = Object.getOwnPropertyNames(value);\n\t\t  }\n\n\t\t  // IE doesn't make error fields non-enumerable\n\t\t  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\t\t  if (isError(value)\n\t\t      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n\t\t    return formatError(value);\n\t\t  }\n\n\t\t  // Some type of object without properties can be shortcutted.\n\t\t  if (keys.length === 0) {\n\t\t    if (isFunction(value)) {\n\t\t      var name = value.name ? ': ' + value.name : '';\n\t\t      return ctx.stylize('[Function' + name + ']', 'special');\n\t\t    }\n\t\t    if (isRegExp(value)) {\n\t\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t\t    }\n\t\t    if (isDate(value)) {\n\t\t      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n\t\t    }\n\t\t    if (isError(value)) {\n\t\t      return formatError(value);\n\t\t    }\n\t\t  }\n\n\t\t  var base = '', array = false, braces = ['{', '}'];\n\n\t\t  // Make Array say that they are Array\n\t\t  if (isArray(value)) {\n\t\t    array = true;\n\t\t    braces = ['[', ']'];\n\t\t  }\n\n\t\t  // Make functions say that they are functions\n\t\t  if (isFunction(value)) {\n\t\t    var n = value.name ? ': ' + value.name : '';\n\t\t    base = ' [Function' + n + ']';\n\t\t  }\n\n\t\t  // Make RegExps say that they are RegExps\n\t\t  if (isRegExp(value)) {\n\t\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t\t  }\n\n\t\t  // Make dates with properties first say the date\n\t\t  if (isDate(value)) {\n\t\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t\t  }\n\n\t\t  // Make error with message first say the error\n\t\t  if (isError(value)) {\n\t\t    base = ' ' + formatError(value);\n\t\t  }\n\n\t\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t\t    return braces[0] + base + braces[1];\n\t\t  }\n\n\t\t  if (recurseTimes < 0) {\n\t\t    if (isRegExp(value)) {\n\t\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t\t    } else {\n\t\t      return ctx.stylize('[Object]', 'special');\n\t\t    }\n\t\t  }\n\n\t\t  ctx.seen.push(value);\n\n\t\t  var output;\n\t\t  if (array) {\n\t\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t\t  } else {\n\t\t    output = keys.map(function(key) {\n\t\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t\t    });\n\t\t  }\n\n\t\t  ctx.seen.pop();\n\n\t\t  return reduceToSingleString(output, base, braces);\n\t\t}\n\n\n\t\tfunction formatPrimitive(ctx, value) {\n\t\t  if (isUndefined(value))\n\t\t    return ctx.stylize('undefined', 'undefined');\n\t\t  if (isString(value)) {\n\t\t    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t\t                                             .replace(/'/g, \"\\\\'\")\n\t\t                                             .replace(/\\\\\"/g, '\"') + '\\'';\n\t\t    return ctx.stylize(simple, 'string');\n\t\t  }\n\t\t  if (isNumber(value))\n\t\t    return ctx.stylize('' + value, 'number');\n\t\t  if (isBoolean(value))\n\t\t    return ctx.stylize('' + value, 'boolean');\n\t\t  // For some reason typeof null is \"object\", so special case here.\n\t\t  if (isNull(value))\n\t\t    return ctx.stylize('null', 'null');\n\t\t}\n\n\n\t\tfunction formatError(value) {\n\t\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t\t}\n\n\n\t\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t\t  var output = [];\n\t\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t\t    if (hasOwnProperty(value, String(i))) {\n\t\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t\t          String(i), true));\n\t\t    } else {\n\t\t      output.push('');\n\t\t    }\n\t\t  }\n\t\t  keys.forEach(function(key) {\n\t\t    if (!key.match(/^\\d+$/)) {\n\t\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t\t          key, true));\n\t\t    }\n\t\t  });\n\t\t  return output;\n\t\t}\n\n\n\t\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t\t  var name, str, desc;\n\t\t  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n\t\t  if (desc.get) {\n\t\t    if (desc.set) {\n\t\t      str = ctx.stylize('[Getter/Setter]', 'special');\n\t\t    } else {\n\t\t      str = ctx.stylize('[Getter]', 'special');\n\t\t    }\n\t\t  } else {\n\t\t    if (desc.set) {\n\t\t      str = ctx.stylize('[Setter]', 'special');\n\t\t    }\n\t\t  }\n\t\t  if (!hasOwnProperty(visibleKeys, key)) {\n\t\t    name = '[' + key + ']';\n\t\t  }\n\t\t  if (!str) {\n\t\t    if (ctx.seen.indexOf(desc.value) < 0) {\n\t\t      if (isNull(recurseTimes)) {\n\t\t        str = formatValue(ctx, desc.value, null);\n\t\t      } else {\n\t\t        str = formatValue(ctx, desc.value, recurseTimes - 1);\n\t\t      }\n\t\t      if (str.indexOf('\\n') > -1) {\n\t\t        if (array) {\n\t\t          str = str.split('\\n').map(function(line) {\n\t\t            return '  ' + line;\n\t\t          }).join('\\n').slice(2);\n\t\t        } else {\n\t\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t\t            return '   ' + line;\n\t\t          }).join('\\n');\n\t\t        }\n\t\t      }\n\t\t    } else {\n\t\t      str = ctx.stylize('[Circular]', 'special');\n\t\t    }\n\t\t  }\n\t\t  if (isUndefined(name)) {\n\t\t    if (array && key.match(/^\\d+$/)) {\n\t\t      return str;\n\t\t    }\n\t\t    name = JSON.stringify('' + key);\n\t\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t\t      name = name.slice(1, -1);\n\t\t      name = ctx.stylize(name, 'name');\n\t\t    } else {\n\t\t      name = name.replace(/'/g, \"\\\\'\")\n\t\t                 .replace(/\\\\\"/g, '\"')\n\t\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t\t      name = ctx.stylize(name, 'string');\n\t\t    }\n\t\t  }\n\n\t\t  return name + ': ' + str;\n\t\t}\n\n\n\t\tfunction reduceToSingleString(output, base, braces) {\n\t\t  var numLinesEst = 0;\n\t\t  var length = output.reduce(function(prev, cur) {\n\t\t    numLinesEst++;\n\t\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t\t    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n\t\t  }, 0);\n\n\t\t  if (length > 60) {\n\t\t    return braces[0] +\n\t\t           (base === '' ? '' : base + '\\n ') +\n\t\t           ' ' +\n\t\t           output.join(',\\n  ') +\n\t\t           ' ' +\n\t\t           braces[1];\n\t\t  }\n\n\t\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t\t}\n\n\n\t\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t\t// because it is fragile and can be easily faked with `Object.create()`.\n\t\texports.types = require$$0();\n\n\t\tfunction isArray(ar) {\n\t\t  return Array.isArray(ar);\n\t\t}\n\t\texports.isArray = isArray;\n\n\t\tfunction isBoolean(arg) {\n\t\t  return typeof arg === 'boolean';\n\t\t}\n\t\texports.isBoolean = isBoolean;\n\n\t\tfunction isNull(arg) {\n\t\t  return arg === null;\n\t\t}\n\t\texports.isNull = isNull;\n\n\t\tfunction isNullOrUndefined(arg) {\n\t\t  return arg == null;\n\t\t}\n\t\texports.isNullOrUndefined = isNullOrUndefined;\n\n\t\tfunction isNumber(arg) {\n\t\t  return typeof arg === 'number';\n\t\t}\n\t\texports.isNumber = isNumber;\n\n\t\tfunction isString(arg) {\n\t\t  return typeof arg === 'string';\n\t\t}\n\t\texports.isString = isString;\n\n\t\tfunction isSymbol(arg) {\n\t\t  return typeof arg === 'symbol';\n\t\t}\n\t\texports.isSymbol = isSymbol;\n\n\t\tfunction isUndefined(arg) {\n\t\t  return arg === void 0;\n\t\t}\n\t\texports.isUndefined = isUndefined;\n\n\t\tfunction isRegExp(re) {\n\t\t  return isObject(re) && objectToString(re) === '[object RegExp]';\n\t\t}\n\t\texports.isRegExp = isRegExp;\n\t\texports.types.isRegExp = isRegExp;\n\n\t\tfunction isObject(arg) {\n\t\t  return typeof arg === 'object' && arg !== null;\n\t\t}\n\t\texports.isObject = isObject;\n\n\t\tfunction isDate(d) {\n\t\t  return isObject(d) && objectToString(d) === '[object Date]';\n\t\t}\n\t\texports.isDate = isDate;\n\t\texports.types.isDate = isDate;\n\n\t\tfunction isError(e) {\n\t\t  return isObject(e) &&\n\t\t      (objectToString(e) === '[object Error]' || e instanceof Error);\n\t\t}\n\t\texports.isError = isError;\n\t\texports.types.isNativeError = isError;\n\n\t\tfunction isFunction(arg) {\n\t\t  return typeof arg === 'function';\n\t\t}\n\t\texports.isFunction = isFunction;\n\n\t\tfunction isPrimitive(arg) {\n\t\t  return arg === null ||\n\t\t         typeof arg === 'boolean' ||\n\t\t         typeof arg === 'number' ||\n\t\t         typeof arg === 'string' ||\n\t\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t\t         typeof arg === 'undefined';\n\t\t}\n\t\texports.isPrimitive = isPrimitive;\n\n\t\texports.isBuffer = require$$1();\n\n\t\tfunction objectToString(o) {\n\t\t  return Object.prototype.toString.call(o);\n\t\t}\n\n\n\t\tfunction pad(n) {\n\t\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t\t}\n\n\n\t\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t\t              'Oct', 'Nov', 'Dec'];\n\n\t\t// 26 Feb 16:19:34\n\t\tfunction timestamp() {\n\t\t  var d = new Date();\n\t\t  var time = [pad(d.getHours()),\n\t\t              pad(d.getMinutes()),\n\t\t              pad(d.getSeconds())].join(':');\n\t\t  return [d.getDate(), months[d.getMonth()], time].join(' ');\n\t\t}\n\n\n\t\t// log is just a thin wrapper to console.log that prepends a timestamp\n\t\texports.log = function() {\n\t\t  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n\t\t};\n\n\n\t\t/**\n\t\t * Inherit the prototype methods from one constructor into another.\n\t\t *\n\t\t * The Function.prototype.inherits from lang.js rewritten as a standalone\n\t\t * function (not on Function.prototype). NOTE: If this file is to be loaded\n\t\t * during bootstrapping this function needs to be rewritten using some native\n\t\t * functions as prototype setup using normal JavaScript does not work as\n\t\t * expected during bootstrapping (see mirror.js in r114903).\n\t\t *\n\t\t * @param {function} ctor Constructor function which needs to inherit the\n\t\t *     prototype.\n\t\t * @param {function} superCtor Constructor function to inherit prototype from.\n\t\t */\n\t\texports.inherits = require$$2();\n\n\t\texports._extend = function(origin, add) {\n\t\t  // Don't do anything if add isn't an object\n\t\t  if (!add || !isObject(add)) return origin;\n\n\t\t  var keys = Object.keys(add);\n\t\t  var i = keys.length;\n\t\t  while (i--) {\n\t\t    origin[keys[i]] = add[keys[i]];\n\t\t  }\n\t\t  return origin;\n\t\t};\n\n\t\tfunction hasOwnProperty(obj, prop) {\n\t\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t\t}\n\n\t\tvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\n\t\texports.promisify = function promisify(original) {\n\t\t  if (typeof original !== 'function')\n\t\t    throw new TypeError('The \"original\" argument must be of type Function');\n\n\t\t  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n\t\t    var fn = original[kCustomPromisifiedSymbol];\n\t\t    if (typeof fn !== 'function') {\n\t\t      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n\t\t    }\n\t\t    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n\t\t      value: fn, enumerable: false, writable: false, configurable: true\n\t\t    });\n\t\t    return fn;\n\t\t  }\n\n\t\t  function fn() {\n\t\t    var promiseResolve, promiseReject;\n\t\t    var promise = new Promise(function (resolve, reject) {\n\t\t      promiseResolve = resolve;\n\t\t      promiseReject = reject;\n\t\t    });\n\n\t\t    var args = [];\n\t\t    for (var i = 0; i < arguments.length; i++) {\n\t\t      args.push(arguments[i]);\n\t\t    }\n\t\t    args.push(function (err, value) {\n\t\t      if (err) {\n\t\t        promiseReject(err);\n\t\t      } else {\n\t\t        promiseResolve(value);\n\t\t      }\n\t\t    });\n\n\t\t    try {\n\t\t      original.apply(this, args);\n\t\t    } catch (err) {\n\t\t      promiseReject(err);\n\t\t    }\n\n\t\t    return promise;\n\t\t  }\n\n\t\t  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n\t\t  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n\t\t    value: fn, enumerable: false, writable: false, configurable: true\n\t\t  });\n\t\t  return Object.defineProperties(\n\t\t    fn,\n\t\t    getOwnPropertyDescriptors(original)\n\t\t  );\n\t\t}\n\n\t\texports.promisify.custom = kCustomPromisifiedSymbol\n\n\t\tfunction callbackifyOnRejected(reason, cb) {\n\t\t  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n\t\t  // Because `null` is a special error value in callbacks which means \"no error\n\t\t  // occurred\", we error-wrap so the callback consumer can distinguish between\n\t\t  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n\t\t  if (!reason) {\n\t\t    var newReason = new Error('Promise was rejected with a falsy value');\n\t\t    newReason.reason = reason;\n\t\t    reason = newReason;\n\t\t  }\n\t\t  return cb(reason);\n\t\t}\n\n\t\tfunction callbackify(original) {\n\t\t  if (typeof original !== 'function') {\n\t\t    throw new TypeError('The \"original\" argument must be of type Function');\n\t\t  }\n\n\t\t  // We DO NOT return the promise as it gives the user a false sense that\n\t\t  // the promise is actually somehow related to the callback's execution\n\t\t  // and that the callback throwing will reject the promise.\n\t\t  function callbackified() {\n\t\t    var args = [];\n\t\t    for (var i = 0; i < arguments.length; i++) {\n\t\t      args.push(arguments[i]);\n\t\t    }\n\n\t\t    var maybeCb = args.pop();\n\t\t    if (typeof maybeCb !== 'function') {\n\t\t      throw new TypeError('The last argument must be of type Function');\n\t\t    }\n\t\t    var self = this;\n\t\t    var cb = function() {\n\t\t      return maybeCb.apply(self, arguments);\n\t\t    };\n\t\t    // In true node style we process the callback on `nextTick` with all the\n\t\t    // implications (stack, `uncaughtException`, `async_hooks`)\n\t\t    original.apply(this, args)\n\t\t      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n\t\t            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n\t\t  }\n\n\t\t  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n\t\t  Object.defineProperties(callbackified,\n\t\t                          getOwnPropertyDescriptors(original));\n\t\t  return callbackified;\n\t\t}\n\t\texports.callbackify = callbackify;\n} (util));\n\treturn util;\n}\n\nexport { requireUtil as __require };","start":1667202704850,"end":1667202707496,"order":"normal"},{"name":"node-polyfills","result":"import { default as process } from 'process';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as util } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/util.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/support/types.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/util/support/isBufferBrowser.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/inherits/inherits_browser.js?commonjs-wrapped\";\n\nvar hasRequiredUtil;\n\nfunction requireUtil () {\n\tif (hasRequiredUtil) return util;\n\thasRequiredUtil = 1;\n\t(function (exports) {\n\t\t// Copyright Joyent, Inc. and other Node contributors.\n\t\t//\n\t\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t\t// copy of this software and associated documentation files (the\n\t\t// \"Software\"), to deal in the Software without restriction, including\n\t\t// without limitation the rights to use, copy, modify, merge, publish,\n\t\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t\t// persons to whom the Software is furnished to do so, subject to the\n\t\t// following conditions:\n\t\t//\n\t\t// The above copyright notice and this permission notice shall be included\n\t\t// in all copies or substantial portions of the Software.\n\t\t//\n\t\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t\tvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n\t\t  function getOwnPropertyDescriptors(obj) {\n\t\t    var keys = Object.keys(obj);\n\t\t    var descriptors = {};\n\t\t    for (var i = 0; i < keys.length; i++) {\n\t\t      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n\t\t    }\n\t\t    return descriptors;\n\t\t  };\n\n\t\tvar formatRegExp = /%[sdj%]/g;\n\t\texports.format = function(f) {\n\t\t  if (!isString(f)) {\n\t\t    var objects = [];\n\t\t    for (var i = 0; i < arguments.length; i++) {\n\t\t      objects.push(inspect(arguments[i]));\n\t\t    }\n\t\t    return objects.join(' ');\n\t\t  }\n\n\t\t  var i = 1;\n\t\t  var args = arguments;\n\t\t  var len = args.length;\n\t\t  var str = String(f).replace(formatRegExp, function(x) {\n\t\t    if (x === '%%') return '%';\n\t\t    if (i >= len) return x;\n\t\t    switch (x) {\n\t\t      case '%s': return String(args[i++]);\n\t\t      case '%d': return Number(args[i++]);\n\t\t      case '%j':\n\t\t        try {\n\t\t          return JSON.stringify(args[i++]);\n\t\t        } catch (_) {\n\t\t          return '[Circular]';\n\t\t        }\n\t\t      default:\n\t\t        return x;\n\t\t    }\n\t\t  });\n\t\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t\t    if (isNull(x) || !isObject(x)) {\n\t\t      str += ' ' + x;\n\t\t    } else {\n\t\t      str += ' ' + inspect(x);\n\t\t    }\n\t\t  }\n\t\t  return str;\n\t\t};\n\n\n\t\t// Mark that a method should not be used.\n\t\t// Returns a modified function which warns once by default.\n\t\t// If --no-deprecation is set, then it is a no-op.\n\t\texports.deprecate = function(fn, msg) {\n\t\t  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n\t\t    return fn;\n\t\t  }\n\n\t\t  // Allow for deprecating things in the process of starting up.\n\t\t  if (typeof process === 'undefined') {\n\t\t    return function() {\n\t\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t\t    };\n\t\t  }\n\n\t\t  var warned = false;\n\t\t  function deprecated() {\n\t\t    if (!warned) {\n\t\t      if (process.throwDeprecation) {\n\t\t        throw new Error(msg);\n\t\t      } else if (process.traceDeprecation) {\n\t\t        console.trace(msg);\n\t\t      } else {\n\t\t        console.error(msg);\n\t\t      }\n\t\t      warned = true;\n\t\t    }\n\t\t    return fn.apply(this, arguments);\n\t\t  }\n\n\t\t  return deprecated;\n\t\t};\n\n\n\t\tvar debugs = {};\n\t\tvar debugEnvRegex = /^$/;\n\n\t\tif ({}.NODE_DEBUG) {\n\t\t  var debugEnv = {}.NODE_DEBUG;\n\t\t  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n\t\t    .replace(/\\*/g, '.*')\n\t\t    .replace(/,/g, '$|^')\n\t\t    .toUpperCase();\n\t\t  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n\t\t}\n\t\texports.debuglog = function(set) {\n\t\t  set = set.toUpperCase();\n\t\t  if (!debugs[set]) {\n\t\t    if (debugEnvRegex.test(set)) {\n\t\t      var pid = process.pid;\n\t\t      debugs[set] = function() {\n\t\t        var msg = exports.format.apply(exports, arguments);\n\t\t        console.error('%s %d: %s', set, pid, msg);\n\t\t      };\n\t\t    } else {\n\t\t      debugs[set] = function() {};\n\t\t    }\n\t\t  }\n\t\t  return debugs[set];\n\t\t};\n\n\n\t\t/**\n\t\t * Echos the value of a value. Trys to print the value out\n\t\t * in the best way possible given the different types.\n\t\t *\n\t\t * @param {Object} obj The object to print out.\n\t\t * @param {Object} opts Optional options object that alters the output.\n\t\t */\n\t\t/* legacy: obj, showHidden, depth, colors*/\n\t\tfunction inspect(obj, opts) {\n\t\t  // default options\n\t\t  var ctx = {\n\t\t    seen: [],\n\t\t    stylize: stylizeNoColor\n\t\t  };\n\t\t  // legacy...\n\t\t  if (arguments.length >= 3) ctx.depth = arguments[2];\n\t\t  if (arguments.length >= 4) ctx.colors = arguments[3];\n\t\t  if (isBoolean(opts)) {\n\t\t    // legacy...\n\t\t    ctx.showHidden = opts;\n\t\t  } else if (opts) {\n\t\t    // got an \"options\" object\n\t\t    exports._extend(ctx, opts);\n\t\t  }\n\t\t  // set default options\n\t\t  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n\t\t  if (isUndefined(ctx.depth)) ctx.depth = 2;\n\t\t  if (isUndefined(ctx.colors)) ctx.colors = false;\n\t\t  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n\t\t  if (ctx.colors) ctx.stylize = stylizeWithColor;\n\t\t  return formatValue(ctx, obj, ctx.depth);\n\t\t}\n\t\texports.inspect = inspect;\n\n\n\t\t// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\t\tinspect.colors = {\n\t\t  'bold' : [1, 22],\n\t\t  'italic' : [3, 23],\n\t\t  'underline' : [4, 24],\n\t\t  'inverse' : [7, 27],\n\t\t  'white' : [37, 39],\n\t\t  'grey' : [90, 39],\n\t\t  'black' : [30, 39],\n\t\t  'blue' : [34, 39],\n\t\t  'cyan' : [36, 39],\n\t\t  'green' : [32, 39],\n\t\t  'magenta' : [35, 39],\n\t\t  'red' : [31, 39],\n\t\t  'yellow' : [33, 39]\n\t\t};\n\n\t\t// Don't use 'blue' not visible on cmd.exe\n\t\tinspect.styles = {\n\t\t  'special': 'cyan',\n\t\t  'number': 'yellow',\n\t\t  'boolean': 'yellow',\n\t\t  'undefined': 'grey',\n\t\t  'null': 'bold',\n\t\t  'string': 'green',\n\t\t  'date': 'magenta',\n\t\t  // \"name\": intentionally not styling\n\t\t  'regexp': 'red'\n\t\t};\n\n\n\t\tfunction stylizeWithColor(str, styleType) {\n\t\t  var style = inspect.styles[styleType];\n\n\t\t  if (style) {\n\t\t    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n\t\t           '\\u001b[' + inspect.colors[style][1] + 'm';\n\t\t  } else {\n\t\t    return str;\n\t\t  }\n\t\t}\n\n\n\t\tfunction stylizeNoColor(str, styleType) {\n\t\t  return str;\n\t\t}\n\n\n\t\tfunction arrayToHash(array) {\n\t\t  var hash = {};\n\n\t\t  array.forEach(function(val, idx) {\n\t\t    hash[val] = true;\n\t\t  });\n\n\t\t  return hash;\n\t\t}\n\n\n\t\tfunction formatValue(ctx, value, recurseTimes) {\n\t\t  // Provide a hook for user-specified inspect functions.\n\t\t  // Check that value is an object with an inspect function on it\n\t\t  if (ctx.customInspect &&\n\t\t      value &&\n\t\t      isFunction(value.inspect) &&\n\t\t      // Filter out the util module, it's inspect function is special\n\t\t      value.inspect !== exports.inspect &&\n\t\t      // Also filter out any prototype objects using the circular check.\n\t\t      !(value.constructor && value.constructor.prototype === value)) {\n\t\t    var ret = value.inspect(recurseTimes, ctx);\n\t\t    if (!isString(ret)) {\n\t\t      ret = formatValue(ctx, ret, recurseTimes);\n\t\t    }\n\t\t    return ret;\n\t\t  }\n\n\t\t  // Primitive types cannot have properties\n\t\t  var primitive = formatPrimitive(ctx, value);\n\t\t  if (primitive) {\n\t\t    return primitive;\n\t\t  }\n\n\t\t  // Look up the keys of the object.\n\t\t  var keys = Object.keys(value);\n\t\t  var visibleKeys = arrayToHash(keys);\n\n\t\t  if (ctx.showHidden) {\n\t\t    keys = Object.getOwnPropertyNames(value);\n\t\t  }\n\n\t\t  // IE doesn't make error fields non-enumerable\n\t\t  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\t\t  if (isError(value)\n\t\t      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n\t\t    return formatError(value);\n\t\t  }\n\n\t\t  // Some type of object without properties can be shortcutted.\n\t\t  if (keys.length === 0) {\n\t\t    if (isFunction(value)) {\n\t\t      var name = value.name ? ': ' + value.name : '';\n\t\t      return ctx.stylize('[Function' + name + ']', 'special');\n\t\t    }\n\t\t    if (isRegExp(value)) {\n\t\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t\t    }\n\t\t    if (isDate(value)) {\n\t\t      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n\t\t    }\n\t\t    if (isError(value)) {\n\t\t      return formatError(value);\n\t\t    }\n\t\t  }\n\n\t\t  var base = '', array = false, braces = ['{', '}'];\n\n\t\t  // Make Array say that they are Array\n\t\t  if (isArray(value)) {\n\t\t    array = true;\n\t\t    braces = ['[', ']'];\n\t\t  }\n\n\t\t  // Make functions say that they are functions\n\t\t  if (isFunction(value)) {\n\t\t    var n = value.name ? ': ' + value.name : '';\n\t\t    base = ' [Function' + n + ']';\n\t\t  }\n\n\t\t  // Make RegExps say that they are RegExps\n\t\t  if (isRegExp(value)) {\n\t\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t\t  }\n\n\t\t  // Make dates with properties first say the date\n\t\t  if (isDate(value)) {\n\t\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t\t  }\n\n\t\t  // Make error with message first say the error\n\t\t  if (isError(value)) {\n\t\t    base = ' ' + formatError(value);\n\t\t  }\n\n\t\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t\t    return braces[0] + base + braces[1];\n\t\t  }\n\n\t\t  if (recurseTimes < 0) {\n\t\t    if (isRegExp(value)) {\n\t\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t\t    } else {\n\t\t      return ctx.stylize('[Object]', 'special');\n\t\t    }\n\t\t  }\n\n\t\t  ctx.seen.push(value);\n\n\t\t  var output;\n\t\t  if (array) {\n\t\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t\t  } else {\n\t\t    output = keys.map(function(key) {\n\t\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t\t    });\n\t\t  }\n\n\t\t  ctx.seen.pop();\n\n\t\t  return reduceToSingleString(output, base, braces);\n\t\t}\n\n\n\t\tfunction formatPrimitive(ctx, value) {\n\t\t  if (isUndefined(value))\n\t\t    return ctx.stylize('undefined', 'undefined');\n\t\t  if (isString(value)) {\n\t\t    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t\t                                             .replace(/'/g, \"\\\\'\")\n\t\t                                             .replace(/\\\\\"/g, '\"') + '\\'';\n\t\t    return ctx.stylize(simple, 'string');\n\t\t  }\n\t\t  if (isNumber(value))\n\t\t    return ctx.stylize('' + value, 'number');\n\t\t  if (isBoolean(value))\n\t\t    return ctx.stylize('' + value, 'boolean');\n\t\t  // For some reason typeof null is \"object\", so special case here.\n\t\t  if (isNull(value))\n\t\t    return ctx.stylize('null', 'null');\n\t\t}\n\n\n\t\tfunction formatError(value) {\n\t\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t\t}\n\n\n\t\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t\t  var output = [];\n\t\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t\t    if (hasOwnProperty(value, String(i))) {\n\t\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t\t          String(i), true));\n\t\t    } else {\n\t\t      output.push('');\n\t\t    }\n\t\t  }\n\t\t  keys.forEach(function(key) {\n\t\t    if (!key.match(/^\\d+$/)) {\n\t\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t\t          key, true));\n\t\t    }\n\t\t  });\n\t\t  return output;\n\t\t}\n\n\n\t\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t\t  var name, str, desc;\n\t\t  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n\t\t  if (desc.get) {\n\t\t    if (desc.set) {\n\t\t      str = ctx.stylize('[Getter/Setter]', 'special');\n\t\t    } else {\n\t\t      str = ctx.stylize('[Getter]', 'special');\n\t\t    }\n\t\t  } else {\n\t\t    if (desc.set) {\n\t\t      str = ctx.stylize('[Setter]', 'special');\n\t\t    }\n\t\t  }\n\t\t  if (!hasOwnProperty(visibleKeys, key)) {\n\t\t    name = '[' + key + ']';\n\t\t  }\n\t\t  if (!str) {\n\t\t    if (ctx.seen.indexOf(desc.value) < 0) {\n\t\t      if (isNull(recurseTimes)) {\n\t\t        str = formatValue(ctx, desc.value, null);\n\t\t      } else {\n\t\t        str = formatValue(ctx, desc.value, recurseTimes - 1);\n\t\t      }\n\t\t      if (str.indexOf('\\n') > -1) {\n\t\t        if (array) {\n\t\t          str = str.split('\\n').map(function(line) {\n\t\t            return '  ' + line;\n\t\t          }).join('\\n').slice(2);\n\t\t        } else {\n\t\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t\t            return '   ' + line;\n\t\t          }).join('\\n');\n\t\t        }\n\t\t      }\n\t\t    } else {\n\t\t      str = ctx.stylize('[Circular]', 'special');\n\t\t    }\n\t\t  }\n\t\t  if (isUndefined(name)) {\n\t\t    if (array && key.match(/^\\d+$/)) {\n\t\t      return str;\n\t\t    }\n\t\t    name = JSON.stringify('' + key);\n\t\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t\t      name = name.slice(1, -1);\n\t\t      name = ctx.stylize(name, 'name');\n\t\t    } else {\n\t\t      name = name.replace(/'/g, \"\\\\'\")\n\t\t                 .replace(/\\\\\"/g, '\"')\n\t\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t\t      name = ctx.stylize(name, 'string');\n\t\t    }\n\t\t  }\n\n\t\t  return name + ': ' + str;\n\t\t}\n\n\n\t\tfunction reduceToSingleString(output, base, braces) {\n\t\t  var numLinesEst = 0;\n\t\t  var length = output.reduce(function(prev, cur) {\n\t\t    numLinesEst++;\n\t\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t\t    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n\t\t  }, 0);\n\n\t\t  if (length > 60) {\n\t\t    return braces[0] +\n\t\t           (base === '' ? '' : base + '\\n ') +\n\t\t           ' ' +\n\t\t           output.join(',\\n  ') +\n\t\t           ' ' +\n\t\t           braces[1];\n\t\t  }\n\n\t\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t\t}\n\n\n\t\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t\t// because it is fragile and can be easily faked with `Object.create()`.\n\t\texports.types = require$$0();\n\n\t\tfunction isArray(ar) {\n\t\t  return Array.isArray(ar);\n\t\t}\n\t\texports.isArray = isArray;\n\n\t\tfunction isBoolean(arg) {\n\t\t  return typeof arg === 'boolean';\n\t\t}\n\t\texports.isBoolean = isBoolean;\n\n\t\tfunction isNull(arg) {\n\t\t  return arg === null;\n\t\t}\n\t\texports.isNull = isNull;\n\n\t\tfunction isNullOrUndefined(arg) {\n\t\t  return arg == null;\n\t\t}\n\t\texports.isNullOrUndefined = isNullOrUndefined;\n\n\t\tfunction isNumber(arg) {\n\t\t  return typeof arg === 'number';\n\t\t}\n\t\texports.isNumber = isNumber;\n\n\t\tfunction isString(arg) {\n\t\t  return typeof arg === 'string';\n\t\t}\n\t\texports.isString = isString;\n\n\t\tfunction isSymbol(arg) {\n\t\t  return typeof arg === 'symbol';\n\t\t}\n\t\texports.isSymbol = isSymbol;\n\n\t\tfunction isUndefined(arg) {\n\t\t  return arg === void 0;\n\t\t}\n\t\texports.isUndefined = isUndefined;\n\n\t\tfunction isRegExp(re) {\n\t\t  return isObject(re) && objectToString(re) === '[object RegExp]';\n\t\t}\n\t\texports.isRegExp = isRegExp;\n\t\texports.types.isRegExp = isRegExp;\n\n\t\tfunction isObject(arg) {\n\t\t  return typeof arg === 'object' && arg !== null;\n\t\t}\n\t\texports.isObject = isObject;\n\n\t\tfunction isDate(d) {\n\t\t  return isObject(d) && objectToString(d) === '[object Date]';\n\t\t}\n\t\texports.isDate = isDate;\n\t\texports.types.isDate = isDate;\n\n\t\tfunction isError(e) {\n\t\t  return isObject(e) &&\n\t\t      (objectToString(e) === '[object Error]' || e instanceof Error);\n\t\t}\n\t\texports.isError = isError;\n\t\texports.types.isNativeError = isError;\n\n\t\tfunction isFunction(arg) {\n\t\t  return typeof arg === 'function';\n\t\t}\n\t\texports.isFunction = isFunction;\n\n\t\tfunction isPrimitive(arg) {\n\t\t  return arg === null ||\n\t\t         typeof arg === 'boolean' ||\n\t\t         typeof arg === 'number' ||\n\t\t         typeof arg === 'string' ||\n\t\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t\t         typeof arg === 'undefined';\n\t\t}\n\t\texports.isPrimitive = isPrimitive;\n\n\t\texports.isBuffer = require$$1();\n\n\t\tfunction objectToString(o) {\n\t\t  return Object.prototype.toString.call(o);\n\t\t}\n\n\n\t\tfunction pad(n) {\n\t\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t\t}\n\n\n\t\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t\t              'Oct', 'Nov', 'Dec'];\n\n\t\t// 26 Feb 16:19:34\n\t\tfunction timestamp() {\n\t\t  var d = new Date();\n\t\t  var time = [pad(d.getHours()),\n\t\t              pad(d.getMinutes()),\n\t\t              pad(d.getSeconds())].join(':');\n\t\t  return [d.getDate(), months[d.getMonth()], time].join(' ');\n\t\t}\n\n\n\t\t// log is just a thin wrapper to console.log that prepends a timestamp\n\t\texports.log = function() {\n\t\t  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n\t\t};\n\n\n\t\t/**\n\t\t * Inherit the prototype methods from one constructor into another.\n\t\t *\n\t\t * The Function.prototype.inherits from lang.js rewritten as a standalone\n\t\t * function (not on Function.prototype). NOTE: If this file is to be loaded\n\t\t * during bootstrapping this function needs to be rewritten using some native\n\t\t * functions as prototype setup using normal JavaScript does not work as\n\t\t * expected during bootstrapping (see mirror.js in r114903).\n\t\t *\n\t\t * @param {function} ctor Constructor function which needs to inherit the\n\t\t *     prototype.\n\t\t * @param {function} superCtor Constructor function to inherit prototype from.\n\t\t */\n\t\texports.inherits = require$$2();\n\n\t\texports._extend = function(origin, add) {\n\t\t  // Don't do anything if add isn't an object\n\t\t  if (!add || !isObject(add)) return origin;\n\n\t\t  var keys = Object.keys(add);\n\t\t  var i = keys.length;\n\t\t  while (i--) {\n\t\t    origin[keys[i]] = add[keys[i]];\n\t\t  }\n\t\t  return origin;\n\t\t};\n\n\t\tfunction hasOwnProperty(obj, prop) {\n\t\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t\t}\n\n\t\tvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\n\t\texports.promisify = function promisify(original) {\n\t\t  if (typeof original !== 'function')\n\t\t    throw new TypeError('The \"original\" argument must be of type Function');\n\n\t\t  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n\t\t    var fn = original[kCustomPromisifiedSymbol];\n\t\t    if (typeof fn !== 'function') {\n\t\t      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n\t\t    }\n\t\t    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n\t\t      value: fn, enumerable: false, writable: false, configurable: true\n\t\t    });\n\t\t    return fn;\n\t\t  }\n\n\t\t  function fn() {\n\t\t    var promiseResolve, promiseReject;\n\t\t    var promise = new Promise(function (resolve, reject) {\n\t\t      promiseResolve = resolve;\n\t\t      promiseReject = reject;\n\t\t    });\n\n\t\t    var args = [];\n\t\t    for (var i = 0; i < arguments.length; i++) {\n\t\t      args.push(arguments[i]);\n\t\t    }\n\t\t    args.push(function (err, value) {\n\t\t      if (err) {\n\t\t        promiseReject(err);\n\t\t      } else {\n\t\t        promiseResolve(value);\n\t\t      }\n\t\t    });\n\n\t\t    try {\n\t\t      original.apply(this, args);\n\t\t    } catch (err) {\n\t\t      promiseReject(err);\n\t\t    }\n\n\t\t    return promise;\n\t\t  }\n\n\t\t  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n\t\t  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n\t\t    value: fn, enumerable: false, writable: false, configurable: true\n\t\t  });\n\t\t  return Object.defineProperties(\n\t\t    fn,\n\t\t    getOwnPropertyDescriptors(original)\n\t\t  );\n\t\t}\n\n\t\texports.promisify.custom = kCustomPromisifiedSymbol\n\n\t\tfunction callbackifyOnRejected(reason, cb) {\n\t\t  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n\t\t  // Because `null` is a special error value in callbacks which means \"no error\n\t\t  // occurred\", we error-wrap so the callback consumer can distinguish between\n\t\t  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n\t\t  if (!reason) {\n\t\t    var newReason = new Error('Promise was rejected with a falsy value');\n\t\t    newReason.reason = reason;\n\t\t    reason = newReason;\n\t\t  }\n\t\t  return cb(reason);\n\t\t}\n\n\t\tfunction callbackify(original) {\n\t\t  if (typeof original !== 'function') {\n\t\t    throw new TypeError('The \"original\" argument must be of type Function');\n\t\t  }\n\n\t\t  // We DO NOT return the promise as it gives the user a false sense that\n\t\t  // the promise is actually somehow related to the callback's execution\n\t\t  // and that the callback throwing will reject the promise.\n\t\t  function callbackified() {\n\t\t    var args = [];\n\t\t    for (var i = 0; i < arguments.length; i++) {\n\t\t      args.push(arguments[i]);\n\t\t    }\n\n\t\t    var maybeCb = args.pop();\n\t\t    if (typeof maybeCb !== 'function') {\n\t\t      throw new TypeError('The last argument must be of type Function');\n\t\t    }\n\t\t    var self = this;\n\t\t    var cb = function() {\n\t\t      return maybeCb.apply(self, arguments);\n\t\t    };\n\t\t    // In true node style we process the callback on `nextTick` with all the\n\t\t    // implications (stack, `uncaughtException`, `async_hooks`)\n\t\t    original.apply(this, args)\n\t\t      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n\t\t            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n\t\t  }\n\n\t\t  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n\t\t  Object.defineProperties(callbackified,\n\t\t                          getOwnPropertyDescriptors(original));\n\t\t  return callbackified;\n\t\t}\n\t\texports.callbackify = callbackify;\n} (util));\n\treturn util;\n}\n\nexport { requireUtil as __require };","start":1667202707497,"end":1667202707503,"order":"normal"}]}
