{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/dotjs/format.js","transforms":[{"name":"vite:load-fallback","result":"'use strict';\nmodule.exports = function generate_format(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  if (it.opts.format === false) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n    return out;\n  }\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $unknownFormats = it.opts.unknownFormats,\n    $allowUnknown = Array.isArray($unknownFormats);\n  if ($isData) {\n    var $format = 'format' + $lvl,\n      $isObject = 'isObject' + $lvl,\n      $formatType = 'formatType' + $lvl;\n    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \\'object\\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \\'string\\'; if (' + ($isObject) + ') { ';\n    if (it.async) {\n      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';\n    }\n    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';\n    if ($isData) {\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\n    }\n    out += ' (';\n    if ($unknownFormats != 'ignore') {\n      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';\n      if ($allowUnknown) {\n        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';\n      }\n      out += ') || ';\n    }\n    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \\'' + ($ruleType) + '\\' && !(typeof ' + ($format) + ' == \\'function\\' ? ';\n    if (it.async) {\n      out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';\n    } else {\n      out += ' ' + ($format) + '(' + ($data) + ') ';\n    }\n    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';\n  } else {\n    var $format = it.formats[$schema];\n    if (!$format) {\n      if ($unknownFormats == 'ignore') {\n        it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      } else {\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n      }\n    }\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n    var $formatType = $isObject && $format.type || 'string';\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n    if ($formatType != $ruleType) {\n      if ($breakOnError) {\n        out += ' if (true) { ';\n      }\n      return out;\n    }\n    if ($async) {\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n      out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';\n    } else {\n      out += ' if (! ';\n      var $formatRef = 'formats' + it.util.getProperty($schema);\n      if ($isObject) $formatRef += '.validate';\n      if (typeof $format == 'function') {\n        out += ' ' + ($formatRef) + '(' + ($data) + ') ';\n      } else {\n        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';\n      }\n      out += ') { ';\n    }\n  }\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('format') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += '  } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match format \"';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + (it.util.escapeQuotes($schema));\n      }\n      out += '\"\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + (it.util.toQuotedString($schema));\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","start":1667202707200,"end":1667202707319},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar format;\nvar hasRequiredFormat;\n\nfunction requireFormat () {\n\tif (hasRequiredFormat) return format;\n\thasRequiredFormat = 1;\n\t'use strict';\n\tformat = function generate_format(it, $keyword, $ruleType) {\n\t  var out = ' ';\n\t  var $lvl = it.level;\n\t  var $dataLvl = it.dataLevel;\n\t  var $schema = it.schema[$keyword];\n\t  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n\t  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n\t  var $breakOnError = !it.opts.allErrors;\n\t  var $data = 'data' + ($dataLvl || '');\n\t  if (it.opts.format === false) {\n\t    if ($breakOnError) {\n\t      out += ' if (true) { ';\n\t    }\n\t    return out;\n\t  }\n\t  var $isData = it.opts.$data && $schema && $schema.$data,\n\t    $schemaValue;\n\t  if ($isData) {\n\t    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n\t    $schemaValue = 'schema' + $lvl;\n\t  } else {\n\t    $schemaValue = $schema;\n\t  }\n\t  var $unknownFormats = it.opts.unknownFormats,\n\t    $allowUnknown = Array.isArray($unknownFormats);\n\t  if ($isData) {\n\t    var $format = 'format' + $lvl,\n\t      $isObject = 'isObject' + $lvl,\n\t      $formatType = 'formatType' + $lvl;\n\t    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \\'object\\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \\'string\\'; if (' + ($isObject) + ') { ';\n\t    if (it.async) {\n\t      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';\n\t    }\n\t    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';\n\t    if ($isData) {\n\t      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\n\t    }\n\t    out += ' (';\n\t    if ($unknownFormats != 'ignore') {\n\t      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';\n\t      if ($allowUnknown) {\n\t        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';\n\t      }\n\t      out += ') || ';\n\t    }\n\t    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \\'' + ($ruleType) + '\\' && !(typeof ' + ($format) + ' == \\'function\\' ? ';\n\t    if (it.async) {\n\t      out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';\n\t    } else {\n\t      out += ' ' + ($format) + '(' + ($data) + ') ';\n\t    }\n\t    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';\n\t  } else {\n\t    var $format = it.formats[$schema];\n\t    if (!$format) {\n\t      if ($unknownFormats == 'ignore') {\n\t        it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n\t        if ($breakOnError) {\n\t          out += ' if (true) { ';\n\t        }\n\t        return out;\n\t      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\n\t        if ($breakOnError) {\n\t          out += ' if (true) { ';\n\t        }\n\t        return out;\n\t      } else {\n\t        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n\t      }\n\t    }\n\t    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n\t    var $formatType = $isObject && $format.type || 'string';\n\t    if ($isObject) {\n\t      var $async = $format.async === true;\n\t      $format = $format.validate;\n\t    }\n\t    if ($formatType != $ruleType) {\n\t      if ($breakOnError) {\n\t        out += ' if (true) { ';\n\t      }\n\t      return out;\n\t    }\n\t    if ($async) {\n\t      if (!it.async) throw new Error('async format in sync schema');\n\t      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n\t      out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';\n\t    } else {\n\t      out += ' if (! ';\n\t      var $formatRef = 'formats' + it.util.getProperty($schema);\n\t      if ($isObject) $formatRef += '.validate';\n\t      if (typeof $format == 'function') {\n\t        out += ' ' + ($formatRef) + '(' + ($data) + ') ';\n\t      } else {\n\t        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';\n\t      }\n\t      out += ') { ';\n\t    }\n\t  }\n\t  var $$outStack = $$outStack || [];\n\t  $$outStack.push(out);\n\t  out = ''; /* istanbul ignore else */\n\t  if (it.createErrors !== false) {\n\t    out += ' { keyword: \\'' + ('format') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';\n\t    if ($isData) {\n\t      out += '' + ($schemaValue);\n\t    } else {\n\t      out += '' + (it.util.toQuotedString($schema));\n\t    }\n\t    out += '  } ';\n\t    if (it.opts.messages !== false) {\n\t      out += ' , message: \\'should match format \"';\n\t      if ($isData) {\n\t        out += '\\' + ' + ($schemaValue) + ' + \\'';\n\t      } else {\n\t        out += '' + (it.util.escapeQuotes($schema));\n\t      }\n\t      out += '\"\\' ';\n\t    }\n\t    if (it.opts.verbose) {\n\t      out += ' , schema:  ';\n\t      if ($isData) {\n\t        out += 'validate.schema' + ($schemaPath);\n\t      } else {\n\t        out += '' + (it.util.toQuotedString($schema));\n\t      }\n\t      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n\t    }\n\t    out += ' } ';\n\t  } else {\n\t    out += ' {} ';\n\t  }\n\t  var __err = out;\n\t  out = $$outStack.pop();\n\t  if (!it.compositeRule && $breakOnError) {\n\t    /* istanbul ignore if */\n\t    if (it.async) {\n\t      out += ' throw new ValidationError([' + (__err) + ']); ';\n\t    } else {\n\t      out += ' validate.errors = [' + (__err) + ']; return false; ';\n\t    }\n\t  } else {\n\t    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n\t  }\n\t  out += ' } ';\n\t  if ($breakOnError) {\n\t    out += ' else { ';\n\t  }\n\t  return out;\n\t}\n\treturn format;\n}\n\nexport { requireFormat as __require };","start":1667202707320,"end":1667202707321,"order":"normal"}]}
