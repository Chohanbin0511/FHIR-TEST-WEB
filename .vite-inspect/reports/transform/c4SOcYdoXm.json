{"resolvedId":"C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/async.js","transforms":[{"name":"vite:load-fallback","result":"'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\n\nmodule.exports = compileAsync;\n\n\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n  /* global Promise */\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function')\n    throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(\n      function(v) { callback(null, v); },\n      callback\n    );\n  }\n\n  return p;\n\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema)\n            ? compileAsync.call(self, { $ref: $schema }, true)\n            : Promise.resolve();\n  }\n\n\n  function _compileAsync(schemaObj) {\n    try { return self._compile(schemaObj); }\n    catch(e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n      var schemaPromise = self._loadingSchemas[ref];\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function() {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}\n","start":1667202983518,"end":1667202983786},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000C:/chohbin/Fhir-Test-Web/node_modules/ajv/lib/compile/error_classes.js?commonjs-wrapped\";\n\nvar async;\nvar hasRequiredAsync;\n\nfunction requireAsync () {\n\tif (hasRequiredAsync) return async;\n\thasRequiredAsync = 1;\n\t'use strict';\n\n\tvar MissingRefError = require$$0().MissingRef;\n\n\tasync = compileAsync;\n\n\n\t/**\n\t * Creates validating function for passed schema with asynchronous loading of missing schemas.\n\t * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n\t * @this  Ajv\n\t * @param {Object}   schema schema object\n\t * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n\t * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n\t * @return {Promise} promise that resolves with a validating function.\n\t */\n\tfunction compileAsync(schema, meta, callback) {\n\t  /* eslint no-shadow: 0 */\n\t  /* global Promise */\n\t  /* jshint validthis: true */\n\t  var self = this;\n\t  if (typeof this._opts.loadSchema != 'function')\n\t    throw new Error('options.loadSchema should be a function');\n\n\t  if (typeof meta == 'function') {\n\t    callback = meta;\n\t    meta = undefined;\n\t  }\n\n\t  var p = loadMetaSchemaOf(schema).then(function () {\n\t    var schemaObj = self._addSchema(schema, undefined, meta);\n\t    return schemaObj.validate || _compileAsync(schemaObj);\n\t  });\n\n\t  if (callback) {\n\t    p.then(\n\t      function(v) { callback(null, v); },\n\t      callback\n\t    );\n\t  }\n\n\t  return p;\n\n\n\t  function loadMetaSchemaOf(sch) {\n\t    var $schema = sch.$schema;\n\t    return $schema && !self.getSchema($schema)\n\t            ? compileAsync.call(self, { $ref: $schema }, true)\n\t            : Promise.resolve();\n\t  }\n\n\n\t  function _compileAsync(schemaObj) {\n\t    try { return self._compile(schemaObj); }\n\t    catch(e) {\n\t      if (e instanceof MissingRefError) return loadMissingSchema(e);\n\t      throw e;\n\t    }\n\n\n\t    function loadMissingSchema(e) {\n\t      var ref = e.missingSchema;\n\t      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n\t      var schemaPromise = self._loadingSchemas[ref];\n\t      if (!schemaPromise) {\n\t        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n\t        schemaPromise.then(removePromise, removePromise);\n\t      }\n\n\t      return schemaPromise.then(function (sch) {\n\t        if (!added(ref)) {\n\t          return loadMetaSchemaOf(sch).then(function () {\n\t            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n\t          });\n\t        }\n\t      }).then(function() {\n\t        return _compileAsync(schemaObj);\n\t      });\n\n\t      function removePromise() {\n\t        delete self._loadingSchemas[ref];\n\t      }\n\n\t      function added(ref) {\n\t        return self._refs[ref] || self._schemas[ref];\n\t      }\n\t    }\n\t  }\n\t}\n\treturn async;\n}\n\nexport { requireAsync as __require };","start":1667202983787,"end":1667202984447,"order":"normal"}]}
